"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.makeHostedZoneArn = exports.determineFullyQualifiedDomainName = exports.validateZoneName = void 0;
const core_1 = require("@aws-cdk/core");
/**
 * Validates a zone name is valid by Route53 specifc naming rules,
 * and that there is no trailing dot in the name.
 *
 * @param zoneName the zone name to be validated.
 * @returns +zoneName+
 * @throws ValidationError if the name is not valid.
 */
function validateZoneName(zoneName) {
    if (zoneName.endsWith('.')) {
        throw new ValidationError('zone name must not end with a trailing dot');
    }
    if (zoneName.length > 255) {
        throw new ValidationError('zone name cannot be more than 255 bytes long');
    }
    if (zoneName.split('.').find(label => label.length > 63)) {
        throw new ValidationError('zone name labels cannot be more than 63 bytes long');
    }
    if (!zoneName.match(/^[a-z0-9!"#$%&'()*+,/:;<=>?@[\\\]^_`{|}~.-]+$/i)) {
        throw new ValidationError('zone names can only contain a-z, 0-9, -, ! " # $ % & \' ( ) * + , - / : ; < = > ? @ [ \ ] ^ _ ` { | } ~ .');
    }
}
exports.validateZoneName = validateZoneName;
class ValidationError extends Error {
    constructor(message) {
        super(message);
    }
}
/**
 * Route53 requires the record names are specified as fully qualified names, but this
 * forces lots of redundant work on the user (repeating the zone name over and over).
 * This function allows the user to be lazier and offers a nicer experience, by
 * qualifying relative names appropriately:
 *
 * @param providedName the user-specified name of the record.
 * @param zoneName   the fully-qualified name of the zone the record will be created in.
 *
 * @returns <ul>
 *        <li>If +providedName+ ends with a +.+, use it as-is</li>
 *        <li>If +providedName+ ends with or equals +zoneName+, append a trailing +.+</li>
 *        <li>Otherwise, append +.+, +zoneName+ and a trailing +.+</li>
 *      </ul>
 */
function determineFullyQualifiedDomainName(providedName, hostedZone) {
    if (providedName.endsWith('.')) {
        return providedName;
    }
    const hostedZoneName = hostedZone.zoneName.endsWith('.')
        ? hostedZone.zoneName.substring(0, hostedZone.zoneName.length - 1)
        : hostedZone.zoneName;
    const suffix = `.${hostedZoneName}`;
    if (providedName.endsWith(suffix) || providedName === hostedZoneName) {
        return `${providedName}.`;
    }
    return `${providedName}${suffix}.`;
}
exports.determineFullyQualifiedDomainName = determineFullyQualifiedDomainName;
function makeHostedZoneArn(construct, hostedZoneId) {
    return core_1.Stack.of(construct).formatArn({
        account: '',
        region: '',
        service: 'route53',
        resource: 'hostedzone',
        resourceName: hostedZoneId,
    });
}
exports.makeHostedZoneArn = makeHostedZoneArn;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidXRpbC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbInV0aWwudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7O0FBQUEsd0NBQXNDO0FBT3RDOzs7Ozs7O0dBT0c7QUFDSCxTQUFnQixnQkFBZ0IsQ0FBQyxRQUFnQjtJQUMvQyxJQUFJLFFBQVEsQ0FBQyxRQUFRLENBQUMsR0FBRyxDQUFDLEVBQUU7UUFDMUIsTUFBTSxJQUFJLGVBQWUsQ0FBQyw0Q0FBNEMsQ0FBQyxDQUFDO0tBQ3pFO0lBQ0QsSUFBSSxRQUFRLENBQUMsTUFBTSxHQUFHLEdBQUcsRUFBRTtRQUN6QixNQUFNLElBQUksZUFBZSxDQUFDLDhDQUE4QyxDQUFDLENBQUM7S0FDM0U7SUFDRCxJQUFJLFFBQVEsQ0FBQyxLQUFLLENBQUMsR0FBRyxDQUFDLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxFQUFFLENBQUMsS0FBSyxDQUFDLE1BQU0sR0FBRyxFQUFFLENBQUMsRUFBRTtRQUN4RCxNQUFNLElBQUksZUFBZSxDQUFDLG9EQUFvRCxDQUFDLENBQUM7S0FDakY7SUFDRCxJQUFJLENBQUMsUUFBUSxDQUFDLEtBQUssQ0FBQyxnREFBZ0QsQ0FBQyxFQUFFO1FBQ3JFLE1BQU0sSUFBSSxlQUFlLENBQUMsMkdBQTJHLENBQUMsQ0FBQztLQUN4STtBQUNILENBQUM7QUFiRCw0Q0FhQztBQUVELE1BQU0sZUFBZ0IsU0FBUSxLQUFLO0lBQ2pDLFlBQVksT0FBZTtRQUN6QixLQUFLLENBQUMsT0FBTyxDQUFDLENBQUM7SUFDakIsQ0FBQztDQUNGO0FBRUQ7Ozs7Ozs7Ozs7Ozs7O0dBY0c7QUFDSCxTQUFnQixpQ0FBaUMsQ0FBQyxZQUFvQixFQUFFLFVBQXVCO0lBQzdGLElBQUksWUFBWSxDQUFDLFFBQVEsQ0FBQyxHQUFHLENBQUMsRUFBRTtRQUM5QixPQUFPLFlBQVksQ0FBQztLQUNyQjtJQUVELE1BQU0sY0FBYyxHQUFHLFVBQVUsQ0FBQyxRQUFRLENBQUMsUUFBUSxDQUFDLEdBQUcsQ0FBQztRQUN0RCxDQUFDLENBQUMsVUFBVSxDQUFDLFFBQVEsQ0FBQyxTQUFTLENBQUMsQ0FBQyxFQUFFLFVBQVUsQ0FBQyxRQUFRLENBQUMsTUFBTSxHQUFHLENBQUMsQ0FBQztRQUNsRSxDQUFDLENBQUMsVUFBVSxDQUFDLFFBQVEsQ0FBQztJQUV4QixNQUFNLE1BQU0sR0FBRyxJQUFJLGNBQWMsRUFBRSxDQUFDO0lBQ3BDLElBQUksWUFBWSxDQUFDLFFBQVEsQ0FBQyxNQUFNLENBQUMsSUFBSSxZQUFZLEtBQUssY0FBYyxFQUFFO1FBQ3BFLE9BQU8sR0FBRyxZQUFZLEdBQUcsQ0FBQztLQUMzQjtJQUVELE9BQU8sR0FBRyxZQUFZLEdBQUcsTUFBTSxHQUFHLENBQUM7QUFDckMsQ0FBQztBQWZELDhFQWVDO0FBRUQsU0FBZ0IsaUJBQWlCLENBQUMsU0FBb0IsRUFBRSxZQUFvQjtJQUMxRSxPQUFPLFlBQUssQ0FBQyxFQUFFLENBQUMsU0FBUyxDQUFDLENBQUMsU0FBUyxDQUFDO1FBQ25DLE9BQU8sRUFBRSxFQUFFO1FBQ1gsTUFBTSxFQUFFLEVBQUU7UUFDVixPQUFPLEVBQUUsU0FBUztRQUNsQixRQUFRLEVBQUUsWUFBWTtRQUN0QixZQUFZLEVBQUUsWUFBWTtLQUMzQixDQUFDLENBQUM7QUFDTCxDQUFDO0FBUkQsOENBUUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBTdGFjayB9IGZyb20gJ0Bhd3MtY2RrL2NvcmUnO1xuaW1wb3J0IHsgSUhvc3RlZFpvbmUgfSBmcm9tICcuL2hvc3RlZC16b25lLXJlZic7XG5cbi8vIGtlZXAgdGhpcyBpbXBvcnQgc2VwYXJhdGUgZnJvbSBvdGhlciBpbXBvcnRzIHRvIHJlZHVjZSBjaGFuY2UgZm9yIG1lcmdlIGNvbmZsaWN0cyB3aXRoIHYyLW1haW5cbi8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1kdXBsaWNhdGUtaW1wb3J0cywgaW1wb3J0L29yZGVyXG5pbXBvcnQgeyBDb25zdHJ1Y3QgfSBmcm9tICdAYXdzLWNkay9jb3JlJztcblxuLyoqXG4gKiBWYWxpZGF0ZXMgYSB6b25lIG5hbWUgaXMgdmFsaWQgYnkgUm91dGU1MyBzcGVjaWZjIG5hbWluZyBydWxlcyxcbiAqIGFuZCB0aGF0IHRoZXJlIGlzIG5vIHRyYWlsaW5nIGRvdCBpbiB0aGUgbmFtZS5cbiAqXG4gKiBAcGFyYW0gem9uZU5hbWUgdGhlIHpvbmUgbmFtZSB0byBiZSB2YWxpZGF0ZWQuXG4gKiBAcmV0dXJucyArem9uZU5hbWUrXG4gKiBAdGhyb3dzIFZhbGlkYXRpb25FcnJvciBpZiB0aGUgbmFtZSBpcyBub3QgdmFsaWQuXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiB2YWxpZGF0ZVpvbmVOYW1lKHpvbmVOYW1lOiBzdHJpbmcpIHtcbiAgaWYgKHpvbmVOYW1lLmVuZHNXaXRoKCcuJykpIHtcbiAgICB0aHJvdyBuZXcgVmFsaWRhdGlvbkVycm9yKCd6b25lIG5hbWUgbXVzdCBub3QgZW5kIHdpdGggYSB0cmFpbGluZyBkb3QnKTtcbiAgfVxuICBpZiAoem9uZU5hbWUubGVuZ3RoID4gMjU1KSB7XG4gICAgdGhyb3cgbmV3IFZhbGlkYXRpb25FcnJvcignem9uZSBuYW1lIGNhbm5vdCBiZSBtb3JlIHRoYW4gMjU1IGJ5dGVzIGxvbmcnKTtcbiAgfVxuICBpZiAoem9uZU5hbWUuc3BsaXQoJy4nKS5maW5kKGxhYmVsID0+IGxhYmVsLmxlbmd0aCA+IDYzKSkge1xuICAgIHRocm93IG5ldyBWYWxpZGF0aW9uRXJyb3IoJ3pvbmUgbmFtZSBsYWJlbHMgY2Fubm90IGJlIG1vcmUgdGhhbiA2MyBieXRlcyBsb25nJyk7XG4gIH1cbiAgaWYgKCF6b25lTmFtZS5tYXRjaCgvXlthLXowLTkhXCIjJCUmJygpKissLzo7PD0+P0BbXFxcXFxcXV5fYHt8fX4uLV0rJC9pKSkge1xuICAgIHRocm93IG5ldyBWYWxpZGF0aW9uRXJyb3IoJ3pvbmUgbmFtZXMgY2FuIG9ubHkgY29udGFpbiBhLXosIDAtOSwgLSwgISBcIiAjICQgJSAmIFxcJyAoICkgKiArICwgLSAvIDogOyA8ID0gPiA/IEAgWyBcXCBdIF4gXyBgIHsgfCB9IH4gLicpO1xuICB9XG59XG5cbmNsYXNzIFZhbGlkYXRpb25FcnJvciBleHRlbmRzIEVycm9yIHtcbiAgY29uc3RydWN0b3IobWVzc2FnZTogc3RyaW5nKSB7XG4gICAgc3VwZXIobWVzc2FnZSk7XG4gIH1cbn1cblxuLyoqXG4gKiBSb3V0ZTUzIHJlcXVpcmVzIHRoZSByZWNvcmQgbmFtZXMgYXJlIHNwZWNpZmllZCBhcyBmdWxseSBxdWFsaWZpZWQgbmFtZXMsIGJ1dCB0aGlzXG4gKiBmb3JjZXMgbG90cyBvZiByZWR1bmRhbnQgd29yayBvbiB0aGUgdXNlciAocmVwZWF0aW5nIHRoZSB6b25lIG5hbWUgb3ZlciBhbmQgb3ZlcikuXG4gKiBUaGlzIGZ1bmN0aW9uIGFsbG93cyB0aGUgdXNlciB0byBiZSBsYXppZXIgYW5kIG9mZmVycyBhIG5pY2VyIGV4cGVyaWVuY2UsIGJ5XG4gKiBxdWFsaWZ5aW5nIHJlbGF0aXZlIG5hbWVzIGFwcHJvcHJpYXRlbHk6XG4gKlxuICogQHBhcmFtIHByb3ZpZGVkTmFtZSB0aGUgdXNlci1zcGVjaWZpZWQgbmFtZSBvZiB0aGUgcmVjb3JkLlxuICogQHBhcmFtIHpvbmVOYW1lICAgdGhlIGZ1bGx5LXF1YWxpZmllZCBuYW1lIG9mIHRoZSB6b25lIHRoZSByZWNvcmQgd2lsbCBiZSBjcmVhdGVkIGluLlxuICpcbiAqIEByZXR1cm5zIDx1bD5cbiAqICAgICAgICA8bGk+SWYgK3Byb3ZpZGVkTmFtZSsgZW5kcyB3aXRoIGEgKy4rLCB1c2UgaXQgYXMtaXM8L2xpPlxuICogICAgICAgIDxsaT5JZiArcHJvdmlkZWROYW1lKyBlbmRzIHdpdGggb3IgZXF1YWxzICt6b25lTmFtZSssIGFwcGVuZCBhIHRyYWlsaW5nICsuKzwvbGk+XG4gKiAgICAgICAgPGxpPk90aGVyd2lzZSwgYXBwZW5kICsuKywgK3pvbmVOYW1lKyBhbmQgYSB0cmFpbGluZyArLis8L2xpPlxuICogICAgICA8L3VsPlxuICovXG5leHBvcnQgZnVuY3Rpb24gZGV0ZXJtaW5lRnVsbHlRdWFsaWZpZWREb21haW5OYW1lKHByb3ZpZGVkTmFtZTogc3RyaW5nLCBob3N0ZWRab25lOiBJSG9zdGVkWm9uZSk6IHN0cmluZyB7XG4gIGlmIChwcm92aWRlZE5hbWUuZW5kc1dpdGgoJy4nKSkge1xuICAgIHJldHVybiBwcm92aWRlZE5hbWU7XG4gIH1cblxuICBjb25zdCBob3N0ZWRab25lTmFtZSA9IGhvc3RlZFpvbmUuem9uZU5hbWUuZW5kc1dpdGgoJy4nKVxuICAgID8gaG9zdGVkWm9uZS56b25lTmFtZS5zdWJzdHJpbmcoMCwgaG9zdGVkWm9uZS56b25lTmFtZS5sZW5ndGggLSAxKVxuICAgIDogaG9zdGVkWm9uZS56b25lTmFtZTtcblxuICBjb25zdCBzdWZmaXggPSBgLiR7aG9zdGVkWm9uZU5hbWV9YDtcbiAgaWYgKHByb3ZpZGVkTmFtZS5lbmRzV2l0aChzdWZmaXgpIHx8IHByb3ZpZGVkTmFtZSA9PT0gaG9zdGVkWm9uZU5hbWUpIHtcbiAgICByZXR1cm4gYCR7cHJvdmlkZWROYW1lfS5gO1xuICB9XG5cbiAgcmV0dXJuIGAke3Byb3ZpZGVkTmFtZX0ke3N1ZmZpeH0uYDtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIG1ha2VIb3N0ZWRab25lQXJuKGNvbnN0cnVjdDogQ29uc3RydWN0LCBob3N0ZWRab25lSWQ6IHN0cmluZyk6IHN0cmluZyB7XG4gIHJldHVybiBTdGFjay5vZihjb25zdHJ1Y3QpLmZvcm1hdEFybih7XG4gICAgYWNjb3VudDogJycsXG4gICAgcmVnaW9uOiAnJyxcbiAgICBzZXJ2aWNlOiAncm91dGU1MycsXG4gICAgcmVzb3VyY2U6ICdob3N0ZWR6b25lJyxcbiAgICByZXNvdXJjZU5hbWU6IGhvc3RlZFpvbmVJZCxcbiAgfSk7XG59XG4iXX0=