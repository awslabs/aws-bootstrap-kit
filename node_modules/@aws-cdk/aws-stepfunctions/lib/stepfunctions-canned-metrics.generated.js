"use strict";
// Copyright 2012-2021 Amazon.com, Inc. or its affiliates. All Rights Reserved.
Object.defineProperty(exports, "__esModule", { value: true });
exports.StatesMetrics = void 0;
/* eslint-disable max-len */ // This is generated code - line lengths are difficult to control
class StatesMetrics {
    static executionTimeAverage(dimensions) {
        return {
            namespace: 'AWS/States',
            metricName: 'ExecutionTime',
            dimensions,
            statistic: 'Average',
        };
    }
    static executionsFailedAverage(dimensions) {
        return {
            namespace: 'AWS/States',
            metricName: 'ExecutionsFailed',
            dimensions,
            statistic: 'Average',
        };
    }
    static executionsSucceededAverage(dimensions) {
        return {
            namespace: 'AWS/States',
            metricName: 'ExecutionsSucceeded',
            dimensions,
            statistic: 'Average',
        };
    }
    static executionsThrottledAverage(dimensions) {
        return {
            namespace: 'AWS/States',
            metricName: 'ExecutionsThrottled',
            dimensions,
            statistic: 'Average',
        };
    }
    static executionsAbortedAverage(dimensions) {
        return {
            namespace: 'AWS/States',
            metricName: 'ExecutionsAborted',
            dimensions,
            statistic: 'Average',
        };
    }
    static executionsTimedOutAverage(dimensions) {
        return {
            namespace: 'AWS/States',
            metricName: 'ExecutionsTimedOut',
            dimensions,
            statistic: 'Average',
        };
    }
    static activityTimeAverage(dimensions) {
        return {
            namespace: 'AWS/States',
            metricName: 'ActivityTime',
            dimensions,
            statistic: 'Average',
        };
    }
    static activitiesSucceededSum(dimensions) {
        return {
            namespace: 'AWS/States',
            metricName: 'ActivitiesSucceeded',
            dimensions,
            statistic: 'Sum',
        };
    }
    static activitiesFailedSum(dimensions) {
        return {
            namespace: 'AWS/States',
            metricName: 'ActivitiesFailed',
            dimensions,
            statistic: 'Sum',
        };
    }
    static activitiesHeartbeatTimedOutSum(dimensions) {
        return {
            namespace: 'AWS/States',
            metricName: 'ActivitiesHeartbeatTimedOut',
            dimensions,
            statistic: 'Sum',
        };
    }
    static activitiesScheduledSum(dimensions) {
        return {
            namespace: 'AWS/States',
            metricName: 'ActivitiesScheduled',
            dimensions,
            statistic: 'Sum',
        };
    }
    static activitiesStartedSum(dimensions) {
        return {
            namespace: 'AWS/States',
            metricName: 'ActivitiesStarted',
            dimensions,
            statistic: 'Sum',
        };
    }
    static activitiesTimedOutSum(dimensions) {
        return {
            namespace: 'AWS/States',
            metricName: 'ActivitiesTimedOut',
            dimensions,
            statistic: 'Sum',
        };
    }
    static activityRunTimeAverage(dimensions) {
        return {
            namespace: 'AWS/States',
            metricName: 'ActivityRunTime',
            dimensions,
            statistic: 'Average',
        };
    }
    static activityScheduleTimeAverage(dimensions) {
        return {
            namespace: 'AWS/States',
            metricName: 'ActivityScheduleTime',
            dimensions,
            statistic: 'Average',
        };
    }
}
exports.StatesMetrics = StatesMetrics;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic3RlcGZ1bmN0aW9ucy1jYW5uZWQtbWV0cmljcy5nZW5lcmF0ZWQuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyJzdGVwZnVuY3Rpb25zLWNhbm5lZC1tZXRyaWNzLmdlbmVyYXRlZC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUEsK0VBQStFOzs7QUFFL0UsNEJBQTRCLENBQUMsaUVBQWlFO0FBRTlGLE1BQWEsYUFBYTtJQUNqQixNQUFNLENBQUMsb0JBQW9CLENBQUMsVUFBdUM7UUFDeEUsT0FBTztZQUNMLFNBQVMsRUFBRSxZQUFZO1lBQ3ZCLFVBQVUsRUFBRSxlQUFlO1lBQzNCLFVBQVU7WUFDVixTQUFTLEVBQUUsU0FBUztTQUNyQixDQUFDO0lBQ0osQ0FBQztJQUNNLE1BQU0sQ0FBQyx1QkFBdUIsQ0FBQyxVQUF1QztRQUMzRSxPQUFPO1lBQ0wsU0FBUyxFQUFFLFlBQVk7WUFDdkIsVUFBVSxFQUFFLGtCQUFrQjtZQUM5QixVQUFVO1lBQ1YsU0FBUyxFQUFFLFNBQVM7U0FDckIsQ0FBQztJQUNKLENBQUM7SUFDTSxNQUFNLENBQUMsMEJBQTBCLENBQUMsVUFBdUM7UUFDOUUsT0FBTztZQUNMLFNBQVMsRUFBRSxZQUFZO1lBQ3ZCLFVBQVUsRUFBRSxxQkFBcUI7WUFDakMsVUFBVTtZQUNWLFNBQVMsRUFBRSxTQUFTO1NBQ3JCLENBQUM7SUFDSixDQUFDO0lBQ00sTUFBTSxDQUFDLDBCQUEwQixDQUFDLFVBQXVDO1FBQzlFLE9BQU87WUFDTCxTQUFTLEVBQUUsWUFBWTtZQUN2QixVQUFVLEVBQUUscUJBQXFCO1lBQ2pDLFVBQVU7WUFDVixTQUFTLEVBQUUsU0FBUztTQUNyQixDQUFDO0lBQ0osQ0FBQztJQUNNLE1BQU0sQ0FBQyx3QkFBd0IsQ0FBQyxVQUF1QztRQUM1RSxPQUFPO1lBQ0wsU0FBUyxFQUFFLFlBQVk7WUFDdkIsVUFBVSxFQUFFLG1CQUFtQjtZQUMvQixVQUFVO1lBQ1YsU0FBUyxFQUFFLFNBQVM7U0FDckIsQ0FBQztJQUNKLENBQUM7SUFDTSxNQUFNLENBQUMseUJBQXlCLENBQUMsVUFBdUM7UUFDN0UsT0FBTztZQUNMLFNBQVMsRUFBRSxZQUFZO1lBQ3ZCLFVBQVUsRUFBRSxvQkFBb0I7WUFDaEMsVUFBVTtZQUNWLFNBQVMsRUFBRSxTQUFTO1NBQ3JCLENBQUM7SUFDSixDQUFDO0lBQ00sTUFBTSxDQUFDLG1CQUFtQixDQUFDLFVBQW1DO1FBQ25FLE9BQU87WUFDTCxTQUFTLEVBQUUsWUFBWTtZQUN2QixVQUFVLEVBQUUsY0FBYztZQUMxQixVQUFVO1lBQ1YsU0FBUyxFQUFFLFNBQVM7U0FDckIsQ0FBQztJQUNKLENBQUM7SUFDTSxNQUFNLENBQUMsc0JBQXNCLENBQUMsVUFBbUM7UUFDdEUsT0FBTztZQUNMLFNBQVMsRUFBRSxZQUFZO1lBQ3ZCLFVBQVUsRUFBRSxxQkFBcUI7WUFDakMsVUFBVTtZQUNWLFNBQVMsRUFBRSxLQUFLO1NBQ2pCLENBQUM7SUFDSixDQUFDO0lBQ00sTUFBTSxDQUFDLG1CQUFtQixDQUFDLFVBQW1DO1FBQ25FLE9BQU87WUFDTCxTQUFTLEVBQUUsWUFBWTtZQUN2QixVQUFVLEVBQUUsa0JBQWtCO1lBQzlCLFVBQVU7WUFDVixTQUFTLEVBQUUsS0FBSztTQUNqQixDQUFDO0lBQ0osQ0FBQztJQUNNLE1BQU0sQ0FBQyw4QkFBOEIsQ0FBQyxVQUFtQztRQUM5RSxPQUFPO1lBQ0wsU0FBUyxFQUFFLFlBQVk7WUFDdkIsVUFBVSxFQUFFLDZCQUE2QjtZQUN6QyxVQUFVO1lBQ1YsU0FBUyxFQUFFLEtBQUs7U0FDakIsQ0FBQztJQUNKLENBQUM7SUFDTSxNQUFNLENBQUMsc0JBQXNCLENBQUMsVUFBbUM7UUFDdEUsT0FBTztZQUNMLFNBQVMsRUFBRSxZQUFZO1lBQ3ZCLFVBQVUsRUFBRSxxQkFBcUI7WUFDakMsVUFBVTtZQUNWLFNBQVMsRUFBRSxLQUFLO1NBQ2pCLENBQUM7SUFDSixDQUFDO0lBQ00sTUFBTSxDQUFDLG9CQUFvQixDQUFDLFVBQW1DO1FBQ3BFLE9BQU87WUFDTCxTQUFTLEVBQUUsWUFBWTtZQUN2QixVQUFVLEVBQUUsbUJBQW1CO1lBQy9CLFVBQVU7WUFDVixTQUFTLEVBQUUsS0FBSztTQUNqQixDQUFDO0lBQ0osQ0FBQztJQUNNLE1BQU0sQ0FBQyxxQkFBcUIsQ0FBQyxVQUFtQztRQUNyRSxPQUFPO1lBQ0wsU0FBUyxFQUFFLFlBQVk7WUFDdkIsVUFBVSxFQUFFLG9CQUFvQjtZQUNoQyxVQUFVO1lBQ1YsU0FBUyxFQUFFLEtBQUs7U0FDakIsQ0FBQztJQUNKLENBQUM7SUFDTSxNQUFNLENBQUMsc0JBQXNCLENBQUMsVUFBbUM7UUFDdEUsT0FBTztZQUNMLFNBQVMsRUFBRSxZQUFZO1lBQ3ZCLFVBQVUsRUFBRSxpQkFBaUI7WUFDN0IsVUFBVTtZQUNWLFNBQVMsRUFBRSxTQUFTO1NBQ3JCLENBQUM7SUFDSixDQUFDO0lBQ00sTUFBTSxDQUFDLDJCQUEyQixDQUFDLFVBQW1DO1FBQzNFLE9BQU87WUFDTCxTQUFTLEVBQUUsWUFBWTtZQUN2QixVQUFVLEVBQUUsc0JBQXNCO1lBQ2xDLFVBQVU7WUFDVixTQUFTLEVBQUUsU0FBUztTQUNyQixDQUFDO0lBQ0osQ0FBQztDQUNGO0FBekhELHNDQXlIQyIsInNvdXJjZXNDb250ZW50IjpbIi8vIENvcHlyaWdodCAyMDEyLTIwMjEgQW1hem9uLmNvbSwgSW5jLiBvciBpdHMgYWZmaWxpYXRlcy4gQWxsIFJpZ2h0cyBSZXNlcnZlZC5cblxuLyogZXNsaW50LWRpc2FibGUgbWF4LWxlbiAqLyAvLyBUaGlzIGlzIGdlbmVyYXRlZCBjb2RlIC0gbGluZSBsZW5ndGhzIGFyZSBkaWZmaWN1bHQgdG8gY29udHJvbFxuXG5leHBvcnQgY2xhc3MgU3RhdGVzTWV0cmljcyB7XG4gIHB1YmxpYyBzdGF0aWMgZXhlY3V0aW9uVGltZUF2ZXJhZ2UoZGltZW5zaW9uczogeyBTdGF0ZU1hY2hpbmVBcm46IHN0cmluZyB9KSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIG5hbWVzcGFjZTogJ0FXUy9TdGF0ZXMnLFxuICAgICAgbWV0cmljTmFtZTogJ0V4ZWN1dGlvblRpbWUnLFxuICAgICAgZGltZW5zaW9ucyxcbiAgICAgIHN0YXRpc3RpYzogJ0F2ZXJhZ2UnLFxuICAgIH07XG4gIH1cbiAgcHVibGljIHN0YXRpYyBleGVjdXRpb25zRmFpbGVkQXZlcmFnZShkaW1lbnNpb25zOiB7IFN0YXRlTWFjaGluZUFybjogc3RyaW5nIH0pIHtcbiAgICByZXR1cm4ge1xuICAgICAgbmFtZXNwYWNlOiAnQVdTL1N0YXRlcycsXG4gICAgICBtZXRyaWNOYW1lOiAnRXhlY3V0aW9uc0ZhaWxlZCcsXG4gICAgICBkaW1lbnNpb25zLFxuICAgICAgc3RhdGlzdGljOiAnQXZlcmFnZScsXG4gICAgfTtcbiAgfVxuICBwdWJsaWMgc3RhdGljIGV4ZWN1dGlvbnNTdWNjZWVkZWRBdmVyYWdlKGRpbWVuc2lvbnM6IHsgU3RhdGVNYWNoaW5lQXJuOiBzdHJpbmcgfSkge1xuICAgIHJldHVybiB7XG4gICAgICBuYW1lc3BhY2U6ICdBV1MvU3RhdGVzJyxcbiAgICAgIG1ldHJpY05hbWU6ICdFeGVjdXRpb25zU3VjY2VlZGVkJyxcbiAgICAgIGRpbWVuc2lvbnMsXG4gICAgICBzdGF0aXN0aWM6ICdBdmVyYWdlJyxcbiAgICB9O1xuICB9XG4gIHB1YmxpYyBzdGF0aWMgZXhlY3V0aW9uc1Rocm90dGxlZEF2ZXJhZ2UoZGltZW5zaW9uczogeyBTdGF0ZU1hY2hpbmVBcm46IHN0cmluZyB9KSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIG5hbWVzcGFjZTogJ0FXUy9TdGF0ZXMnLFxuICAgICAgbWV0cmljTmFtZTogJ0V4ZWN1dGlvbnNUaHJvdHRsZWQnLFxuICAgICAgZGltZW5zaW9ucyxcbiAgICAgIHN0YXRpc3RpYzogJ0F2ZXJhZ2UnLFxuICAgIH07XG4gIH1cbiAgcHVibGljIHN0YXRpYyBleGVjdXRpb25zQWJvcnRlZEF2ZXJhZ2UoZGltZW5zaW9uczogeyBTdGF0ZU1hY2hpbmVBcm46IHN0cmluZyB9KSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIG5hbWVzcGFjZTogJ0FXUy9TdGF0ZXMnLFxuICAgICAgbWV0cmljTmFtZTogJ0V4ZWN1dGlvbnNBYm9ydGVkJyxcbiAgICAgIGRpbWVuc2lvbnMsXG4gICAgICBzdGF0aXN0aWM6ICdBdmVyYWdlJyxcbiAgICB9O1xuICB9XG4gIHB1YmxpYyBzdGF0aWMgZXhlY3V0aW9uc1RpbWVkT3V0QXZlcmFnZShkaW1lbnNpb25zOiB7IFN0YXRlTWFjaGluZUFybjogc3RyaW5nIH0pIHtcbiAgICByZXR1cm4ge1xuICAgICAgbmFtZXNwYWNlOiAnQVdTL1N0YXRlcycsXG4gICAgICBtZXRyaWNOYW1lOiAnRXhlY3V0aW9uc1RpbWVkT3V0JyxcbiAgICAgIGRpbWVuc2lvbnMsXG4gICAgICBzdGF0aXN0aWM6ICdBdmVyYWdlJyxcbiAgICB9O1xuICB9XG4gIHB1YmxpYyBzdGF0aWMgYWN0aXZpdHlUaW1lQXZlcmFnZShkaW1lbnNpb25zOiB7IEFjdGl2aXR5QXJuOiBzdHJpbmcgfSkge1xuICAgIHJldHVybiB7XG4gICAgICBuYW1lc3BhY2U6ICdBV1MvU3RhdGVzJyxcbiAgICAgIG1ldHJpY05hbWU6ICdBY3Rpdml0eVRpbWUnLFxuICAgICAgZGltZW5zaW9ucyxcbiAgICAgIHN0YXRpc3RpYzogJ0F2ZXJhZ2UnLFxuICAgIH07XG4gIH1cbiAgcHVibGljIHN0YXRpYyBhY3Rpdml0aWVzU3VjY2VlZGVkU3VtKGRpbWVuc2lvbnM6IHsgQWN0aXZpdHlBcm46IHN0cmluZyB9KSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIG5hbWVzcGFjZTogJ0FXUy9TdGF0ZXMnLFxuICAgICAgbWV0cmljTmFtZTogJ0FjdGl2aXRpZXNTdWNjZWVkZWQnLFxuICAgICAgZGltZW5zaW9ucyxcbiAgICAgIHN0YXRpc3RpYzogJ1N1bScsXG4gICAgfTtcbiAgfVxuICBwdWJsaWMgc3RhdGljIGFjdGl2aXRpZXNGYWlsZWRTdW0oZGltZW5zaW9uczogeyBBY3Rpdml0eUFybjogc3RyaW5nIH0pIHtcbiAgICByZXR1cm4ge1xuICAgICAgbmFtZXNwYWNlOiAnQVdTL1N0YXRlcycsXG4gICAgICBtZXRyaWNOYW1lOiAnQWN0aXZpdGllc0ZhaWxlZCcsXG4gICAgICBkaW1lbnNpb25zLFxuICAgICAgc3RhdGlzdGljOiAnU3VtJyxcbiAgICB9O1xuICB9XG4gIHB1YmxpYyBzdGF0aWMgYWN0aXZpdGllc0hlYXJ0YmVhdFRpbWVkT3V0U3VtKGRpbWVuc2lvbnM6IHsgQWN0aXZpdHlBcm46IHN0cmluZyB9KSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIG5hbWVzcGFjZTogJ0FXUy9TdGF0ZXMnLFxuICAgICAgbWV0cmljTmFtZTogJ0FjdGl2aXRpZXNIZWFydGJlYXRUaW1lZE91dCcsXG4gICAgICBkaW1lbnNpb25zLFxuICAgICAgc3RhdGlzdGljOiAnU3VtJyxcbiAgICB9O1xuICB9XG4gIHB1YmxpYyBzdGF0aWMgYWN0aXZpdGllc1NjaGVkdWxlZFN1bShkaW1lbnNpb25zOiB7IEFjdGl2aXR5QXJuOiBzdHJpbmcgfSkge1xuICAgIHJldHVybiB7XG4gICAgICBuYW1lc3BhY2U6ICdBV1MvU3RhdGVzJyxcbiAgICAgIG1ldHJpY05hbWU6ICdBY3Rpdml0aWVzU2NoZWR1bGVkJyxcbiAgICAgIGRpbWVuc2lvbnMsXG4gICAgICBzdGF0aXN0aWM6ICdTdW0nLFxuICAgIH07XG4gIH1cbiAgcHVibGljIHN0YXRpYyBhY3Rpdml0aWVzU3RhcnRlZFN1bShkaW1lbnNpb25zOiB7IEFjdGl2aXR5QXJuOiBzdHJpbmcgfSkge1xuICAgIHJldHVybiB7XG4gICAgICBuYW1lc3BhY2U6ICdBV1MvU3RhdGVzJyxcbiAgICAgIG1ldHJpY05hbWU6ICdBY3Rpdml0aWVzU3RhcnRlZCcsXG4gICAgICBkaW1lbnNpb25zLFxuICAgICAgc3RhdGlzdGljOiAnU3VtJyxcbiAgICB9O1xuICB9XG4gIHB1YmxpYyBzdGF0aWMgYWN0aXZpdGllc1RpbWVkT3V0U3VtKGRpbWVuc2lvbnM6IHsgQWN0aXZpdHlBcm46IHN0cmluZyB9KSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIG5hbWVzcGFjZTogJ0FXUy9TdGF0ZXMnLFxuICAgICAgbWV0cmljTmFtZTogJ0FjdGl2aXRpZXNUaW1lZE91dCcsXG4gICAgICBkaW1lbnNpb25zLFxuICAgICAgc3RhdGlzdGljOiAnU3VtJyxcbiAgICB9O1xuICB9XG4gIHB1YmxpYyBzdGF0aWMgYWN0aXZpdHlSdW5UaW1lQXZlcmFnZShkaW1lbnNpb25zOiB7IEFjdGl2aXR5QXJuOiBzdHJpbmcgfSkge1xuICAgIHJldHVybiB7XG4gICAgICBuYW1lc3BhY2U6ICdBV1MvU3RhdGVzJyxcbiAgICAgIG1ldHJpY05hbWU6ICdBY3Rpdml0eVJ1blRpbWUnLFxuICAgICAgZGltZW5zaW9ucyxcbiAgICAgIHN0YXRpc3RpYzogJ0F2ZXJhZ2UnLFxuICAgIH07XG4gIH1cbiAgcHVibGljIHN0YXRpYyBhY3Rpdml0eVNjaGVkdWxlVGltZUF2ZXJhZ2UoZGltZW5zaW9uczogeyBBY3Rpdml0eUFybjogc3RyaW5nIH0pIHtcbiAgICByZXR1cm4ge1xuICAgICAgbmFtZXNwYWNlOiAnQVdTL1N0YXRlcycsXG4gICAgICBtZXRyaWNOYW1lOiAnQWN0aXZpdHlTY2hlZHVsZVRpbWUnLFxuICAgICAgZGltZW5zaW9ucyxcbiAgICAgIHN0YXRpc3RpYzogJ0F2ZXJhZ2UnLFxuICAgIH07XG4gIH1cbn1cbiJdfQ==