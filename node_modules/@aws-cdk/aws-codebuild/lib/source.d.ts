import * as codecommit from '@aws-cdk/aws-codecommit';
import * as s3 from '@aws-cdk/aws-s3';
import { CfnProject } from './codebuild.generated';
import { IProject } from './project';
import { Construct as CoreConstruct } from '@aws-cdk/core';
/**
 * The type returned from {@link ISource#bind}.
 *
 * @stability stable
 */
export interface SourceConfig {
    /**
     * @stability stable
     */
    readonly sourceProperty: CfnProject.SourceProperty;
    /**
     * @stability stable
     */
    readonly buildTriggers?: CfnProject.ProjectTriggersProperty;
    /**
     * `AWS::CodeBuild::Project.SourceVersion`.
     *
     * @default the latest version
     * @see http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-codebuild-project.html#cfn-codebuild-project-sourceversion
     * @stability stable
     */
    readonly sourceVersion?: string;
}
/**
 * The abstract interface of a CodeBuild source.
 *
 * Implemented by {@link Source}.
 *
 * @stability stable
 */
export interface ISource {
    /**
     * @stability stable
     */
    readonly identifier?: string;
    /**
     * @stability stable
     */
    readonly type: string;
    /**
     * @stability stable
     */
    readonly badgeSupported: boolean;
    /**
     * @stability stable
     */
    bind(scope: CoreConstruct, project: IProject): SourceConfig;
}
/**
 * Properties common to all Source classes.
 *
 * @stability stable
 */
export interface SourceProps {
    /**
     * The source identifier.
     *
     * This property is required on secondary sources.
     *
     * @stability stable
     */
    readonly identifier?: string;
}
/**
 * Source provider definition for a CodeBuild Project.
 *
 * @stability stable
 */
export declare abstract class Source implements ISource {
    /**
     * @stability stable
     */
    static s3(props: S3SourceProps): ISource;
    /**
     * @stability stable
     */
    static codeCommit(props: CodeCommitSourceProps): ISource;
    /**
     * @stability stable
     */
    static gitHub(props: GitHubSourceProps): ISource;
    /**
     * @stability stable
     */
    static gitHubEnterprise(props: GitHubEnterpriseSourceProps): ISource;
    /**
     * @stability stable
     */
    static bitBucket(props: BitBucketSourceProps): ISource;
    /**
     * @stability stable
     */
    readonly identifier?: string;
    /**
     * @stability stable
     */
    abstract readonly type: string;
    /**
     * @stability stable
     */
    readonly badgeSupported: boolean;
    /**
     * @stability stable
     */
    protected constructor(props: SourceProps);
    /**
     * Called by the project when the source is added so that the source can perform binding operations on the source.
     *
     * For example, it can grant permissions to the
     * code build project to read from the S3 bucket.
     *
     * @stability stable
     */
    bind(_scope: CoreConstruct, _project: IProject): SourceConfig;
}
/**
 * The construction properties common to all build sources that are backed by Git.
 */
interface GitSourceProps extends SourceProps {
    /**
     * The depth of history to download.
     *
     * Minimum value is 0.
     * If this value is 0, greater than 25, or not provided,
     * then the full history is downloaded with each build of the project.
     *
     * @stability stable
     */
    readonly cloneDepth?: number;
    /**
     * The commit ID, pull request ID, branch name, or tag name that corresponds to the version of the source code you want to build.
     *
     * @default the default branch's HEAD commit ID is used
     * @stability stable
     * @example
     *
     * 'mybranch'
     */
    readonly branchOrRef?: string;
    /**
     * Whether to fetch submodules while cloning git repo.
     *
     * @default false
     * @stability stable
     */
    readonly fetchSubmodules?: boolean;
}
/**
 * The types of webhook event actions.
 *
 * @stability stable
 */
export declare enum EventAction {
    /**
     * A push (of a branch, or a tag) to the repository.
     *
     * @stability stable
     */
    PUSH = "PUSH",
    /**
     * Creating a Pull Request.
     *
     * @stability stable
     */
    PULL_REQUEST_CREATED = "PULL_REQUEST_CREATED",
    /**
     * Updating a Pull Request.
     *
     * @stability stable
     */
    PULL_REQUEST_UPDATED = "PULL_REQUEST_UPDATED",
    /**
     * Merging a Pull Request.
     *
     * @stability stable
     */
    PULL_REQUEST_MERGED = "PULL_REQUEST_MERGED",
    /**
     * Re-opening a previously closed Pull Request.
     *
     * Note that this event is only supported for GitHub and GitHubEnterprise sources.
     *
     * @stability stable
     */
    PULL_REQUEST_REOPENED = "PULL_REQUEST_REOPENED"
}
/**
 * An object that represents a group of filter conditions for a webhook.
 *
 * Every condition in a given FilterGroup must be true in order for the whole group to be true.
 * You construct instances of it by calling the {@link #inEventOf} static factory method,
 * and then calling various `andXyz` instance methods to create modified instances of it
 * (this class is immutable).
 *
 * You pass instances of this class to the `webhookFilters` property when constructing a source.
 *
 * @stability stable
 */
export declare class FilterGroup {
    /**
     * Creates a new event FilterGroup that triggers on any of the provided actions.
     *
     * @param actions the actions to trigger the webhook on.
     * @stability stable
     */
    static inEventOf(...actions: EventAction[]): FilterGroup;
    private readonly actions;
    private readonly filters;
    private constructor();
    /**
     * Create a new FilterGroup with an added condition: the event must affect the given branch.
     *
     * @param branchName the name of the branch (can be a regular expression).
     * @stability stable
     */
    andBranchIs(branchName: string): FilterGroup;
    /**
     * Create a new FilterGroup with an added condition: the event must not affect the given branch.
     *
     * @param branchName the name of the branch (can be a regular expression).
     * @stability stable
     */
    andBranchIsNot(branchName: string): FilterGroup;
    /**
     * Create a new FilterGroup with an added condition: the event must affect a head commit with the given message.
     *
     * @param commitMessage the commit message (can be a regular expression).
     * @stability stable
     */
    andCommitMessageIs(commitMessage: string): FilterGroup;
    /**
     * Create a new FilterGroup with an added condition: the event must not affect a head commit with the given message.
     *
     * @param commitMessage the commit message (can be a regular expression).
     * @stability stable
     */
    andCommitMessageIsNot(commitMessage: string): FilterGroup;
    /**
     * Create a new FilterGroup with an added condition: the event must affect the given tag.
     *
     * @param tagName the name of the tag (can be a regular expression).
     * @stability stable
     */
    andTagIs(tagName: string): FilterGroup;
    /**
     * Create a new FilterGroup with an added condition: the event must not affect the given tag.
     *
     * @param tagName the name of the tag (can be a regular expression).
     * @stability stable
     */
    andTagIsNot(tagName: string): FilterGroup;
    /**
     * Create a new FilterGroup with an added condition: the event must affect a Git reference (ie., a branch or a tag) that matches the given pattern.
     *
     * @param pattern a regular expression.
     * @stability stable
     */
    andHeadRefIs(pattern: string): FilterGroup;
    /**
     * Create a new FilterGroup with an added condition: the event must not affect a Git reference (ie., a branch or a tag) that matches the given pattern.
     *
     * @param pattern a regular expression.
     * @stability stable
     */
    andHeadRefIsNot(pattern: string): FilterGroup;
    /**
     * Create a new FilterGroup with an added condition: the account ID of the actor initiating the event must match the given pattern.
     *
     * @param pattern a regular expression.
     * @stability stable
     */
    andActorAccountIs(pattern: string): FilterGroup;
    /**
     * Create a new FilterGroup with an added condition: the account ID of the actor initiating the event must not match the given pattern.
     *
     * @param pattern a regular expression.
     * @stability stable
     */
    andActorAccountIsNot(pattern: string): FilterGroup;
    /**
     * Create a new FilterGroup with an added condition: the Pull Request that is the source of the event must target the given base branch.
     *
     * Note that you cannot use this method if this Group contains the `PUSH` event action.
     *
     * @param branchName the name of the branch (can be a regular expression).
     * @stability stable
     */
    andBaseBranchIs(branchName: string): FilterGroup;
    /**
     * Create a new FilterGroup with an added condition: the Pull Request that is the source of the event must not target the given base branch.
     *
     * Note that you cannot use this method if this Group contains the `PUSH` event action.
     *
     * @param branchName the name of the branch (can be a regular expression).
     * @stability stable
     */
    andBaseBranchIsNot(branchName: string): FilterGroup;
    /**
     * Create a new FilterGroup with an added condition: the Pull Request that is the source of the event must target the given Git reference.
     *
     * Note that you cannot use this method if this Group contains the `PUSH` event action.
     *
     * @param pattern a regular expression.
     * @stability stable
     */
    andBaseRefIs(pattern: string): FilterGroup;
    /**
     * Create a new FilterGroup with an added condition: the Pull Request that is the source of the event must not target the given Git reference.
     *
     * Note that you cannot use this method if this Group contains the `PUSH` event action.
     *
     * @param pattern a regular expression.
     * @stability stable
     */
    andBaseRefIsNot(pattern: string): FilterGroup;
    /**
     * Create a new FilterGroup with an added condition: the push that is the source of the event must affect a file that matches the given pattern.
     *
     * Note that you can only use this method if this Group contains only the `PUSH` event action,
     * and only for GitHub and GitHubEnterprise sources.
     *
     * @param pattern a regular expression.
     * @stability stable
     */
    andFilePathIs(pattern: string): FilterGroup;
    /**
     * Create a new FilterGroup with an added condition: the push that is the source of the event must not affect a file that matches the given pattern.
     *
     * Note that you can only use this method if this Group contains only the `PUSH` event action,
     * and only for GitHub and GitHubEnterprise sources.
     *
     * @param pattern a regular expression.
     * @stability stable
     */
    andFilePathIsNot(pattern: string): FilterGroup;
    /** @internal */
    get _actions(): EventAction[];
    /** @internal */
    get _filters(): CfnProject.WebhookFilterProperty[];
    /** @internal */
    _toJson(): CfnProject.WebhookFilterProperty[];
    private addCommitMessageFilter;
    private addHeadBranchFilter;
    private addHeadTagFilter;
    private addHeadRefFilter;
    private addActorAccountId;
    private addBaseBranchFilter;
    private addBaseRefFilter;
    private addFilePathFilter;
    private addFilter;
}
/**
 * The construction properties common to all third-party build sources that are backed by Git.
 */
interface ThirdPartyGitSourceProps extends GitSourceProps {
    /**
     * Whether to send notifications on your build's start and end.
     *
     * @default true
     * @stability stable
     */
    readonly reportBuildStatus?: boolean;
    /**
     * Whether to create a webhook that will trigger a build every time an event happens in the repository.
     *
     * @default true if any `webhookFilters` were provided, false otherwise
     * @stability stable
     */
    readonly webhook?: boolean;
    /**
     * Trigger a batch build from a webhook instead of a standard one.
     *
     * Enabling this will enable batch builds on the CodeBuild project.
     *
     * @default false
     * @stability stable
     */
    readonly webhookTriggersBatchBuild?: boolean;
    /**
     * A list of webhook filters that can constraint what events in the repository will trigger a build.
     *
     * A build is triggered if any of the provided filter groups match.
     * Only valid if `webhook` was not provided as false.
     *
     * @default every push and every Pull Request (create or update) triggers a build
     * @stability stable
     */
    readonly webhookFilters?: FilterGroup[];
}
/**
 * Construction properties for {@link CodeCommitSource}.
 *
 * @stability stable
 */
export interface CodeCommitSourceProps extends GitSourceProps {
    /**
     * @stability stable
     */
    readonly repository: codecommit.IRepository;
}
/**
 * Construction properties for {@link S3Source}.
 *
 * @stability stable
 */
export interface S3SourceProps extends SourceProps {
    /**
     * @stability stable
     */
    readonly bucket: s3.IBucket;
    /**
     * @stability stable
     */
    readonly path: string;
    /**
     * The version ID of the object that represents the build input ZIP file to use.
     *
     * @default latest
     * @stability stable
     */
    readonly version?: string;
}
/**
 * Construction properties for {@link GitHubSource} and {@link GitHubEnterpriseSource}.
 *
 * @stability stable
 */
export interface GitHubSourceProps extends ThirdPartyGitSourceProps {
    /**
     * The GitHub account/user that owns the repo.
     *
     * @stability stable
     * @example
     *
     * 'awslabs'
     */
    readonly owner: string;
    /**
     * The name of the repo (without the username).
     *
     * @stability stable
     * @example
     *
     * 'aws-cdk'
     */
    readonly repo: string;
}
/**
 * Construction properties for {@link GitHubEnterpriseSource}.
 *
 * @stability stable
 */
export interface GitHubEnterpriseSourceProps extends ThirdPartyGitSourceProps {
    /**
     * The HTTPS URL of the repository in your GitHub Enterprise installation.
     *
     * @stability stable
     */
    readonly httpsCloneUrl: string;
    /**
     * Whether to ignore SSL errors when connecting to the repository.
     *
     * @default false
     * @stability stable
     */
    readonly ignoreSslErrors?: boolean;
}
/**
 * Construction properties for {@link BitBucketSource}.
 *
 * @stability stable
 */
export interface BitBucketSourceProps extends ThirdPartyGitSourceProps {
    /**
     * The BitBucket account/user that owns the repo.
     *
     * @stability stable
     * @example
     *
     * 'awslabs'
     */
    readonly owner: string;
    /**
     * The name of the repo (without the username).
     *
     * @stability stable
     * @example
     *
     * 'aws-cdk'
     */
    readonly repo: string;
}
export {};
