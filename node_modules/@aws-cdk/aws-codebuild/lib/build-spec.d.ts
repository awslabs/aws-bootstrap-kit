/**
 * BuildSpec for CodeBuild projects.
 *
 * @stability stable
 */
export declare abstract class BuildSpec {
    /**
     * @stability stable
     */
    static fromObject(value: {
        [key: string]: any;
    }): BuildSpec;
    /**
     * Use a file from the source as buildspec.
     *
     * Use this if you want to use a file different from 'buildspec.yml'`
     *
     * @stability stable
     */
    static fromSourceFilename(filename: string): BuildSpec;
    /**
     * Whether the buildspec is directly available or deferred until build-time.
     *
     * @stability stable
     */
    abstract readonly isImmediate: boolean;
    /**
     * @stability stable
     */
    protected constructor();
    /**
     * Render the represented BuildSpec.
     *
     * @stability stable
     */
    abstract toBuildSpec(): string;
}
/**
 * Merge two buildspecs into a new BuildSpec
 *
 * NOTE: will currently only merge commands, not artifact
 * declarations, environment variables, secrets, or any
 * other configuration elements.
 *
 * Internal for now because it's not complete/good enough
 * to expose on the objects directly, but we need to it to
 * keep feature-parity for Project.
 *
 * @internal
 */
export declare function mergeBuildSpecs(lhs: BuildSpec, rhs: BuildSpec): BuildSpec;
