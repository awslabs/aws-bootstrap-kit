export declare class ApplicationELBMetrics {
    static requestCountSum(dimensions: {
        LoadBalancer: string;
    }): {
        namespace: string;
        metricName: string;
        dimensions: {
            LoadBalancer: string;
        };
        statistic: string;
    };
    static httpCodeElb5XxCountSum(dimensions: {
        LoadBalancer: string;
    }): {
        namespace: string;
        metricName: string;
        dimensions: {
            LoadBalancer: string;
        };
        statistic: string;
    };
    static activeConnectionCountSum(dimensions: {
        LoadBalancer: string;
    }): {
        namespace: string;
        metricName: string;
        dimensions: {
            LoadBalancer: string;
        };
        statistic: string;
    };
    static clientTlsNegotiationErrorCountSum(dimensions: {
        LoadBalancer: string;
    }): {
        namespace: string;
        metricName: string;
        dimensions: {
            LoadBalancer: string;
        };
        statistic: string;
    };
    static consumedLcUsAverage(dimensions: {
        LoadBalancer: string;
    }): {
        namespace: string;
        metricName: string;
        dimensions: {
            LoadBalancer: string;
        };
        statistic: string;
    };
    static httpFixedResponseCountSum(dimensions: {
        LoadBalancer: string;
    }): {
        namespace: string;
        metricName: string;
        dimensions: {
            LoadBalancer: string;
        };
        statistic: string;
    };
    static httpRedirectCountSum(dimensions: {
        LoadBalancer: string;
    }): {
        namespace: string;
        metricName: string;
        dimensions: {
            LoadBalancer: string;
        };
        statistic: string;
    };
    static httpRedirectUrlLimitExceededCountSum(dimensions: {
        LoadBalancer: string;
    }): {
        namespace: string;
        metricName: string;
        dimensions: {
            LoadBalancer: string;
        };
        statistic: string;
    };
    static httpCodeElb3XxCountSum(dimensions: {
        LoadBalancer: string;
    }): {
        namespace: string;
        metricName: string;
        dimensions: {
            LoadBalancer: string;
        };
        statistic: string;
    };
    static httpCodeElb4XxCountSum(dimensions: {
        LoadBalancer: string;
    }): {
        namespace: string;
        metricName: string;
        dimensions: {
            LoadBalancer: string;
        };
        statistic: string;
    };
    static iPv6ProcessedBytesSum(dimensions: {
        LoadBalancer: string;
    }): {
        namespace: string;
        metricName: string;
        dimensions: {
            LoadBalancer: string;
        };
        statistic: string;
    };
    static iPv6RequestCountSum(dimensions: {
        LoadBalancer: string;
    }): {
        namespace: string;
        metricName: string;
        dimensions: {
            LoadBalancer: string;
        };
        statistic: string;
    };
    static newConnectionCountSum(dimensions: {
        LoadBalancer: string;
    }): {
        namespace: string;
        metricName: string;
        dimensions: {
            LoadBalancer: string;
        };
        statistic: string;
    };
    static processedBytesSum(dimensions: {
        LoadBalancer: string;
    }): {
        namespace: string;
        metricName: string;
        dimensions: {
            LoadBalancer: string;
        };
        statistic: string;
    };
    static rejectedConnectionCountSum(dimensions: {
        LoadBalancer: string;
    }): {
        namespace: string;
        metricName: string;
        dimensions: {
            LoadBalancer: string;
        };
        statistic: string;
    };
    static ruleEvaluationsSum(dimensions: {
        LoadBalancer: string;
    }): {
        namespace: string;
        metricName: string;
        dimensions: {
            LoadBalancer: string;
        };
        statistic: string;
    };
}
export declare class NetworkELBMetrics {
    static healthyHostCountAverage(dimensions: {
        LoadBalancer: string;
    }): {
        namespace: string;
        metricName: string;
        dimensions: {
            LoadBalancer: string;
        };
        statistic: string;
    };
    static unHealthyHostCountAverage(dimensions: {
        LoadBalancer: string;
    }): {
        namespace: string;
        metricName: string;
        dimensions: {
            LoadBalancer: string;
        };
        statistic: string;
    };
    static activeFlowCountSum(dimensions: {
        LoadBalancer: string;
    }): {
        namespace: string;
        metricName: string;
        dimensions: {
            LoadBalancer: string;
        };
        statistic: string;
    };
    static consumedLcUsAverage(dimensions: {
        LoadBalancer: string;
    }): {
        namespace: string;
        metricName: string;
        dimensions: {
            LoadBalancer: string;
        };
        statistic: string;
    };
    static newFlowCountSum(dimensions: {
        LoadBalancer: string;
    }): {
        namespace: string;
        metricName: string;
        dimensions: {
            LoadBalancer: string;
        };
        statistic: string;
    };
    static processedBytesSum(dimensions: {
        LoadBalancer: string;
    }): {
        namespace: string;
        metricName: string;
        dimensions: {
            LoadBalancer: string;
        };
        statistic: string;
    };
    static tcpClientResetCountSum(dimensions: {
        LoadBalancer: string;
    }): {
        namespace: string;
        metricName: string;
        dimensions: {
            LoadBalancer: string;
        };
        statistic: string;
    };
    static tcpElbResetCountSum(dimensions: {
        LoadBalancer: string;
    }): {
        namespace: string;
        metricName: string;
        dimensions: {
            LoadBalancer: string;
        };
        statistic: string;
    };
    static tcpTargetResetCountSum(dimensions: {
        LoadBalancer: string;
    }): {
        namespace: string;
        metricName: string;
        dimensions: {
            LoadBalancer: string;
        };
        statistic: string;
    };
}
