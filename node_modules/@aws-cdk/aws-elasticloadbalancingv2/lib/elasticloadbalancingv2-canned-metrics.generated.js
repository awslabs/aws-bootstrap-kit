"use strict";
// Copyright 2012-2021 Amazon.com, Inc. or its affiliates. All Rights Reserved.
Object.defineProperty(exports, "__esModule", { value: true });
exports.NetworkELBMetrics = exports.ApplicationELBMetrics = void 0;
/* eslint-disable max-len */ // This is generated code - line lengths are difficult to control
class ApplicationELBMetrics {
    static requestCountSum(dimensions) {
        return {
            namespace: 'AWS/ApplicationELB',
            metricName: 'RequestCount',
            dimensions,
            statistic: 'Sum',
        };
    }
    static httpCodeElb5XxCountSum(dimensions) {
        return {
            namespace: 'AWS/ApplicationELB',
            metricName: 'HTTPCode_ELB_5XX_Count',
            dimensions,
            statistic: 'Sum',
        };
    }
    static activeConnectionCountSum(dimensions) {
        return {
            namespace: 'AWS/ApplicationELB',
            metricName: 'ActiveConnectionCount',
            dimensions,
            statistic: 'Sum',
        };
    }
    static clientTlsNegotiationErrorCountSum(dimensions) {
        return {
            namespace: 'AWS/ApplicationELB',
            metricName: 'ClientTLSNegotiationErrorCount',
            dimensions,
            statistic: 'Sum',
        };
    }
    static consumedLcUsAverage(dimensions) {
        return {
            namespace: 'AWS/ApplicationELB',
            metricName: 'ConsumedLCUs',
            dimensions,
            statistic: 'Average',
        };
    }
    static httpFixedResponseCountSum(dimensions) {
        return {
            namespace: 'AWS/ApplicationELB',
            metricName: 'HTTP_Fixed_Response_Count',
            dimensions,
            statistic: 'Sum',
        };
    }
    static httpRedirectCountSum(dimensions) {
        return {
            namespace: 'AWS/ApplicationELB',
            metricName: 'HTTP_Redirect_Count',
            dimensions,
            statistic: 'Sum',
        };
    }
    static httpRedirectUrlLimitExceededCountSum(dimensions) {
        return {
            namespace: 'AWS/ApplicationELB',
            metricName: 'HTTP_Redirect_Url_Limit_Exceeded_Count',
            dimensions,
            statistic: 'Sum',
        };
    }
    static httpCodeElb3XxCountSum(dimensions) {
        return {
            namespace: 'AWS/ApplicationELB',
            metricName: 'HTTPCode_ELB_3XX_Count',
            dimensions,
            statistic: 'Sum',
        };
    }
    static httpCodeElb4XxCountSum(dimensions) {
        return {
            namespace: 'AWS/ApplicationELB',
            metricName: 'HTTPCode_ELB_4XX_Count',
            dimensions,
            statistic: 'Sum',
        };
    }
    static iPv6ProcessedBytesSum(dimensions) {
        return {
            namespace: 'AWS/ApplicationELB',
            metricName: 'IPv6ProcessedBytes',
            dimensions,
            statistic: 'Sum',
        };
    }
    static iPv6RequestCountSum(dimensions) {
        return {
            namespace: 'AWS/ApplicationELB',
            metricName: 'IPv6RequestCount',
            dimensions,
            statistic: 'Sum',
        };
    }
    static newConnectionCountSum(dimensions) {
        return {
            namespace: 'AWS/ApplicationELB',
            metricName: 'NewConnectionCount',
            dimensions,
            statistic: 'Sum',
        };
    }
    static processedBytesSum(dimensions) {
        return {
            namespace: 'AWS/ApplicationELB',
            metricName: 'ProcessedBytes',
            dimensions,
            statistic: 'Sum',
        };
    }
    static rejectedConnectionCountSum(dimensions) {
        return {
            namespace: 'AWS/ApplicationELB',
            metricName: 'RejectedConnectionCount',
            dimensions,
            statistic: 'Sum',
        };
    }
    static ruleEvaluationsSum(dimensions) {
        return {
            namespace: 'AWS/ApplicationELB',
            metricName: 'RuleEvaluations',
            dimensions,
            statistic: 'Sum',
        };
    }
}
exports.ApplicationELBMetrics = ApplicationELBMetrics;
class NetworkELBMetrics {
    static healthyHostCountAverage(dimensions) {
        return {
            namespace: 'AWS/NetworkELB',
            metricName: 'HealthyHostCount',
            dimensions,
            statistic: 'Average',
        };
    }
    static unHealthyHostCountAverage(dimensions) {
        return {
            namespace: 'AWS/NetworkELB',
            metricName: 'UnHealthyHostCount',
            dimensions,
            statistic: 'Average',
        };
    }
    static activeFlowCountSum(dimensions) {
        return {
            namespace: 'AWS/NetworkELB',
            metricName: 'ActiveFlowCount',
            dimensions,
            statistic: 'Sum',
        };
    }
    static consumedLcUsAverage(dimensions) {
        return {
            namespace: 'AWS/NetworkELB',
            metricName: 'ConsumedLCUs',
            dimensions,
            statistic: 'Average',
        };
    }
    static newFlowCountSum(dimensions) {
        return {
            namespace: 'AWS/NetworkELB',
            metricName: 'NewFlowCount',
            dimensions,
            statistic: 'Sum',
        };
    }
    static processedBytesSum(dimensions) {
        return {
            namespace: 'AWS/NetworkELB',
            metricName: 'ProcessedBytes',
            dimensions,
            statistic: 'Sum',
        };
    }
    static tcpClientResetCountSum(dimensions) {
        return {
            namespace: 'AWS/NetworkELB',
            metricName: 'TCP_Client_Reset_Count',
            dimensions,
            statistic: 'Sum',
        };
    }
    static tcpElbResetCountSum(dimensions) {
        return {
            namespace: 'AWS/NetworkELB',
            metricName: 'TCP_ELB_Reset_Count',
            dimensions,
            statistic: 'Sum',
        };
    }
    static tcpTargetResetCountSum(dimensions) {
        return {
            namespace: 'AWS/NetworkELB',
            metricName: 'TCP_Target_Reset_Count',
            dimensions,
            statistic: 'Sum',
        };
    }
}
exports.NetworkELBMetrics = NetworkELBMetrics;
//# sourceMappingURL=data:application/json;base64,