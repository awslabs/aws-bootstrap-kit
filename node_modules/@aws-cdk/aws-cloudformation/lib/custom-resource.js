"use strict";
var _a, _b;
Object.defineProperty(exports, "__esModule", { value: true });
exports.CustomResource = exports.CustomResourceProvider = void 0;
const JSII_RTTI_SYMBOL_1 = Symbol.for("jsii.rtti");
const core = require("@aws-cdk/core");
/**
 * (deprecated) Represents a provider for an AWS CloudFormation custom resources.
 *
 * @deprecated use core.CustomResource instead
 */
class CustomResourceProvider {
    /**
     * @param serviceToken the ServiceToken which contains the ARN for this provider.
     */
    constructor(serviceToken) {
        this.serviceToken = serviceToken;
    }
    /**
     * (deprecated) The Lambda provider that implements this custom resource.
     *
     * We recommend using a lambda.SingletonFunction for this.
     *
     * @deprecated
     */
    static fromLambda(handler) {
        return new CustomResourceProvider(handler.functionArn);
    }
    /**
     * (deprecated) The SNS Topic for the provider that implements this custom resource.
     *
     * @deprecated
     */
    static fromTopic(topic) {
        return new CustomResourceProvider(topic.topicArn);
    }
    /**
     * (deprecated) Use AWS Lambda as a provider.
     *
     * @deprecated use `fromLambda`
     */
    static lambda(handler) { return this.fromLambda(handler); }
    /**
     * (deprecated) Use an SNS topic as the provider.
     *
     * @deprecated use `fromTopic`
     */
    static topic(topic) { return this.fromTopic(topic); }
    /**
     * (deprecated) Called when this provider is used by a `CustomResource`.
     *
     * @deprecated
     */
    bind(_) {
        return { serviceToken: this.serviceToken };
    }
}
exports.CustomResourceProvider = CustomResourceProvider;
_a = JSII_RTTI_SYMBOL_1;
CustomResourceProvider[_a] = { fqn: "@aws-cdk/aws-cloudformation.CustomResourceProvider", version: "1.91.0" };
/**
 * (deprecated) Deprecated.
 *
 * @deprecated use `core.CustomResource`
 */
class CustomResource extends core.CustomResource {
    /**
     * @deprecated
     */
    constructor(scope, id, props) {
        super(scope, id, {
            pascalCaseProperties: true,
            properties: props.properties,
            removalPolicy: props.removalPolicy,
            resourceType: props.resourceType,
            serviceToken: core.Lazy.string({ produce: () => props.provider.bind(this).serviceToken }),
        });
    }
}
exports.CustomResource = CustomResource;
_b = JSII_RTTI_SYMBOL_1;
CustomResource[_b] = { fqn: "@aws-cdk/aws-cloudformation.CustomResource", version: "1.91.0" };
//# sourceMappingURL=data:application/json;base64,