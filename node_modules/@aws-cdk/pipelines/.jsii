{
  "author": {
    "name": "Amazon Web Services",
    "organization": true,
    "roles": [
      "author"
    ],
    "url": "https://aws.amazon.com"
  },
  "bin": {},
  "dependencies": {
    "@aws-cdk/aws-codebuild": "1.91.0",
    "@aws-cdk/aws-codepipeline": "1.91.0",
    "@aws-cdk/aws-codepipeline-actions": "1.91.0",
    "@aws-cdk/aws-ec2": "1.91.0",
    "@aws-cdk/aws-events": "1.91.0",
    "@aws-cdk/aws-iam": "1.91.0",
    "@aws-cdk/aws-s3-assets": "1.91.0",
    "@aws-cdk/cloud-assembly-schema": "1.91.0",
    "@aws-cdk/core": "1.91.0",
    "@aws-cdk/cx-api": "1.91.0",
    "constructs": "^3.2.0"
  },
  "dependencyClosure": {
    "@aws-cdk/assets": {
      "targets": {
        "dotnet": {
          "iconUrl": "https://raw.githubusercontent.com/aws/aws-cdk/master/logo/default-256-dark.png",
          "namespace": "Amazon.CDK.Assets",
          "packageId": "Amazon.CDK.Assets"
        },
        "java": {
          "maven": {
            "artifactId": "cdk-assets",
            "groupId": "software.amazon.awscdk"
          },
          "package": "software.amazon.awscdk.assets"
        },
        "js": {
          "npm": "@aws-cdk/assets"
        },
        "python": {
          "classifiers": [
            "Framework :: AWS CDK",
            "Framework :: AWS CDK :: 1"
          ],
          "distName": "aws-cdk.assets",
          "module": "aws_cdk.assets"
        }
      }
    },
    "@aws-cdk/aws-apigateway": {
      "targets": {
        "dotnet": {
          "iconUrl": "https://raw.githubusercontent.com/aws/aws-cdk/master/logo/default-256-dark.png",
          "namespace": "Amazon.CDK.AWS.APIGateway",
          "packageId": "Amazon.CDK.AWS.APIGateway"
        },
        "java": {
          "maven": {
            "artifactId": "apigateway",
            "groupId": "software.amazon.awscdk"
          },
          "package": "software.amazon.awscdk.services.apigateway"
        },
        "js": {
          "npm": "@aws-cdk/aws-apigateway"
        },
        "python": {
          "classifiers": [
            "Framework :: AWS CDK",
            "Framework :: AWS CDK :: 1"
          ],
          "distName": "aws-cdk.aws-apigateway",
          "module": "aws_cdk.aws_apigateway"
        }
      }
    },
    "@aws-cdk/aws-apigatewayv2": {
      "targets": {
        "dotnet": {
          "iconUrl": "https://raw.githubusercontent.com/aws/aws-cdk/master/logo/default-256-dark.png",
          "namespace": "Amazon.CDK.AWS.APIGatewayv2",
          "packageId": "Amazon.CDK.AWS.APIGatewayv2"
        },
        "java": {
          "maven": {
            "artifactId": "apigatewayv2",
            "groupId": "software.amazon.awscdk"
          },
          "package": "software.amazon.awscdk.services.apigatewayv2"
        },
        "js": {
          "npm": "@aws-cdk/aws-apigatewayv2"
        },
        "python": {
          "classifiers": [
            "Framework :: AWS CDK",
            "Framework :: AWS CDK :: 1"
          ],
          "distName": "aws-cdk.aws-apigatewayv2",
          "module": "aws_cdk.aws_apigatewayv2"
        }
      }
    },
    "@aws-cdk/aws-applicationautoscaling": {
      "targets": {
        "dotnet": {
          "iconUrl": "https://raw.githubusercontent.com/aws/aws-cdk/master/logo/default-256-dark.png",
          "namespace": "Amazon.CDK.AWS.ApplicationAutoScaling",
          "packageId": "Amazon.CDK.AWS.ApplicationAutoScaling"
        },
        "java": {
          "maven": {
            "artifactId": "applicationautoscaling",
            "groupId": "software.amazon.awscdk"
          },
          "package": "software.amazon.awscdk.services.applicationautoscaling"
        },
        "js": {
          "npm": "@aws-cdk/aws-applicationautoscaling"
        },
        "python": {
          "classifiers": [
            "Framework :: AWS CDK",
            "Framework :: AWS CDK :: 1"
          ],
          "distName": "aws-cdk.aws-applicationautoscaling",
          "module": "aws_cdk.aws_applicationautoscaling"
        }
      }
    },
    "@aws-cdk/aws-autoscaling": {
      "targets": {
        "dotnet": {
          "iconUrl": "https://raw.githubusercontent.com/aws/aws-cdk/master/logo/default-256-dark.png",
          "namespace": "Amazon.CDK.AWS.AutoScaling",
          "packageId": "Amazon.CDK.AWS.AutoScaling"
        },
        "java": {
          "maven": {
            "artifactId": "autoscaling",
            "groupId": "software.amazon.awscdk"
          },
          "package": "software.amazon.awscdk.services.autoscaling"
        },
        "js": {
          "npm": "@aws-cdk/aws-autoscaling"
        },
        "python": {
          "classifiers": [
            "Framework :: AWS CDK",
            "Framework :: AWS CDK :: 1"
          ],
          "distName": "aws-cdk.aws-autoscaling",
          "module": "aws_cdk.aws_autoscaling"
        }
      }
    },
    "@aws-cdk/aws-autoscaling-common": {
      "targets": {
        "dotnet": {
          "iconUrl": "https://raw.githubusercontent.com/aws/aws-cdk/master/logo/default-256-dark.png",
          "namespace": "Amazon.CDK.AWS.AutoScaling.Common",
          "packageId": "Amazon.CDK.AWS.AutoScaling.Common"
        },
        "java": {
          "maven": {
            "artifactId": "autoscaling-common",
            "groupId": "software.amazon.awscdk"
          },
          "package": "software.amazon.awscdk.services.autoscaling.common"
        },
        "js": {
          "npm": "@aws-cdk/aws-autoscaling-common"
        },
        "python": {
          "classifiers": [
            "Framework :: AWS CDK",
            "Framework :: AWS CDK :: 1"
          ],
          "distName": "aws-cdk.aws-autoscaling-common",
          "module": "aws_cdk.aws_autoscaling_common"
        }
      }
    },
    "@aws-cdk/aws-autoscaling-hooktargets": {
      "targets": {
        "dotnet": {
          "iconUrl": "https://raw.githubusercontent.com/aws/aws-cdk/master/logo/default-256-dark.png",
          "namespace": "Amazon.CDK.AWS.AutoScaling.HookTargets",
          "packageId": "Amazon.CDK.AWS.AutoScaling.HookTargets"
        },
        "java": {
          "maven": {
            "artifactId": "autoscaling-hooktargets",
            "groupId": "software.amazon.awscdk"
          },
          "package": "software.amazon.awscdk.services.autoscaling.hooktargets"
        },
        "js": {
          "npm": "@aws-cdk/aws-autoscaling-hooktargets"
        },
        "python": {
          "classifiers": [
            "Framework :: AWS CDK",
            "Framework :: AWS CDK :: 1"
          ],
          "distName": "aws-cdk.aws-autoscaling-hooktargets",
          "module": "aws_cdk.aws_autoscaling_hooktargets"
        }
      }
    },
    "@aws-cdk/aws-batch": {
      "targets": {
        "dotnet": {
          "iconUrl": "https://raw.githubusercontent.com/aws/aws-cdk/master/logo/default-256-dark.png",
          "namespace": "Amazon.CDK.AWS.Batch",
          "packageId": "Amazon.CDK.AWS.Batch"
        },
        "java": {
          "maven": {
            "artifactId": "batch",
            "groupId": "software.amazon.awscdk"
          },
          "package": "software.amazon.awscdk.services.batch"
        },
        "js": {
          "npm": "@aws-cdk/aws-batch"
        },
        "python": {
          "classifiers": [
            "Framework :: AWS CDK",
            "Framework :: AWS CDK :: 1"
          ],
          "distName": "aws-cdk.aws-batch",
          "module": "aws_cdk.aws_batch"
        }
      }
    },
    "@aws-cdk/aws-certificatemanager": {
      "targets": {
        "dotnet": {
          "iconUrl": "https://raw.githubusercontent.com/aws/aws-cdk/master/logo/default-256-dark.png",
          "namespace": "Amazon.CDK.AWS.CertificateManager",
          "packageId": "Amazon.CDK.AWS.CertificateManager"
        },
        "java": {
          "maven": {
            "artifactId": "certificatemanager",
            "groupId": "software.amazon.awscdk"
          },
          "package": "software.amazon.awscdk.services.certificatemanager"
        },
        "js": {
          "npm": "@aws-cdk/aws-certificatemanager"
        },
        "python": {
          "classifiers": [
            "Framework :: AWS CDK",
            "Framework :: AWS CDK :: 1"
          ],
          "distName": "aws-cdk.aws-certificatemanager",
          "module": "aws_cdk.aws_certificatemanager"
        }
      }
    },
    "@aws-cdk/aws-cloudformation": {
      "targets": {
        "dotnet": {
          "iconUrl": "https://raw.githubusercontent.com/aws/aws-cdk/master/logo/default-256-dark.png",
          "namespace": "Amazon.CDK.AWS.CloudFormation",
          "packageId": "Amazon.CDK.AWS.CloudFormation"
        },
        "java": {
          "maven": {
            "artifactId": "cloudformation",
            "groupId": "software.amazon.awscdk"
          },
          "package": "software.amazon.awscdk.services.cloudformation"
        },
        "js": {
          "npm": "@aws-cdk/aws-cloudformation"
        },
        "python": {
          "classifiers": [
            "Framework :: AWS CDK",
            "Framework :: AWS CDK :: 1"
          ],
          "distName": "aws-cdk.aws-cloudformation",
          "module": "aws_cdk.aws_cloudformation"
        }
      }
    },
    "@aws-cdk/aws-cloudfront": {
      "submodules": {
        "@aws-cdk/aws-cloudfront.experimental": {
          "locationInModule": {
            "filename": "lib/index.ts",
            "line": 11
          }
        }
      },
      "targets": {
        "dotnet": {
          "iconUrl": "https://raw.githubusercontent.com/aws/aws-cdk/master/logo/default-256-dark.png",
          "namespace": "Amazon.CDK.AWS.CloudFront",
          "packageId": "Amazon.CDK.AWS.CloudFront"
        },
        "java": {
          "maven": {
            "artifactId": "cloudfront",
            "groupId": "software.amazon.awscdk"
          },
          "package": "software.amazon.awscdk.services.cloudfront"
        },
        "js": {
          "npm": "@aws-cdk/aws-cloudfront"
        },
        "python": {
          "classifiers": [
            "Framework :: AWS CDK",
            "Framework :: AWS CDK :: 1"
          ],
          "distName": "aws-cdk.aws-cloudfront",
          "module": "aws_cdk.aws_cloudfront"
        }
      }
    },
    "@aws-cdk/aws-cloudwatch": {
      "targets": {
        "dotnet": {
          "iconUrl": "https://raw.githubusercontent.com/aws/aws-cdk/master/logo/default-256-dark.png",
          "namespace": "Amazon.CDK.AWS.CloudWatch",
          "packageId": "Amazon.CDK.AWS.CloudWatch"
        },
        "java": {
          "maven": {
            "artifactId": "cloudwatch",
            "groupId": "software.amazon.awscdk"
          },
          "package": "software.amazon.awscdk.services.cloudwatch"
        },
        "js": {
          "npm": "@aws-cdk/aws-cloudwatch"
        },
        "python": {
          "classifiers": [
            "Framework :: AWS CDK",
            "Framework :: AWS CDK :: 1"
          ],
          "distName": "aws-cdk.aws-cloudwatch",
          "module": "aws_cdk.aws_cloudwatch"
        }
      }
    },
    "@aws-cdk/aws-codebuild": {
      "targets": {
        "dotnet": {
          "iconUrl": "https://raw.githubusercontent.com/aws/aws-cdk/master/logo/default-256-dark.png",
          "namespace": "Amazon.CDK.AWS.CodeBuild",
          "packageId": "Amazon.CDK.AWS.CodeBuild"
        },
        "java": {
          "maven": {
            "artifactId": "codebuild",
            "groupId": "software.amazon.awscdk"
          },
          "package": "software.amazon.awscdk.services.codebuild"
        },
        "js": {
          "npm": "@aws-cdk/aws-codebuild"
        },
        "python": {
          "classifiers": [
            "Framework :: AWS CDK",
            "Framework :: AWS CDK :: 1"
          ],
          "distName": "aws-cdk.aws-codebuild",
          "module": "aws_cdk.aws_codebuild"
        }
      }
    },
    "@aws-cdk/aws-codecommit": {
      "targets": {
        "dotnet": {
          "iconUrl": "https://raw.githubusercontent.com/aws/aws-cdk/master/logo/default-256-dark.png",
          "namespace": "Amazon.CDK.AWS.CodeCommit",
          "packageId": "Amazon.CDK.AWS.CodeCommit"
        },
        "java": {
          "maven": {
            "artifactId": "codecommit",
            "groupId": "software.amazon.awscdk"
          },
          "package": "software.amazon.awscdk.services.codecommit"
        },
        "js": {
          "npm": "@aws-cdk/aws-codecommit"
        },
        "python": {
          "classifiers": [
            "Framework :: AWS CDK",
            "Framework :: AWS CDK :: 1"
          ],
          "distName": "aws-cdk.aws-codecommit",
          "module": "aws_cdk.aws_codecommit"
        }
      }
    },
    "@aws-cdk/aws-codedeploy": {
      "targets": {
        "dotnet": {
          "iconUrl": "https://raw.githubusercontent.com/aws/aws-cdk/master/logo/default-256-dark.png",
          "namespace": "Amazon.CDK.AWS.CodeDeploy",
          "packageId": "Amazon.CDK.AWS.CodeDeploy"
        },
        "java": {
          "maven": {
            "artifactId": "codedeploy",
            "groupId": "software.amazon.awscdk"
          },
          "package": "software.amazon.awscdk.services.codedeploy"
        },
        "js": {
          "npm": "@aws-cdk/aws-codedeploy"
        },
        "python": {
          "classifiers": [
            "Framework :: AWS CDK",
            "Framework :: AWS CDK :: 1"
          ],
          "distName": "aws-cdk.aws-codedeploy",
          "module": "aws_cdk.aws_codedeploy"
        }
      }
    },
    "@aws-cdk/aws-codeguruprofiler": {
      "targets": {
        "dotnet": {
          "iconUrl": "https://raw.githubusercontent.com/aws/aws-cdk/master/logo/default-256-dark.png",
          "namespace": "Amazon.CDK.AWS.CodeGuruProfiler",
          "packageId": "Amazon.CDK.AWS.CodeGuruProfiler"
        },
        "java": {
          "maven": {
            "artifactId": "codeguruprofiler",
            "groupId": "software.amazon.awscdk"
          },
          "package": "software.amazon.awscdk.services.codeguruprofiler"
        },
        "js": {
          "npm": "@aws-cdk/aws-codeguruprofiler"
        },
        "python": {
          "classifiers": [
            "Framework :: AWS CDK",
            "Framework :: AWS CDK :: 1"
          ],
          "distName": "aws-cdk.aws-codeguruprofiler",
          "module": "aws_cdk.aws_codeguruprofiler"
        }
      }
    },
    "@aws-cdk/aws-codepipeline": {
      "targets": {
        "dotnet": {
          "iconUrl": "https://raw.githubusercontent.com/aws/aws-cdk/master/logo/default-256-dark.png",
          "namespace": "Amazon.CDK.AWS.CodePipeline",
          "packageId": "Amazon.CDK.AWS.CodePipeline"
        },
        "java": {
          "maven": {
            "artifactId": "codepipeline",
            "groupId": "software.amazon.awscdk"
          },
          "package": "software.amazon.awscdk.services.codepipeline"
        },
        "js": {
          "npm": "@aws-cdk/aws-codepipeline"
        },
        "python": {
          "classifiers": [
            "Framework :: AWS CDK",
            "Framework :: AWS CDK :: 1"
          ],
          "distName": "aws-cdk.aws-codepipeline",
          "module": "aws_cdk.aws_codepipeline"
        }
      }
    },
    "@aws-cdk/aws-codepipeline-actions": {
      "targets": {
        "dotnet": {
          "iconUrl": "https://raw.githubusercontent.com/aws/aws-cdk/master/logo/default-256-dark.png",
          "namespace": "Amazon.CDK.AWS.CodePipeline.Actions",
          "packageId": "Amazon.CDK.AWS.CodePipeline.Actions"
        },
        "java": {
          "maven": {
            "artifactId": "codepipeline-actions",
            "groupId": "software.amazon.awscdk"
          },
          "package": "software.amazon.awscdk.services.codepipeline.actions"
        },
        "js": {
          "npm": "@aws-cdk/aws-codepipeline-actions"
        },
        "python": {
          "classifiers": [
            "Framework :: AWS CDK",
            "Framework :: AWS CDK :: 1"
          ],
          "distName": "aws-cdk.aws-codepipeline-actions",
          "module": "aws_cdk.aws_codepipeline_actions"
        }
      }
    },
    "@aws-cdk/aws-cognito": {
      "targets": {
        "dotnet": {
          "iconUrl": "https://raw.githubusercontent.com/aws/aws-cdk/master/logo/default-256-dark.png",
          "namespace": "Amazon.CDK.AWS.Cognito",
          "packageId": "Amazon.CDK.AWS.Cognito"
        },
        "java": {
          "maven": {
            "artifactId": "cognito",
            "groupId": "software.amazon.awscdk"
          },
          "package": "software.amazon.awscdk.services.cognito"
        },
        "js": {
          "npm": "@aws-cdk/aws-cognito"
        },
        "python": {
          "classifiers": [
            "Framework :: AWS CDK",
            "Framework :: AWS CDK :: 1"
          ],
          "distName": "aws-cdk.aws-cognito",
          "module": "aws_cdk.aws_cognito"
        }
      }
    },
    "@aws-cdk/aws-ec2": {
      "targets": {
        "dotnet": {
          "iconUrl": "https://raw.githubusercontent.com/aws/aws-cdk/master/logo/default-256-dark.png",
          "namespace": "Amazon.CDK.AWS.EC2",
          "packageId": "Amazon.CDK.AWS.EC2"
        },
        "java": {
          "maven": {
            "artifactId": "ec2",
            "groupId": "software.amazon.awscdk"
          },
          "package": "software.amazon.awscdk.services.ec2"
        },
        "js": {
          "npm": "@aws-cdk/aws-ec2"
        },
        "python": {
          "classifiers": [
            "Framework :: AWS CDK",
            "Framework :: AWS CDK :: 1"
          ],
          "distName": "aws-cdk.aws-ec2",
          "module": "aws_cdk.aws_ec2"
        }
      }
    },
    "@aws-cdk/aws-ecr": {
      "targets": {
        "dotnet": {
          "iconUrl": "https://raw.githubusercontent.com/aws/aws-cdk/master/logo/default-256-dark.png",
          "namespace": "Amazon.CDK.AWS.ECR",
          "packageId": "Amazon.CDK.AWS.ECR"
        },
        "java": {
          "maven": {
            "artifactId": "ecr",
            "groupId": "software.amazon.awscdk"
          },
          "package": "software.amazon.awscdk.services.ecr"
        },
        "js": {
          "npm": "@aws-cdk/aws-ecr"
        },
        "python": {
          "classifiers": [
            "Framework :: AWS CDK",
            "Framework :: AWS CDK :: 1"
          ],
          "distName": "aws-cdk.aws-ecr",
          "module": "aws_cdk.aws_ecr"
        }
      }
    },
    "@aws-cdk/aws-ecr-assets": {
      "targets": {
        "dotnet": {
          "iconUrl": "https://raw.githubusercontent.com/aws/aws-cdk/master/logo/default-256-dark.png",
          "namespace": "Amazon.CDK.AWS.Ecr.Assets",
          "packageId": "Amazon.CDK.ECR.Assets"
        },
        "java": {
          "maven": {
            "artifactId": "ecr-assets",
            "groupId": "software.amazon.awscdk"
          },
          "package": "software.amazon.awscdk.services.ecr.assets"
        },
        "js": {
          "npm": "@aws-cdk/aws-ecr-assets"
        },
        "python": {
          "classifiers": [
            "Framework :: AWS CDK",
            "Framework :: AWS CDK :: 1"
          ],
          "distName": "aws-cdk.aws-ecr-assets",
          "module": "aws_cdk.aws_ecr_assets"
        }
      }
    },
    "@aws-cdk/aws-ecs": {
      "targets": {
        "dotnet": {
          "iconUrl": "https://raw.githubusercontent.com/aws/aws-cdk/master/logo/default-256-dark.png",
          "namespace": "Amazon.CDK.AWS.ECS",
          "packageId": "Amazon.CDK.AWS.ECS"
        },
        "java": {
          "maven": {
            "artifactId": "ecs",
            "groupId": "software.amazon.awscdk"
          },
          "package": "software.amazon.awscdk.services.ecs"
        },
        "js": {
          "npm": "@aws-cdk/aws-ecs"
        },
        "python": {
          "classifiers": [
            "Framework :: AWS CDK",
            "Framework :: AWS CDK :: 1"
          ],
          "distName": "aws-cdk.aws-ecs",
          "module": "aws_cdk.aws_ecs"
        }
      }
    },
    "@aws-cdk/aws-efs": {
      "targets": {
        "dotnet": {
          "iconUrl": "https://raw.githubusercontent.com/aws/aws-cdk/master/logo/default-256-dark.png",
          "namespace": "Amazon.CDK.AWS.EFS",
          "packageId": "Amazon.CDK.AWS.EFS"
        },
        "java": {
          "maven": {
            "artifactId": "efs",
            "groupId": "software.amazon.awscdk"
          },
          "package": "software.amazon.awscdk.services.efs"
        },
        "js": {
          "npm": "@aws-cdk/aws-efs"
        },
        "python": {
          "classifiers": [
            "Framework :: AWS CDK",
            "Framework :: AWS CDK :: 1"
          ],
          "distName": "aws-cdk.aws-efs",
          "module": "aws_cdk.aws_efs"
        }
      }
    },
    "@aws-cdk/aws-elasticloadbalancing": {
      "targets": {
        "dotnet": {
          "iconUrl": "https://raw.githubusercontent.com/aws/aws-cdk/master/logo/default-256-dark.png",
          "namespace": "Amazon.CDK.AWS.ElasticLoadBalancing",
          "packageId": "Amazon.CDK.AWS.ElasticLoadBalancing"
        },
        "java": {
          "maven": {
            "artifactId": "elasticloadbalancing",
            "groupId": "software.amazon.awscdk"
          },
          "package": "software.amazon.awscdk.services.elasticloadbalancing"
        },
        "js": {
          "npm": "@aws-cdk/aws-elasticloadbalancing"
        },
        "python": {
          "classifiers": [
            "Framework :: AWS CDK",
            "Framework :: AWS CDK :: 1"
          ],
          "distName": "aws-cdk.aws-elasticloadbalancing",
          "module": "aws_cdk.aws_elasticloadbalancing"
        }
      }
    },
    "@aws-cdk/aws-elasticloadbalancingv2": {
      "targets": {
        "dotnet": {
          "iconUrl": "https://raw.githubusercontent.com/aws/aws-cdk/master/logo/default-256-dark.png",
          "namespace": "Amazon.CDK.AWS.ElasticLoadBalancingV2",
          "packageId": "Amazon.CDK.AWS.ElasticLoadBalancingV2"
        },
        "java": {
          "maven": {
            "artifactId": "elasticloadbalancingv2",
            "groupId": "software.amazon.awscdk"
          },
          "package": "software.amazon.awscdk.services.elasticloadbalancingv2"
        },
        "js": {
          "npm": "@aws-cdk/aws-elasticloadbalancingv2"
        },
        "python": {
          "classifiers": [
            "Framework :: AWS CDK",
            "Framework :: AWS CDK :: 1"
          ],
          "distName": "aws-cdk.aws-elasticloadbalancingv2",
          "module": "aws_cdk.aws_elasticloadbalancingv2"
        }
      }
    },
    "@aws-cdk/aws-events": {
      "targets": {
        "dotnet": {
          "iconUrl": "https://raw.githubusercontent.com/aws/aws-cdk/master/logo/default-256-dark.png",
          "namespace": "Amazon.CDK.AWS.Events",
          "packageId": "Amazon.CDK.AWS.Events"
        },
        "java": {
          "maven": {
            "artifactId": "events",
            "groupId": "software.amazon.awscdk"
          },
          "package": "software.amazon.awscdk.services.events"
        },
        "js": {
          "npm": "@aws-cdk/aws-events"
        },
        "python": {
          "classifiers": [
            "Framework :: AWS CDK",
            "Framework :: AWS CDK :: 1"
          ],
          "distName": "aws-cdk.aws-events",
          "module": "aws_cdk.aws_events"
        }
      }
    },
    "@aws-cdk/aws-events-targets": {
      "targets": {
        "dotnet": {
          "iconUrl": "https://raw.githubusercontent.com/aws/aws-cdk/master/logo/default-256-dark.png",
          "namespace": "Amazon.CDK.AWS.Events.Targets",
          "packageId": "Amazon.CDK.AWS.Events.Targets"
        },
        "java": {
          "maven": {
            "artifactId": "events-targets",
            "groupId": "software.amazon.awscdk"
          },
          "package": "software.amazon.awscdk.services.events.targets"
        },
        "js": {
          "npm": "@aws-cdk/aws-events-targets"
        },
        "python": {
          "classifiers": [
            "Framework :: AWS CDK",
            "Framework :: AWS CDK :: 1"
          ],
          "distName": "aws-cdk.aws-events-targets",
          "module": "aws_cdk.aws_events_targets"
        }
      }
    },
    "@aws-cdk/aws-iam": {
      "targets": {
        "dotnet": {
          "iconUrl": "https://raw.githubusercontent.com/aws/aws-cdk/master/logo/default-256-dark.png",
          "namespace": "Amazon.CDK.AWS.IAM",
          "packageId": "Amazon.CDK.AWS.IAM"
        },
        "java": {
          "maven": {
            "artifactId": "iam",
            "groupId": "software.amazon.awscdk"
          },
          "package": "software.amazon.awscdk.services.iam"
        },
        "js": {
          "npm": "@aws-cdk/aws-iam"
        },
        "python": {
          "classifiers": [
            "Framework :: AWS CDK",
            "Framework :: AWS CDK :: 1"
          ],
          "distName": "aws-cdk.aws-iam",
          "module": "aws_cdk.aws_iam"
        }
      }
    },
    "@aws-cdk/aws-kinesis": {
      "targets": {
        "dotnet": {
          "iconUrl": "https://raw.githubusercontent.com/aws/aws-cdk/master/logo/default-256-dark.png",
          "namespace": "Amazon.CDK.AWS.Kinesis",
          "packageId": "Amazon.CDK.AWS.Kinesis"
        },
        "java": {
          "maven": {
            "artifactId": "kinesis",
            "groupId": "software.amazon.awscdk"
          },
          "package": "software.amazon.awscdk.services.kinesis"
        },
        "js": {
          "npm": "@aws-cdk/aws-kinesis"
        },
        "python": {
          "classifiers": [
            "Framework :: AWS CDK",
            "Framework :: AWS CDK :: 1"
          ],
          "distName": "aws-cdk.aws-kinesis",
          "module": "aws_cdk.aws_kinesis"
        }
      }
    },
    "@aws-cdk/aws-kinesisfirehose": {
      "targets": {
        "dotnet": {
          "iconUrl": "https://raw.githubusercontent.com/aws/aws-cdk/master/logo/default-256-dark.png",
          "namespace": "Amazon.CDK.AWS.KinesisFirehose",
          "packageId": "Amazon.CDK.AWS.KinesisFirehose"
        },
        "java": {
          "maven": {
            "artifactId": "kinesisfirehose",
            "groupId": "software.amazon.awscdk"
          },
          "package": "software.amazon.awscdk.services.kinesisfirehose"
        },
        "js": {
          "npm": "@aws-cdk/aws-kinesisfirehose"
        },
        "python": {
          "classifiers": [
            "Framework :: AWS CDK",
            "Framework :: AWS CDK :: 1"
          ],
          "distName": "aws-cdk.aws-kinesisfirehose",
          "module": "aws_cdk.aws_kinesisfirehose"
        }
      }
    },
    "@aws-cdk/aws-kms": {
      "targets": {
        "dotnet": {
          "iconUrl": "https://raw.githubusercontent.com/aws/aws-cdk/master/logo/default-256-dark.png",
          "namespace": "Amazon.CDK.AWS.KMS",
          "packageId": "Amazon.CDK.AWS.KMS"
        },
        "java": {
          "maven": {
            "artifactId": "kms",
            "groupId": "software.amazon.awscdk"
          },
          "package": "software.amazon.awscdk.services.kms"
        },
        "js": {
          "npm": "@aws-cdk/aws-kms"
        },
        "python": {
          "classifiers": [
            "Framework :: AWS CDK",
            "Framework :: AWS CDK :: 1"
          ],
          "distName": "aws-cdk.aws-kms",
          "module": "aws_cdk.aws_kms"
        }
      }
    },
    "@aws-cdk/aws-lambda": {
      "targets": {
        "dotnet": {
          "iconUrl": "https://raw.githubusercontent.com/aws/aws-cdk/master/logo/default-256-dark.png",
          "namespace": "Amazon.CDK.AWS.Lambda",
          "packageId": "Amazon.CDK.AWS.Lambda"
        },
        "java": {
          "maven": {
            "artifactId": "lambda",
            "groupId": "software.amazon.awscdk"
          },
          "package": "software.amazon.awscdk.services.lambda"
        },
        "js": {
          "npm": "@aws-cdk/aws-lambda"
        },
        "python": {
          "classifiers": [
            "Framework :: AWS CDK",
            "Framework :: AWS CDK :: 1"
          ],
          "distName": "aws-cdk.aws-lambda",
          "module": "aws_cdk.aws_lambda"
        }
      }
    },
    "@aws-cdk/aws-logs": {
      "targets": {
        "dotnet": {
          "iconUrl": "https://raw.githubusercontent.com/aws/aws-cdk/master/logo/default-256-dark.png",
          "namespace": "Amazon.CDK.AWS.Logs",
          "packageId": "Amazon.CDK.AWS.Logs"
        },
        "java": {
          "maven": {
            "artifactId": "logs",
            "groupId": "software.amazon.awscdk"
          },
          "package": "software.amazon.awscdk.services.logs"
        },
        "js": {
          "npm": "@aws-cdk/aws-logs"
        },
        "python": {
          "classifiers": [
            "Framework :: AWS CDK",
            "Framework :: AWS CDK :: 1"
          ],
          "distName": "aws-cdk.aws-logs",
          "module": "aws_cdk.aws_logs"
        }
      }
    },
    "@aws-cdk/aws-route53": {
      "targets": {
        "dotnet": {
          "iconUrl": "https://raw.githubusercontent.com/aws/aws-cdk/master/logo/default-256-dark.png",
          "namespace": "Amazon.CDK.AWS.Route53",
          "packageId": "Amazon.CDK.AWS.Route53"
        },
        "java": {
          "maven": {
            "artifactId": "route53",
            "groupId": "software.amazon.awscdk"
          },
          "package": "software.amazon.awscdk.services.route53"
        },
        "js": {
          "npm": "@aws-cdk/aws-route53"
        },
        "python": {
          "classifiers": [
            "Framework :: AWS CDK",
            "Framework :: AWS CDK :: 1"
          ],
          "distName": "aws-cdk.aws-route53",
          "module": "aws_cdk.aws_route53"
        }
      }
    },
    "@aws-cdk/aws-route53-targets": {
      "targets": {
        "dotnet": {
          "iconUrl": "https://raw.githubusercontent.com/aws/aws-cdk/master/logo/default-256-dark.png",
          "namespace": "Amazon.CDK.AWS.Route53.Targets",
          "packageId": "Amazon.CDK.AWS.Route53.Targets"
        },
        "java": {
          "maven": {
            "artifactId": "route53-targets",
            "groupId": "software.amazon.awscdk"
          },
          "package": "software.amazon.awscdk.services.route53.targets"
        },
        "js": {
          "npm": "@aws-cdk/aws-route53-targets"
        },
        "python": {
          "classifiers": [
            "Framework :: AWS CDK",
            "Framework :: AWS CDK :: 1"
          ],
          "distName": "aws-cdk.aws-route53-targets",
          "module": "aws_cdk.aws_route53_targets"
        }
      }
    },
    "@aws-cdk/aws-s3": {
      "targets": {
        "dotnet": {
          "iconUrl": "https://raw.githubusercontent.com/aws/aws-cdk/master/logo/default-256-dark.png",
          "namespace": "Amazon.CDK.AWS.S3",
          "packageId": "Amazon.CDK.AWS.S3"
        },
        "java": {
          "maven": {
            "artifactId": "s3",
            "groupId": "software.amazon.awscdk"
          },
          "package": "software.amazon.awscdk.services.s3"
        },
        "js": {
          "npm": "@aws-cdk/aws-s3"
        },
        "python": {
          "classifiers": [
            "Framework :: AWS CDK",
            "Framework :: AWS CDK :: 1"
          ],
          "distName": "aws-cdk.aws-s3",
          "module": "aws_cdk.aws_s3"
        }
      }
    },
    "@aws-cdk/aws-s3-assets": {
      "targets": {
        "dotnet": {
          "iconUrl": "https://raw.githubusercontent.com/aws/aws-cdk/master/logo/default-256-dark.png",
          "namespace": "Amazon.CDK.AWS.S3.Assets",
          "packageId": "Amazon.CDK.AWS.S3.Assets"
        },
        "java": {
          "maven": {
            "artifactId": "s3-assets",
            "groupId": "software.amazon.awscdk"
          },
          "package": "software.amazon.awscdk.services.s3.assets"
        },
        "js": {
          "npm": "@aws-cdk/aws-s3-assets"
        },
        "python": {
          "classifiers": [
            "Framework :: AWS CDK",
            "Framework :: AWS CDK :: 1"
          ],
          "distName": "aws-cdk.aws-s3-assets",
          "module": "aws_cdk.aws_s3_assets"
        }
      }
    },
    "@aws-cdk/aws-sam": {
      "targets": {
        "dotnet": {
          "iconUrl": "https://raw.githubusercontent.com/aws/aws-cdk/master/logo/default-256-dark.png",
          "namespace": "Amazon.CDK.AWS.SAM",
          "packageId": "Amazon.CDK.AWS.SAM"
        },
        "java": {
          "maven": {
            "artifactId": "sam",
            "groupId": "software.amazon.awscdk"
          },
          "package": "software.amazon.awscdk.services.sam"
        },
        "js": {
          "npm": "@aws-cdk/aws-sam"
        },
        "python": {
          "classifiers": [
            "Framework :: AWS CDK",
            "Framework :: AWS CDK :: 1"
          ],
          "distName": "aws-cdk.aws-sam",
          "module": "aws_cdk.aws_sam"
        }
      }
    },
    "@aws-cdk/aws-secretsmanager": {
      "targets": {
        "dotnet": {
          "iconUrl": "https://raw.githubusercontent.com/aws/aws-cdk/master/logo/default-256-dark.png",
          "namespace": "Amazon.CDK.AWS.SecretsManager",
          "packageId": "Amazon.CDK.AWS.SecretsManager"
        },
        "java": {
          "maven": {
            "artifactId": "secretsmanager",
            "groupId": "software.amazon.awscdk"
          },
          "package": "software.amazon.awscdk.services.secretsmanager"
        },
        "js": {
          "npm": "@aws-cdk/aws-secretsmanager"
        },
        "python": {
          "classifiers": [
            "Framework :: AWS CDK",
            "Framework :: AWS CDK :: 1"
          ],
          "distName": "aws-cdk.aws-secretsmanager",
          "module": "aws_cdk.aws_secretsmanager"
        }
      }
    },
    "@aws-cdk/aws-servicecatalog": {
      "targets": {
        "dotnet": {
          "iconUrl": "https://raw.githubusercontent.com/aws/aws-cdk/master/logo/default-256-dark.png",
          "namespace": "Amazon.CDK.AWS.ServiceCatalog",
          "packageId": "Amazon.CDK.AWS.ServiceCatalog"
        },
        "java": {
          "maven": {
            "artifactId": "servicecatalog",
            "groupId": "software.amazon.awscdk"
          },
          "package": "software.amazon.awscdk.services.servicecatalog"
        },
        "js": {
          "npm": "@aws-cdk/aws-servicecatalog"
        },
        "python": {
          "classifiers": [
            "Framework :: AWS CDK",
            "Framework :: AWS CDK :: 1"
          ],
          "distName": "aws-cdk.aws-servicecatalog",
          "module": "aws_cdk.aws_servicecatalog"
        }
      }
    },
    "@aws-cdk/aws-servicediscovery": {
      "targets": {
        "dotnet": {
          "iconUrl": "https://raw.githubusercontent.com/aws/aws-cdk/master/logo/default-256-dark.png",
          "namespace": "Amazon.CDK.AWS.ServiceDiscovery",
          "packageId": "Amazon.CDK.AWS.ServiceDiscovery"
        },
        "java": {
          "maven": {
            "artifactId": "servicediscovery",
            "groupId": "software.amazon.awscdk"
          },
          "package": "software.amazon.awscdk.services.servicediscovery"
        },
        "js": {
          "npm": "@aws-cdk/aws-servicediscovery"
        },
        "python": {
          "classifiers": [
            "Framework :: AWS CDK",
            "Framework :: AWS CDK :: 1"
          ],
          "distName": "aws-cdk.aws-servicediscovery",
          "module": "aws_cdk.aws_servicediscovery"
        }
      }
    },
    "@aws-cdk/aws-sns": {
      "targets": {
        "dotnet": {
          "iconUrl": "https://raw.githubusercontent.com/aws/aws-cdk/master/logo/default-256-dark.png",
          "namespace": "Amazon.CDK.AWS.SNS",
          "packageId": "Amazon.CDK.AWS.SNS"
        },
        "java": {
          "maven": {
            "artifactId": "sns",
            "groupId": "software.amazon.awscdk"
          },
          "package": "software.amazon.awscdk.services.sns"
        },
        "js": {
          "npm": "@aws-cdk/aws-sns"
        },
        "python": {
          "classifiers": [
            "Framework :: AWS CDK",
            "Framework :: AWS CDK :: 1"
          ],
          "distName": "aws-cdk.aws-sns",
          "module": "aws_cdk.aws_sns"
        }
      }
    },
    "@aws-cdk/aws-sns-subscriptions": {
      "targets": {
        "dotnet": {
          "iconUrl": "https://raw.githubusercontent.com/aws/aws-cdk/master/logo/default-256-dark.png",
          "namespace": "Amazon.CDK.AWS.SNS.Subscriptions",
          "packageId": "Amazon.CDK.AWS.SNS.Subscriptions"
        },
        "java": {
          "maven": {
            "artifactId": "sns-subscriptions",
            "groupId": "software.amazon.awscdk"
          },
          "package": "software.amazon.awscdk.services.sns.subscriptions"
        },
        "js": {
          "npm": "@aws-cdk/aws-sns-subscriptions"
        },
        "python": {
          "classifiers": [
            "Framework :: AWS CDK",
            "Framework :: AWS CDK :: 1"
          ],
          "distName": "aws-cdk.aws-sns-subscriptions",
          "module": "aws_cdk.aws_sns_subscriptions"
        }
      }
    },
    "@aws-cdk/aws-sqs": {
      "targets": {
        "dotnet": {
          "iconUrl": "https://raw.githubusercontent.com/aws/aws-cdk/master/logo/default-256-dark.png",
          "namespace": "Amazon.CDK.AWS.SQS",
          "packageId": "Amazon.CDK.AWS.SQS"
        },
        "java": {
          "maven": {
            "artifactId": "sqs",
            "groupId": "software.amazon.awscdk"
          },
          "package": "software.amazon.awscdk.services.sqs"
        },
        "js": {
          "npm": "@aws-cdk/aws-sqs"
        },
        "python": {
          "classifiers": [
            "Framework :: AWS CDK",
            "Framework :: AWS CDK :: 1"
          ],
          "distName": "aws-cdk.aws-sqs",
          "module": "aws_cdk.aws_sqs"
        }
      }
    },
    "@aws-cdk/aws-ssm": {
      "targets": {
        "dotnet": {
          "iconUrl": "https://raw.githubusercontent.com/aws/aws-cdk/master/logo/default-256-dark.png",
          "namespace": "Amazon.CDK.AWS.SSM",
          "packageId": "Amazon.CDK.AWS.SSM"
        },
        "java": {
          "maven": {
            "artifactId": "ssm",
            "groupId": "software.amazon.awscdk"
          },
          "package": "software.amazon.awscdk.services.ssm"
        },
        "js": {
          "npm": "@aws-cdk/aws-ssm"
        },
        "python": {
          "classifiers": [
            "Framework :: AWS CDK",
            "Framework :: AWS CDK :: 1"
          ],
          "distName": "aws-cdk.aws-ssm",
          "module": "aws_cdk.aws_ssm"
        }
      }
    },
    "@aws-cdk/aws-stepfunctions": {
      "targets": {
        "dotnet": {
          "iconUrl": "https://raw.githubusercontent.com/aws/aws-cdk/master/logo/default-256-dark.png",
          "namespace": "Amazon.CDK.AWS.StepFunctions",
          "packageId": "Amazon.CDK.AWS.StepFunctions"
        },
        "java": {
          "maven": {
            "artifactId": "stepfunctions",
            "groupId": "software.amazon.awscdk"
          },
          "package": "software.amazon.awscdk.services.stepfunctions"
        },
        "js": {
          "npm": "@aws-cdk/aws-stepfunctions"
        },
        "python": {
          "classifiers": [
            "Framework :: AWS CDK",
            "Framework :: AWS CDK :: 1"
          ],
          "distName": "aws-cdk.aws-stepfunctions",
          "module": "aws_cdk.aws_stepfunctions"
        }
      }
    },
    "@aws-cdk/cloud-assembly-schema": {
      "targets": {
        "dotnet": {
          "iconUrl": "https://raw.githubusercontent.com/aws/aws-cdk/master/logo/default-256-dark.png",
          "namespace": "Amazon.CDK.CloudAssembly.Schema",
          "packageId": "Amazon.CDK.CloudAssembly.Schema"
        },
        "java": {
          "maven": {
            "artifactId": "cdk-cloud-assembly-schema",
            "groupId": "software.amazon.awscdk"
          },
          "package": "software.amazon.awscdk.cloudassembly.schema"
        },
        "js": {
          "npm": "@aws-cdk/cloud-assembly-schema"
        },
        "python": {
          "classifiers": [
            "Framework :: AWS CDK",
            "Framework :: AWS CDK :: 1"
          ],
          "distName": "aws-cdk.cloud-assembly-schema",
          "module": "aws_cdk.cloud_assembly_schema"
        }
      }
    },
    "@aws-cdk/core": {
      "targets": {
        "dotnet": {
          "iconUrl": "https://raw.githubusercontent.com/aws/aws-cdk/master/logo/default-256-dark.png",
          "namespace": "Amazon.CDK",
          "packageId": "Amazon.CDK"
        },
        "java": {
          "maven": {
            "artifactId": "core",
            "groupId": "software.amazon.awscdk"
          },
          "package": "software.amazon.awscdk.core"
        },
        "js": {
          "npm": "@aws-cdk/core"
        },
        "python": {
          "classifiers": [
            "Framework :: AWS CDK",
            "Framework :: AWS CDK :: 1"
          ],
          "distName": "aws-cdk.core",
          "module": "aws_cdk.core"
        }
      }
    },
    "@aws-cdk/custom-resources": {
      "targets": {
        "dotnet": {
          "iconUrl": "https://raw.githubusercontent.com/aws/aws-cdk/master/logo/default-256-dark.png",
          "namespace": "Amazon.CDK.CustomResources",
          "packageId": "Amazon.CDK.AWS.CustomResources"
        },
        "java": {
          "maven": {
            "artifactId": "cdk-customresources",
            "groupId": "software.amazon.awscdk"
          },
          "package": "software.amazon.awscdk.customresources"
        },
        "js": {
          "npm": "@aws-cdk/custom-resources"
        },
        "python": {
          "classifiers": [
            "Framework :: AWS CDK",
            "Framework :: AWS CDK :: 1"
          ],
          "distName": "aws-cdk.custom-resources",
          "module": "aws_cdk.custom_resources"
        }
      }
    },
    "@aws-cdk/cx-api": {
      "targets": {
        "dotnet": {
          "iconUrl": "https://raw.githubusercontent.com/aws/aws-cdk/master/logo/default-256-dark.png",
          "namespace": "Amazon.CDK.CXAPI",
          "packageId": "Amazon.CDK.CXAPI"
        },
        "java": {
          "maven": {
            "artifactId": "cdk-cx-api",
            "groupId": "software.amazon.awscdk"
          },
          "package": "software.amazon.awscdk.cxapi"
        },
        "js": {
          "npm": "@aws-cdk/cx-api"
        },
        "python": {
          "classifiers": [
            "Framework :: AWS CDK",
            "Framework :: AWS CDK :: 1"
          ],
          "distName": "aws-cdk.cx-api",
          "module": "aws_cdk.cx_api"
        }
      }
    },
    "@aws-cdk/region-info": {
      "targets": {
        "dotnet": {
          "iconUrl": "https://raw.githubusercontent.com/aws/aws-cdk/master/logo/default-256-dark.png",
          "namespace": "Amazon.CDK.RegionInfo",
          "packageId": "Amazon.CDK.RegionInfo"
        },
        "java": {
          "maven": {
            "artifactId": "cdk-region-info",
            "groupId": "software.amazon.awscdk"
          },
          "package": "software.amazon.awscdk.regioninfo"
        },
        "js": {
          "npm": "@aws-cdk/region-info"
        },
        "python": {
          "classifiers": [
            "Framework :: AWS CDK",
            "Framework :: AWS CDK :: 1"
          ],
          "distName": "aws-cdk.region-info",
          "module": "aws_cdk.region_info"
        }
      }
    },
    "constructs": {
      "targets": {
        "dotnet": {
          "namespace": "Constructs",
          "packageId": "Constructs"
        },
        "go": {
          "moduleName": "github.com/aws/constructs-go"
        },
        "java": {
          "maven": {
            "artifactId": "constructs",
            "groupId": "software.constructs"
          },
          "package": "software.constructs"
        },
        "js": {
          "npm": "constructs"
        },
        "python": {
          "distName": "constructs",
          "module": "constructs"
        }
      }
    }
  },
  "description": "Continuous Delivery of CDK applications",
  "docs": {
    "stability": "experimental"
  },
  "homepage": "https://github.com/aws/aws-cdk",
  "jsiiVersion": "1.21.0 (build 4262b22)",
  "keywords": [
    "aws",
    "cdk",
    "constructs",
    "pipelines",
    "cicd",
    "continuous",
    "delivery"
  ],
  "license": "Apache-2.0",
  "metadata": {
    "jsii": {
      "pacmak": {
        "hasDefaultInterfaces": true
      }
    }
  },
  "name": "@aws-cdk/pipelines",
  "readme": {
    "markdown": "# CDK Pipelines\n<!--BEGIN STABILITY BANNER-->\n\n---\n\n![cdk-constructs: Developer Preview](https://img.shields.io/badge/cdk--constructs-developer--preview-informational.svg?style=for-the-badge)\n\n> The APIs of higher level constructs in this module are in **developer preview** before they\n> become stable. We will only make breaking changes to address unforeseen API issues. Therefore,\n> these APIs are not subject to [Semantic Versioning](https://semver.org/), and breaking changes\n> will be announced in release notes. This means that while you may use them, you may need to\n> update your source code when upgrading to a newer version of this package.\n\n---\n\n<!--END STABILITY BANNER-->\n\nA construct library for painless Continuous Delivery of CDK applications.\n\n![Developer Preview](https://img.shields.io/badge/developer--preview-informational.svg?style=for-the-badge)\n\n> This module is in **developer preview**. We may make breaking changes to address unforeseen API issues. Therefore, these APIs are not subject to [Semantic Versioning](https://semver.org/), and breaking changes will be announced in release notes. This means that while you may use them, you may need to update your source code when upgrading to a newer version of this package.\n\n## At a glance\n\nDefining a pipeline for your application is as simple as defining a subclass\nof `Stage`, and calling `pipeline.addApplicationStage()` with instances of\nthat class. Deploying to a different account or region looks exactly the\nsame, the *CDK Pipelines* library takes care of the details.\n\n(Note that have to *bootstrap* all environments before the following code\nwill work, see the section **CDK Environment Bootstrapping** below).\n\n```ts\n/** The stacks for our app are defined in my-stacks.ts.  The internals of these\n  * stacks aren't important, except that DatabaseStack exposes an attribute\n  * \"table\" for a database table it defines, and ComputeStack accepts a reference\n  * to this table in its properties.\n  */\nimport { DatabaseStack, ComputeStack } from '../lib/my-stacks';\n\nimport { Construct, Stage, Stack, StackProps, StageProps } from '@aws-cdk/core';\nimport { CdkPipeline } from '@aws-cdk/pipelines';\nimport * as codepipeline from '@aws-cdk/aws-codepipeline';\n\n/**\n * Your application\n *\n * May consist of one or more Stacks (here, two)\n *\n * By declaring our DatabaseStack and our ComputeStack inside a Stage,\n * we make sure they are deployed together, or not at all.\n */\nclass MyApplication extends Stage {\n  constructor(scope: Construct, id: string, props?: StageProps) {\n    super(scope, id, props);\n\n    const dbStack = new DatabaseStack(this, 'Database');\n    new ComputeStack(this, 'Compute', {\n      table: dbStack.table,\n    });\n  }\n}\n\n/**\n * Stack to hold the pipeline\n */\nclass MyPipelineStack extends Stack {\n  constructor(scope: Construct, id: string, props?: StackProps) {\n    super(scope, id, props);\n\n    const sourceArtifact = new codepipeline.Artifact();\n    const cloudAssemblyArtifact = new codepipeline.Artifact();\n\n    const pipeline = new CdkPipeline(this, 'Pipeline', {\n      // ...source and build information here (see below)\n    });\n\n    // Do this as many times as necessary with any account and region\n    // Account and region may different from the pipeline's.\n    pipeline.addApplicationStage(new MyApplication(this, 'Prod', {\n      env: {\n        account: '123456789012',\n        region: 'eu-west-1',\n      }\n    }));\n  }\n}\n```\n\nThe pipeline is **self-mutating**, which means that if you add new\napplication stages in the source code, or new stacks to `MyApplication`, the\npipeline will automatically reconfigure itself to deploy those new stages and\nstacks.\n\n## CDK Versioning\n\nThis library uses prerelease features of the CDK framework, which can be enabled by adding the\nfollowing to `cdk.json`:\n\n```js\n{\n  // ...\n  \"context\": {\n    \"@aws-cdk/core:newStyleStackSynthesis\": true\n  }\n}\n```\n\n## A note on cost\n\nBy default, the `CdkPipeline` construct creates an AWS Key Management Service\n(AWS KMS) Customer Master Key (CMK) for you to encrypt the artifacts in the\nartifact bucket, which incurs a cost of\n**$1/month**. This default configuration is necessary to allow cross-account\ndeployments.\n\nIf you do not intend to perform cross-account deployments, you can disable\nthe creation of the Customer Master Keys by passing `crossAccountKeys: false`\nwhen defining the Pipeline:\n\n```ts\nconst pipeline = new pipelines.CdkPipeline(this, 'Pipeline', {\n  crossAccountKeys: false,\n\n  // ...\n});\n```\n\n## Defining the Pipeline (Source and Synth)\n\nThe pipeline is defined by instantiating `CdkPipeline` in a Stack. This defines the\nsource location for the pipeline as well as the build commands. For example, the following\ndefines a pipeline whose source is stored in a GitHub repository, and uses NPM\nto build. The Pipeline will be provisioned in account `111111111111` and region\n`eu-west-1`:\n\n```ts\nclass MyPipelineStack extends Stack {\n  constructor(scope: Construct, id: string, props?: StackProps) {\n    super(scope, id, props);\n\n    const sourceArtifact = new codepipeline.Artifact();\n    const cloudAssemblyArtifact = new codepipeline.Artifact();\n\n    const pipeline = new CdkPipeline(this, 'Pipeline', {\n      pipelineName: 'MyAppPipeline',\n      cloudAssemblyArtifact,\n\n      sourceAction: new codepipeline_actions.GitHubSourceAction({\n        actionName: 'GitHub',\n        output: sourceArtifact,\n        oauthToken: SecretValue.secretsManager('GITHUB_TOKEN_NAME'),\n        // Replace these with your actual GitHub project name\n        owner: 'OWNER',\n        repo: 'REPO',\n        branch: 'main', // default: 'master'\n      }),\n\n      synthAction: SimpleSynthAction.standardNpmSynth({\n        sourceArtifact,\n        cloudAssemblyArtifact,\n\n        // Optionally specify a VPC in which the action runs\n        vpc: new ec2.Vpc(this, 'NpmSynthVpc'),\n\n        // Use this if you need a build step (if you're not using ts-node\n        // or if you have TypeScript Lambdas that need to be compiled).\n        buildCommand: 'npm run build',\n      }),\n    });\n  }\n}\n\nconst app = new App();\nnew MyPipelineStack(this, 'PipelineStack', {\n  env: {\n    account: '111111111111',\n    region: 'eu-west-1',\n  }\n});\n```\n\nIf you prefer more control over the underlying CodePipeline object, you can\ncreate one yourself, including custom Source and Build stages:\n\n```ts\nconst codePipeline = new cp.Pipeline(pipelineStack, 'CodePipeline', {\n  stages: [\n    {\n      stageName: 'CustomSource',\n      actions: [...],\n    },\n    {\n      stageName: 'CustomBuild',\n      actions: [...],\n    },\n  ],\n});\n\nconst cdkPipeline = new CdkPipeline(this, 'CdkPipeline', {\n  codePipeline,\n  cloudAssemblyArtifact,\n});\n```\n\n## Initial pipeline deployment\n\nYou provision this pipeline by making sure the target environment has been\nbootstrapped (see below), and then executing deploying the `PipelineStack`\n*once*. Afterwards, the pipeline will keep itself up-to-date.\n\n> **Important**: be sure to `git commit` and `git push` before deploying the\n> Pipeline stack using `cdk deploy`!\n>\n> The reason is that the pipeline will start deploying and self-mutating\n> right away based on the sources in the repository, so the sources it finds\n> in there should be the ones you want it to find.\n\nRun the following commands to get the pipeline going:\n\n```console\n$ git commit -a\n$ git push\n$ cdk deploy PipelineStack\n```\n\nAdministrative permissions to the account are only necessary up until\nthis point. We recommend you shed access to these credentials after doing this.\n\n### Sources\n\nAny of the regular sources from the [`@aws-cdk/aws-codepipeline-actions`](https://docs.aws.amazon.com/cdk/api/latest/docs/aws-codepipeline-actions-readme.html#github) module can be used.\n\n### Synths\n\nYou define how to build and synth the project by specifying a `synthAction`.\nThis can be any CodePipeline action that produces an artifact with a CDK\nCloud Assembly in it (the contents of the `cdk.out` directory created when\n`cdk synth` is called). Pass the output artifact of the synth in the\nPipeline's `cloudAssemblyArtifact` property.\n\n`SimpleSynthAction` is available for synths that can be performed by running a couple\nof simple shell commands (install, build, and synth) using AWS CodeBuild. When\nusing these, the source repository does not need to have a `buildspec.yml`. An example\nof using `SimpleSynthAction` to run a Maven build followed by a CDK synth:\n\n```ts\nconst pipeline = new CdkPipeline(this, 'Pipeline', {\n  // ...\n  synthAction: new SimpleSynthAction({\n    sourceArtifact,\n    cloudAssemblyArtifact,\n    installCommands: ['npm install -g aws-cdk'],\n    buildCommands: ['mvn package'],\n    synthCommand: 'cdk synth',\n  })\n});\n```\n\nAvailable as factory functions on `SimpleSynthAction` are some common\nconvention-based synth:\n\n* `SimpleSynthAction.standardNpmSynth()`: build using NPM conventions. Expects a `package-lock.json`,\n  a `cdk.json`, and expects the CLI to be a versioned dependency in `package.json`. Does\n  not perform a build step by default.\n* `CdkSynth.standardYarnSynth()`: build using Yarn conventions. Expects a `yarn.lock`\n  a `cdk.json`, and expects the CLI to be a versioned dependency in `package.json`. Does\n  not perform a build step by default.\n\nIf you need a custom build/synth step that is not covered by `SimpleSynthAction`, you can\nalways add a custom CodeBuild project and pass a corresponding `CodeBuildAction` to the\npipeline.\n\n## Adding Application Stages\n\nTo define an application that can be added to the pipeline integrally, define a subclass\nof `Stage`. The `Stage` can contain one or more stack which make up your application. If\nthere are dependencies between the stacks, the stacks will automatically be added to the\npipeline in the right order. Stacks that don't depend on each other will be deployed in\nparallel. You can add a dependency relationship between stacks by calling\n`stack1.addDependency(stack2)`.\n\nStages take a default `env` argument which the Stacks inside the Stage will fall back to\nif no `env` is defined for them.\n\nAn application is added to the pipeline by calling `addApplicationStage()` with instances\nof the Stage. The same class can be instantiated and added to the pipeline multiple times\nto define different stages of your DTAP or multi-region application pipeline:\n\n```ts\n// Testing stage\npipeline.addApplicationStage(new MyApplication(this, 'Testing', {\n  env: { account: '111111111111', region: 'eu-west-1' }\n}));\n\n// Acceptance stage\npipeline.addApplicationStage(new MyApplication(this, 'Acceptance', {\n  env: { account: '222222222222', region: 'eu-west-1' }\n}));\n\n// Production stage\npipeline.addApplicationStage(new MyApplication(this, 'Production', {\n  env: { account: '333333333333', region: 'eu-west-1' }\n}));\n```\n\n> Be aware that adding new stages via `addApplicationStage()` will\n> automatically add them to the pipeline and deploy the new stacks, but\n> *removing* them from the pipeline or deleting the pipeline stack will not\n> automatically delete deployed application stacks. You must delete those\n> stacks by hand using the AWS CloudFormation console or the AWS CLI.\n\n### More Control\n\nEvery *Application Stage* added by `addApplicationStage()` will lead to the addition of\nan individual *Pipeline Stage*, which is subsequently returned. You can add more\nactions to the stage by calling `addAction()` on it. For example:\n\n```ts\nconst testingStage = pipeline.addApplicationStage(new MyApplication(this, 'Testing', {\n  env: { account: '111111111111', region: 'eu-west-1' }\n}));\n\n// Add a action -- in this case, a Manual Approval action\n// (for illustration purposes: testingStage.addManualApprovalAction() is a\n// convenience shorthand that does the same)\ntestingStage.addAction(new ManualApprovalAction({\n  actionName: 'ManualApproval',\n  runOrder: testingStage.nextSequentialRunOrder(),\n}));\n```\n\nYou can also add more than one *Application Stage* to one *Pipeline Stage*. For example:\n\n```ts\n// Create an empty pipeline stage\nconst testingStage = pipeline.addStage('Testing');\n\n// Add two application stages to the same pipeline stage\ntestingStage.addApplication(new MyApplication1(this, 'MyApp1', {\n  env: { account: '111111111111', region: 'eu-west-1' }\n}));\ntestingStage.addApplication(new MyApplication2(this, 'MyApp2', {\n  env: { account: '111111111111', region: 'eu-west-1' }\n}));\n```\n\nEven more, adding a manual approval action or reserving space for some extra sequential actions\nbetween 'Prepare' and 'Execute' ChangeSet actions is possible.\n\n```ts\n  pipeline.addApplicationStage(new MyApplication(this, 'Production'), {\n    manualApprovals: true,\n    extraRunOrderSpace: 1,\n  });\n```\n\n## Adding validations to the pipeline\n\nYou can add any type of CodePipeline Action to the pipeline in order to validate\nthe deployments you are performing.\n\nThe CDK Pipelines construct library comes with a `ShellScriptAction` which uses AWS CodeBuild\nto run a set of shell commands (potentially running a test set that comes with your application,\nusing stack outputs of the deployed stacks).\n\nIn its simplest form, adding validation actions looks like this:\n\n```ts\nconst stage = pipeline.addApplicationStage(new MyApplication(/* ... */));\n\nstage.addActions(new ShellScriptAction({\n  actionName: 'MyValidation',\n  commands: ['curl -Ssf https://my.webservice.com/'],\n  // Optionally specify a VPC if, for example, the service is deployed with a private load balancer\n  vpc,\n  // Optionally specify SecurityGroups\n  securityGroups,\n  // Optionally specify a BuildEnvironment\n  environment,\n}));\n```\n\n### Using CloudFormation Stack Outputs in ShellScriptAction\n\nBecause many CloudFormation deployments result in the generation of resources with unpredictable\nnames, validations have support for reading back CloudFormation Outputs after a deployment. This\nmakes it possible to pass (for example) the generated URL of a load balancer to the test set.\n\nTo use Stack Outputs, expose the `CfnOutput` object you're interested in, and\ncall `pipeline.stackOutput()` on it:\n\n```ts\nclass MyLbApplication extends Stage {\n  public readonly loadBalancerAddress: CfnOutput;\n\n  constructor(scope: Construct, id: string, props?: StageProps) {\n    super(scope, id, props);\n\n    const lbStack = new LoadBalancerStack(this, 'Stack');\n\n    // Or create this in `LoadBalancerStack` directly\n    this.loadBalancerAddress = new CfnOutput(lbStack, 'LbAddress', {\n      value: `https://${lbStack.loadBalancer.loadBalancerDnsName}/`\n    });\n  }\n}\n\nconst lbApp = new MyLbApplication(this, 'MyApp', {\n  env: { /* ... */ }\n});\nconst stage = pipeline.addApplicationStage(lbApp);\nstage.addActions(new ShellScriptAction({\n  // ...\n  useOutputs: {\n    // When the test is executed, this will make $URL contain the\n    // load balancer address.\n    URL: pipeline.stackOutput(lbApp.loadBalancerAddress),\n  }\n});\n```\n\n### Using additional files in Shell Script Actions\n\nAs part of a validation, you probably want to run a test suite that's more\nelaborate than what can be expressed in a couple of lines of shell script.\nYou can bring additional files into the shell script validation by supplying\nthe `additionalArtifacts` property.\n\nHere are some typical examples for how you might want to bring in additional\nfiles from several sources:\n\n* Directoy from the source repository\n* Additional compiled artifacts from the synth step\n\n### Controlling IAM permissions\n\nIAM permissions can be added to the execution role of a `ShellScriptAction` in\ntwo ways.\n\nEither pass additional policy statements in the `rolePolicyStatements` property:\n\n```ts\nnew ShellScriptAction({\n  // ...\n  rolePolicyStatements: [\n    new iam.PolicyStatement({\n      actions: ['s3:GetObject'],\n      resources: ['*'],\n    }),\n  ],\n}));\n```\n\nThe Action can also be used as a Grantable after having been added to a Pipeline:\n\n```ts\nconst action = new ShellScriptAction({ /* ... */ });\npipeline.addStage('Test').addActions(action);\n\nbucket.grantRead(action);\n```\n\n#### Additional files from the source repository\n\nBringing in additional files from the source repository is appropriate if the\nfiles in the source repository are directly usable in the test (for example,\nif they are executable shell scripts themselves). Pass the `sourceArtifact`:\n\n```ts\nconst sourceArtifact = new codepipeline.Artifact();\n\nconst pipeline = new CdkPipeline(this, 'Pipeline', {\n  // ...\n});\n\nconst validationAction = new ShellScriptAction({\n  actionName: 'TestUsingSourceArtifact',\n  additionalArtifacts: [sourceArtifact],\n\n  // 'test.sh' comes from the source repository\n  commands: ['./test.sh'],\n});\n```\n\n#### Additional files from the synth step\n\nGetting the additional files from the synth step is appropriate if your\ntests need the compilation step that is done as part of synthesis.\n\nOn the synthesis step, specify `additionalArtifacts` to package\nadditional subdirectories into artifacts, and use the same artifact\nin the `ShellScriptAction`'s `additionalArtifacts`:\n\n```ts\n// If you are using additional output artifacts from the synth step,\n// they must be named.\nconst cloudAssemblyArtifact = new codepipeline.Artifact('CloudAsm');\nconst integTestsArtifact = new codepipeline.Artifact('IntegTests');\n\nconst pipeline = new CdkPipeline(this, 'Pipeline', {\n  synthAction: SimpleSynthAction.standardNpmSynth({\n    sourceArtifact,\n    cloudAssemblyArtifact,\n    buildCommands: ['npm run build'],\n    additionalArtifacts: [\n      {\n        directory: 'test',\n        artifact: integTestsArtifact,\n      }\n    ],\n  }),\n  // ...\n});\n\nconst validationAction = new ShellScriptAction({\n  actionName: 'TestUsingBuildArtifact',\n  additionalArtifacts: [integTestsArtifact],\n  // 'test.js' was produced from 'test/test.ts' during the synth step\n  commands: ['node ./test.js'],\n});\n```\n\n#### Add Additional permissions to the CodeBuild Project Role for building and synthing\n\nYou can customize the role permissions used by the CodeBuild project so it has access to\nthe needed resources. eg: Adding CodeArtifact repo permissions so we pull npm packages\nfrom the CA repo instead of NPM.\n\n```ts\nclass MyPipelineStack extends Stack {\n  constructor(scope: Construct, id: string, props?: StackProps) {\n    ...\n    const pipeline = new CdkPipeline(this, 'Pipeline', {\n      ...\n      synthAction: SimpleSynthAction.standardNpmSynth({\n        sourceArtifact,\n        cloudAssemblyArtifact,\n\n        // Use this to customize and a permissions required for the build\n        // and synth\n        rolePolicyStatements: [\n          new PolicyStatement({\n            actions: ['codeartifact:*', 'sts:GetServiceBearerToken'],\n            resources: ['arn:codeartifact:repo:arn'],\n          }),\n        ],\n\n        // Then you can login to codeartifact repository\n        // and npm will now pull packages from your repository\n        // Note the codeartifact login command requires more params to work.\n        buildCommands: [\n          'aws codeartifact login --tool npm',\n          'npm run build',\n        ],\n      }),\n    });\n  }\n}\n```\n\n### Developing the pipeline\n\nThe self-mutation feature of the `CdkPipeline` might at times get in the way\nof the pipeline development workflow. Each change to the pipeline must be pushed\nto git, otherwise, after the pipeline was updated using `cdk deploy`, it will\nautomatically revert to the state found in git.\n\nTo make the development more convenient, the self-mutation feature can be turned\noff temporarily, by passing `selfMutating: false` property, example:\n\n```ts\nconst pipeline = new CdkPipeline(this, 'Pipeline', {\n  selfMutating: false,\n  ...\n});\n```\n\n\n## CDK Environment Bootstrapping\n\nAn *environment* is an *(account, region)* pair where you want to deploy a\nCDK stack (see\n[Environments](https://docs.aws.amazon.com/cdk/latest/guide/environments.html)\nin the CDK Developer Guide). In a Continuous Deployment pipeline, there are\nat least two environments involved: the environment where the pipeline is\nprovisioned, and the environment where you want to deploy the application (or\ndifferent stages of the application). These can be the same, though best\npractices recommend you isolate your different application stages from each\nother in different AWS accounts or regions.\n\nBefore you can provision the pipeline, you have to *bootstrap* the environment you want\nto create it in. If you are deploying your application to different environments, you\nalso have to bootstrap those and be sure to add a *trust* relationship.\n\n> This library requires a newer version of the bootstrapping stack which has\n> been updated specifically to support cross-account continous delivery. In the future,\n> this new bootstrapping stack will become the default, but for now it is still\n> opt-in.\n>\n> The commands below assume you are running `cdk bootstrap` in a directory\n> where `cdk.json` contains the `\"@aws-cdk/core:newStyleStackSynthesis\": true`\n> setting in its context, which will switch to the new bootstrapping stack\n> automatically.\n>\n> If run from another directory, be sure to run the bootstrap command with\n> the environment variable `CDK_NEW_BOOTSTRAP=1` set.\n\nTo bootstrap an environment for provisioning the pipeline:\n\n```console\n$ env CDK_NEW_BOOTSTRAP=1 npx cdk bootstrap \\\n    [--profile admin-profile-1] \\\n    --cloudformation-execution-policies arn:aws:iam::aws:policy/AdministratorAccess \\\n    aws://111111111111/us-east-1\n```\n\nTo bootstrap a different environment for deploying CDK applications into using\na pipeline in account `111111111111`:\n\n```console\n$ env CDK_NEW_BOOTSTRAP=1 npx cdk bootstrap \\\n    [--profile admin-profile-2] \\\n    --cloudformation-execution-policies arn:aws:iam::aws:policy/AdministratorAccess \\\n    --trust 11111111111 \\\n    aws://222222222222/us-east-2\n```\n\nThese command lines explained:\n\n* `npx`: means to use the CDK CLI from the current NPM install. If you are using\n  a global install of the CDK CLI, leave this out.\n* `--profile`: should indicate a profile with administrator privileges that has\n  permissions to provision a pipeline in the indicated account. You can leave this\n  flag out if either the AWS default credentials or the `AWS_*` environment\n  variables confer these permissions.\n* `--cloudformation-execution-policies`: ARN of the managed policy that future CDK\n  deployments should execute with. You can tailor this to the needs of your organization\n  and give more constrained permissions than `AdministratorAccess`.\n* `--trust`: indicates which other account(s) should have permissions to deploy\n  CDK applications into this account. In this case we indicate the Pipeline's account,\n  but you could also use this for developer accounts (don't do that for production\n  application accounts though!).\n* `aws://222222222222/us-east-2`: the account and region we're bootstrapping.\n\n> **Security tip**: we recommend that you use administrative credentials to an\n> account only to bootstrap it and provision the initial pipeline. Otherwise,\n> access to administrative credentials should be dropped as soon as possible.\n\n<br>\n\n> **On the use of AdministratorAccess**: The use of the `AdministratorAccess` policy\n> ensures that your pipeline can deploy every type of AWS resource to your account.\n> Make sure you trust all the code and dependencies that make up your CDK app.\n> Check with the appropriate department within your organization to decide on the\n> proper policy to use.\n\n### Migrating from old bootstrap stack\n\nThe bootstrap stack is a CloudFormation stack in your account named\n**CDKToolkit** that provisions a set of resources required for the CDK\nto deploy into that environment.\n\nThe \"new\" bootstrap stack (obtained by running `cdk bootstrap` with\n`CDK_NEW_BOOTSTRAP=1`) is slightly more elaborate than the \"old\" stack. It\ncontains:\n\n* An S3 bucket and ECR repository with predictable names, so that we can reference\n  assets in these storage locations *without* the use of CloudFormation template\n  parameters.\n* A set of roles with permissions to access these asset locations and to execute\n  CloudFormation, assumeable from whatever accounts you specify under `--trust`.\n\nIt is possible and safe to migrate from the old bootstrap stack to the new\nbootstrap stack. This will create a new S3 file asset bucket in your account\nand orphan the old bucket. You should manually delete the orphaned bucket\nafter you are sure you have redeployed all CDK applications and there are no\nmore references to the old asset bucket.\n\n## Security Tips\n\nIt's important to stay safe while employing Continuous Delivery. The CDK Pipelines\nlibrary comes with secure defaults to the best of our ability, but by its\nvery nature the library cannot take care of everything.\n\nWe therefore expect you to mind the following:\n\n* Maintain dependency hygiene and vet 3rd-party software you use. Any software you\n  run on your build machine has the ability to change the infrastructure that gets\n  deployed. Be careful with the software you depend on.\n\n* Use dependency locking to prevent accidental upgrades! The default `CdkSynths` that\n  come with CDK Pipelines will expect `package-lock.json` and `yarn.lock` to\n  ensure your dependencies are the ones you expect.\n\n* Credentials to production environments should be short-lived. After\n  bootstrapping and the initial pipeline provisioning, there is no more need for\n  developers to have access to any of the account credentials; all further\n  changes can be deployed through git. Avoid the chances of credentials leaking\n  by not having them in the first place!\n\n## Troubleshooting\n\nHere are some common errors you may encounter while using this library.\n\n### Pipeline: Internal Failure\n\nIf you see the following error during deployment of your pipeline:\n\n```plaintext\nCREATE_FAILED  | AWS::CodePipeline::Pipeline | Pipeline/Pipeline\nInternal Failure\n```\n\nThere's something wrong with your GitHub access token. It might be missing, or not have the\nright permissions to access the repository you're trying to access.\n\n### Key: Policy contains a statement with one or more invalid principals\n\nIf you see the following error during deployment of your pipeline:\n\n```plaintext\nCREATE_FAILED | AWS::KMS::Key | Pipeline/Pipeline/ArtifactsBucketEncryptionKey\nPolicy contains a statement with one or more invalid principals.\n```\n\nOne of the target (account, region) environments has not been bootstrapped\nwith the new bootstrap stack. Check your target environments and make sure\nthey are all bootstrapped.\n\n### <Stack> is in ROLLBACK_COMPLETE state and can not be updated\n\nIf  you see the following error during execution of your pipeline:\n\n```plaintext\nStack ... is in ROLLBACK_COMPLETE state and can not be updated. (Service:\nAmazonCloudFormation; Status Code: 400; Error Code: ValidationError; Request\nID: ...)\n```\n\nThe stack failed its previous deployment, and is in a non-retryable state.\nGo into the CloudFormation console, delete the stack, and retry the deployment.\n\n## Current Limitations\n\nLimitations that we are aware of and will address:\n\n* **No context queries**: context queries are not supported. That means that\n  Vpc.fromLookup() and other functions like it will not work [#8905](https://github.com/aws/aws-cdk/issues/8905).\n\n## Known Issues\n\nThere are some usability issues that are caused by underlying technology, and\ncannot be remedied by CDK at this point. They are reproduced here for completeness.\n\n* **Console links to other accounts will not work**: the AWS CodePipeline\n  console will assume all links are relative to the current account. You will\n  not be able to use the pipeline console to click through to a CloudFormation\n  stack in a different account.\n* **If a change set failed to apply the pipeline must restarted**: if a change\n  set failed to apply, it cannot be retried. The pipeline must be restarted from\n  the top by clicking **Release Change**.\n* **A stack that failed to create must be deleted manually**: if a stack\n  failed to create on the first attempt, you must delete it using the\n  CloudFormation console before starting the pipeline again by clicking\n  **Release Change**.\n"
  },
  "repository": {
    "directory": "packages/@aws-cdk/pipelines",
    "type": "git",
    "url": "https://github.com/aws/aws-cdk.git"
  },
  "schema": "jsii/0.10.0",
  "targets": {
    "dotnet": {
      "iconUrl": "https://raw.githubusercontent.com/aws/aws-cdk/master/logo/default-256-dark.png",
      "namespace": "Amazon.CDK.Pipelines",
      "packageId": "Amazon.CDK.Pipelines"
    },
    "java": {
      "maven": {
        "artifactId": "cdk-pipelines",
        "groupId": "software.amazon.awscdk"
      },
      "package": "software.amazon.awscdk.pipelines"
    },
    "js": {
      "npm": "@aws-cdk/pipelines"
    },
    "python": {
      "classifiers": [
        "Framework :: AWS CDK",
        "Framework :: AWS CDK :: 1"
      ],
      "distName": "aws-cdk.pipelines",
      "module": "aws_cdk.pipelines"
    }
  },
  "types": {
    "@aws-cdk/pipelines.AddManualApprovalOptions": {
      "assembly": "@aws-cdk/pipelines",
      "datatype": true,
      "docs": {
        "stability": "experimental",
        "summary": "Options for addManualApproval."
      },
      "fqn": "@aws-cdk/pipelines.AddManualApprovalOptions",
      "kind": "interface",
      "locationInModule": {
        "filename": "lib/stage.ts",
        "line": 389
      },
      "name": "AddManualApprovalOptions",
      "properties": [
        {
          "abstract": true,
          "docs": {
            "default": "'ManualApproval' with a rolling counter",
            "stability": "experimental",
            "summary": "The name of the manual approval action."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/stage.ts",
            "line": 395
          },
          "name": "actionName",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "- The next sequential runOrder",
            "stability": "experimental",
            "summary": "The runOrder for this action."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/stage.ts",
            "line": 402
          },
          "name": "runOrder",
          "optional": true,
          "type": {
            "primitive": "number"
          }
        }
      ]
    },
    "@aws-cdk/pipelines.AddStackOptions": {
      "assembly": "@aws-cdk/pipelines",
      "datatype": true,
      "docs": {
        "stability": "experimental",
        "summary": "Additional options for adding a stack deployment."
      },
      "fqn": "@aws-cdk/pipelines.AddStackOptions",
      "kind": "interface",
      "locationInModule": {
        "filename": "lib/stage.ts",
        "line": 273
      },
      "name": "AddStackOptions",
      "properties": [
        {
          "abstract": true,
          "docs": {
            "default": "- runOrder + 1",
            "stability": "experimental",
            "summary": "Base runorder."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/stage.ts",
            "line": 286
          },
          "name": "executeRunOrder",
          "optional": true,
          "type": {
            "primitive": "number"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "- Next sequential runorder",
            "stability": "experimental",
            "summary": "Base runorder."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/stage.ts",
            "line": 279
          },
          "name": "runOrder",
          "optional": true,
          "type": {
            "primitive": "number"
          }
        }
      ]
    },
    "@aws-cdk/pipelines.AddStageOptions": {
      "assembly": "@aws-cdk/pipelines",
      "datatype": true,
      "docs": {
        "stability": "experimental",
        "summary": "Options for adding an application stage to a pipeline."
      },
      "fqn": "@aws-cdk/pipelines.AddStageOptions",
      "kind": "interface",
      "locationInModule": {
        "filename": "lib/stage.ts",
        "line": 365
      },
      "name": "AddStageOptions",
      "properties": [
        {
          "abstract": true,
          "docs": {
            "default": "0",
            "remarks": "You can use this to make extra room in the runOrder sequence between the\nchangeset 'prepare' and 'execute' actions and insert your own actions there.",
            "stability": "experimental",
            "summary": "Add room for extra actions."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/stage.ts",
            "line": 383
          },
          "name": "extraRunOrderSpace",
          "optional": true,
          "type": {
            "primitive": "number"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "false",
            "remarks": "This gives humans the opportunity to confirm the change set looks alright\nbefore deploying it.",
            "stability": "experimental",
            "summary": "Add manual approvals before executing change sets."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/stage.ts",
            "line": 374
          },
          "name": "manualApprovals",
          "optional": true,
          "type": {
            "primitive": "boolean"
          }
        }
      ]
    },
    "@aws-cdk/pipelines.AdditionalArtifact": {
      "assembly": "@aws-cdk/pipelines",
      "datatype": true,
      "docs": {
        "stability": "experimental",
        "summary": "Specification of an additional artifact to generate."
      },
      "fqn": "@aws-cdk/pipelines.AdditionalArtifact",
      "kind": "interface",
      "locationInModule": {
        "filename": "lib/synths/simple-synth-action.ts",
        "line": 182
      },
      "name": "AdditionalArtifact",
      "properties": [
        {
          "abstract": true,
          "docs": {
            "stability": "experimental",
            "summary": "Artifact to represent the build directory in the pipeline."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/synths/simple-synth-action.ts",
            "line": 191
          },
          "name": "artifact",
          "type": {
            "fqn": "@aws-cdk/aws-codepipeline.Artifact"
          }
        },
        {
          "abstract": true,
          "docs": {
            "stability": "experimental",
            "summary": "Directory to be packaged."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/synths/simple-synth-action.ts",
            "line": 186
          },
          "name": "directory",
          "type": {
            "primitive": "string"
          }
        }
      ]
    },
    "@aws-cdk/pipelines.AssetPublishingCommand": {
      "assembly": "@aws-cdk/pipelines",
      "datatype": true,
      "docs": {
        "stability": "experimental",
        "summary": "Instructions to publish certain assets."
      },
      "fqn": "@aws-cdk/pipelines.AssetPublishingCommand",
      "kind": "interface",
      "locationInModule": {
        "filename": "lib/stage.ts",
        "line": 340
      },
      "name": "AssetPublishingCommand",
      "properties": [
        {
          "abstract": true,
          "docs": {
            "stability": "experimental",
            "summary": "Asset identifier."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/stage.ts",
            "line": 349
          },
          "name": "assetId",
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "stability": "experimental",
            "summary": "Asset manifest path."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/stage.ts",
            "line": 344
          },
          "name": "assetManifestPath",
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "stability": "experimental",
            "summary": "Asset selector to pass to `cdk-assets`."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/stage.ts",
            "line": 354
          },
          "name": "assetSelector",
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "stability": "experimental",
            "summary": "Type of asset to publish."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/stage.ts",
            "line": 359
          },
          "name": "assetType",
          "type": {
            "fqn": "@aws-cdk/pipelines.AssetType"
          }
        }
      ]
    },
    "@aws-cdk/pipelines.AssetType": {
      "assembly": "@aws-cdk/pipelines",
      "docs": {
        "stability": "experimental",
        "summary": "Type of the asset that is being published."
      },
      "fqn": "@aws-cdk/pipelines.AssetType",
      "kind": "enum",
      "locationInModule": {
        "filename": "lib/actions/publish-assets-action.ts",
        "line": 18
      },
      "members": [
        {
          "docs": {
            "stability": "experimental",
            "summary": "A file."
          },
          "name": "FILE"
        },
        {
          "docs": {
            "stability": "experimental",
            "summary": "A Docker image."
          },
          "name": "DOCKER_IMAGE"
        }
      ],
      "name": "AssetType"
    },
    "@aws-cdk/pipelines.CdkPipeline": {
      "assembly": "@aws-cdk/pipelines",
      "base": "@aws-cdk/core.Construct",
      "docs": {
        "remarks": "Defines an AWS CodePipeline-based Pipeline to deploy CDK applications.\n\nAutomatically manages the following:\n\n- Stack dependency order.\n- Asset publishing.\n- Keeping the pipeline up-to-date as the CDK apps change.\n- Using stack outputs later on in the pipeline.",
        "stability": "experimental",
        "summary": "A Pipeline to deploy CDK apps."
      },
      "fqn": "@aws-cdk/pipelines.CdkPipeline",
      "initializer": {
        "docs": {
          "stability": "experimental"
        },
        "locationInModule": {
          "filename": "lib/pipeline.ts",
          "line": 143
        },
        "parameters": [
          {
            "name": "scope",
            "type": {
              "fqn": "constructs.Construct"
            }
          },
          {
            "name": "id",
            "type": {
              "primitive": "string"
            }
          },
          {
            "name": "props",
            "type": {
              "fqn": "@aws-cdk/pipelines.CdkPipelineProps"
            }
          }
        ]
      },
      "kind": "class",
      "locationInModule": {
        "filename": "lib/pipeline.ts",
        "line": 136
      },
      "methods": [
        {
          "docs": {
            "remarks": "The application construct should subclass `Stage` and can contain any\nnumber of `Stacks` inside it that may have dependency relationships\non one another.\n\nAll stacks in the application will be deployed in the appropriate order,\nand all assets found in the application will be added to the asset\npublishing stage.",
            "stability": "experimental",
            "summary": "Add pipeline stage that will deploy the given application stage."
          },
          "locationInModule": {
            "filename": "lib/pipeline.ts",
            "line": 247
          },
          "name": "addApplicationStage",
          "parameters": [
            {
              "name": "appStage",
              "type": {
                "fqn": "@aws-cdk/core.Stage"
              }
            },
            {
              "name": "options",
              "optional": true,
              "type": {
                "fqn": "@aws-cdk/pipelines.AddStageOptions"
              }
            }
          ],
          "returns": {
            "type": {
              "fqn": "@aws-cdk/pipelines.CdkStage"
            }
          }
        },
        {
          "docs": {
            "remarks": "Prefer to use `addApplicationStage` if you are intended to deploy a CDK\napplication, but you can use this method if you want to add other kinds of\nActions to a pipeline.",
            "stability": "experimental",
            "summary": "Add a new, empty stage to the pipeline."
          },
          "locationInModule": {
            "filename": "lib/pipeline.ts",
            "line": 260
          },
          "name": "addStage",
          "parameters": [
            {
              "name": "stageName",
              "type": {
                "primitive": "string"
              }
            }
          ],
          "returns": {
            "type": {
              "fqn": "@aws-cdk/pipelines.CdkStage"
            }
          }
        },
        {
          "docs": {
            "remarks": "`StackOutput` can be used in validation actions later in the pipeline.",
            "stability": "experimental",
            "summary": "Get the StackOutput object that holds this CfnOutput's value in this pipeline."
          },
          "locationInModule": {
            "filename": "lib/pipeline.ts",
            "line": 283
          },
          "name": "stackOutput",
          "parameters": [
            {
              "name": "cfnOutput",
              "type": {
                "fqn": "@aws-cdk/core.CfnOutput"
              }
            }
          ],
          "returns": {
            "type": {
              "fqn": "@aws-cdk/pipelines.StackOutput"
            }
          }
        },
        {
          "docs": {
            "remarks": "You can use this to add more Actions to a stage.",
            "stability": "experimental",
            "summary": "Access one of the pipeline's stages by stage name."
          },
          "locationInModule": {
            "filename": "lib/pipeline.ts",
            "line": 232
          },
          "name": "stage",
          "parameters": [
            {
              "name": "stageName",
              "type": {
                "primitive": "string"
              }
            }
          ],
          "returns": {
            "type": {
              "fqn": "@aws-cdk/aws-codepipeline.IStage"
            }
          }
        },
        {
          "docs": {
            "remarks": "Our own convenience methods will never generate a pipeline that does that (although\nthis is a nice verification), but a user can also add the stacks by hand.",
            "stability": "experimental",
            "summary": "Validate that we don't have any stacks violating dependency order in the pipeline."
          },
          "locationInModule": {
            "filename": "lib/pipeline.ts",
            "line": 301
          },
          "name": "validate",
          "overrides": "@aws-cdk/core.Construct",
          "protected": true,
          "returns": {
            "type": {
              "collection": {
                "elementtype": {
                  "primitive": "string"
                },
                "kind": "array"
              }
            }
          }
        }
      ],
      "name": "CdkPipeline",
      "properties": [
        {
          "docs": {
            "remarks": "You can use this to add more Stages to the pipeline, or Actions\nto Stages.",
            "stability": "experimental",
            "summary": "The underlying CodePipeline object."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/pipeline.ts",
            "line": 223
          },
          "name": "codePipeline",
          "type": {
            "fqn": "@aws-cdk/aws-codepipeline.Pipeline"
          }
        }
      ]
    },
    "@aws-cdk/pipelines.CdkPipelineProps": {
      "assembly": "@aws-cdk/pipelines",
      "datatype": true,
      "docs": {
        "stability": "experimental",
        "summary": "Properties for a CdkPipeline."
      },
      "fqn": "@aws-cdk/pipelines.CdkPipelineProps",
      "kind": "interface",
      "locationInModule": {
        "filename": "lib/pipeline.ts",
        "line": 18
      },
      "name": "CdkPipelineProps",
      "properties": [
        {
          "abstract": true,
          "docs": {
            "stability": "experimental",
            "summary": "The artifact you have defined to be the artifact to hold the cloudAssemblyArtifact for the synth action."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/pipeline.ts",
            "line": 36
          },
          "name": "cloudAssemblyArtifact",
          "type": {
            "fqn": "@aws-cdk/aws-codepipeline.Artifact"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "- Latest version",
            "remarks": "Some Actions in the pipeline will download and run a version of the CDK\nCLI. Specify the version here.",
            "stability": "experimental",
            "summary": "CDK CLI version to use in pipeline."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/pipeline.ts",
            "line": 91
          },
          "name": "cdkCliVersion",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "- A new CodePipeline is automatically generated",
            "remarks": "Use this if you want more control over the CodePipeline that gets created.\nYou can choose to not pass this value, in which case a new CodePipeline is\ncreated with default settings.\n\nIf you pass an existing CodePipeline, it should should have been created\nwith `restartExecutionOnUpdate: true`.\n\n[disable-awslint:ref-via-interface]",
            "stability": "experimental",
            "summary": "Existing CodePipeline to add deployment stages to."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/pipeline.ts",
            "line": 52
          },
          "name": "codePipeline",
          "optional": true,
          "type": {
            "fqn": "@aws-cdk/aws-codepipeline.Pipeline"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "true",
            "remarks": "This controls whether the pipeline is enabled for cross-account deployments.\n\nCan only be set if `codePipeline` is not set.\n\nBy default cross-account deployments are enabled, but this feature requires\nthat KMS Customer Master Keys are created which have a cost of $1/month.\n\nIf you do not need cross-account deployments, you can set this to `false` to\nnot create those keys and save on that cost (the artifact bucket will be\nencrypted with an AWS-managed key). However, cross-account deployments will\nno longer be possible.",
            "stability": "experimental",
            "summary": "Create KMS keys for cross-account deployments."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/pipeline.ts",
            "line": 80
          },
          "name": "crossAccountKeys",
          "optional": true,
          "type": {
            "primitive": "boolean"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "- A name is automatically generated",
            "remarks": "Can only be set if `codePipeline` is not set.",
            "stability": "experimental",
            "summary": "Name of the pipeline."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/pipeline.ts",
            "line": 61
          },
          "name": "pipelineName",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "true",
            "remarks": "This needs to be set to `true` to allow the pipeline to reconfigure\nitself when assets or stages are being added to it, and `true` is the\nrecommended setting.\n\nYou can temporarily set this to `false` while you are iterating\non the pipeline itself and prefer to deploy changes using `cdk deploy`.",
            "stability": "experimental",
            "summary": "Whether the pipeline will update itself."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/pipeline.ts",
            "line": 121
          },
          "name": "selfMutating",
          "optional": true,
          "type": {
            "primitive": "boolean"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "- Required unless `codePipeline` is given",
            "stability": "experimental",
            "summary": "The CodePipeline action used to retrieve the CDK app's source."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/pipeline.ts",
            "line": 24
          },
          "name": "sourceAction",
          "optional": true,
          "type": {
            "fqn": "@aws-cdk/aws-codepipeline.IAction"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "- All private subnets.",
            "remarks": "Only used if 'vpc' is supplied.",
            "stability": "experimental",
            "summary": "Which subnets to use."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/pipeline.ts",
            "line": 107
          },
          "name": "subnetSelection",
          "optional": true,
          "type": {
            "fqn": "@aws-cdk/aws-ec2.SubnetSelection"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "- Required unless `codePipeline` or `sourceAction` is given",
            "stability": "experimental",
            "summary": "The CodePipeline action build and synthesis step of the CDK app."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/pipeline.ts",
            "line": 31
          },
          "name": "synthAction",
          "optional": true,
          "type": {
            "fqn": "@aws-cdk/aws-codepipeline.IAction"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "- No VPC",
            "stability": "experimental",
            "summary": "The VPC where to execute the CdkPipeline actions."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/pipeline.ts",
            "line": 98
          },
          "name": "vpc",
          "optional": true,
          "type": {
            "fqn": "@aws-cdk/aws-ec2.IVpc"
          }
        }
      ]
    },
    "@aws-cdk/pipelines.CdkStackActionFromArtifactOptions": {
      "assembly": "@aws-cdk/pipelines",
      "datatype": true,
      "docs": {
        "stability": "experimental",
        "summary": "Options for the 'fromStackArtifact' operation."
      },
      "fqn": "@aws-cdk/pipelines.CdkStackActionFromArtifactOptions",
      "interfaces": [
        "@aws-cdk/pipelines.DeployCdkStackActionOptions"
      ],
      "kind": "interface",
      "locationInModule": {
        "filename": "lib/actions/deploy-cdk-stack-action.ts",
        "line": 133
      },
      "name": "CdkStackActionFromArtifactOptions",
      "properties": [
        {
          "abstract": true,
          "docs": {
            "default": "- Same as stack artifact",
            "stability": "experimental",
            "summary": "The name of the stack that should be created/updated."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/actions/deploy-cdk-stack-action.ts",
            "line": 139
          },
          "name": "stackName",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        }
      ]
    },
    "@aws-cdk/pipelines.CdkStage": {
      "assembly": "@aws-cdk/pipelines",
      "base": "@aws-cdk/core.Construct",
      "docs": {
        "remarks": "You don't need to instantiate this class directly. Use\n`cdkPipeline.addStage()` instead.",
        "stability": "experimental",
        "summary": "Stage in a CdkPipeline."
      },
      "fqn": "@aws-cdk/pipelines.CdkStage",
      "initializer": {
        "docs": {
          "stability": "experimental"
        },
        "locationInModule": {
          "filename": "lib/stage.ts",
          "line": 55
        },
        "parameters": [
          {
            "name": "scope",
            "type": {
              "fqn": "constructs.Construct"
            }
          },
          {
            "name": "id",
            "type": {
              "primitive": "string"
            }
          },
          {
            "name": "props",
            "type": {
              "fqn": "@aws-cdk/pipelines.CdkStageProps"
            }
          }
        ]
      },
      "kind": "class",
      "locationInModule": {
        "filename": "lib/stage.ts",
        "line": 45
      },
      "methods": [
        {
          "docs": {
            "remarks": "You need to make sure it is created with the right runOrder. Call `nextSequentialRunOrder()`\nfor every action to get actions to execute in sequence.",
            "stability": "experimental",
            "summary": "Add one or more CodePipeline Actions."
          },
          "locationInModule": {
            "filename": "lib/stage.ts",
            "line": 156
          },
          "name": "addActions",
          "parameters": [
            {
              "name": "actions",
              "type": {
                "fqn": "@aws-cdk/aws-codepipeline.IAction"
              },
              "variadic": true
            }
          ],
          "variadic": true
        },
        {
          "docs": {
            "remarks": "The application construct should subclass `Stage` and can contain any\nnumber of `Stacks` inside it that may have dependency relationships\non one another.\n\nAll stacks in the application will be deployed in the appropriate order,\nand all assets found in the application will be added to the asset\npublishing stage.",
            "stability": "experimental",
            "summary": "Add all stacks in the application Stage to this stage."
          },
          "locationInModule": {
            "filename": "lib/stage.ts",
            "line": 77
          },
          "name": "addApplication",
          "parameters": [
            {
              "name": "appStage",
              "type": {
                "fqn": "@aws-cdk/core.Stage"
              }
            },
            {
              "name": "options",
              "optional": true,
              "type": {
                "fqn": "@aws-cdk/pipelines.AddStageOptions"
              }
            }
          ]
        },
        {
          "docs": {
            "remarks": "If you need more flexibility than what this method offers,\nuse `addAction` with a `ManualApprovalAction`.",
            "stability": "experimental",
            "summary": "Add a manual approval action."
          },
          "locationInModule": {
            "filename": "lib/stage.ts",
            "line": 137
          },
          "name": "addManualApprovalAction",
          "parameters": [
            {
              "name": "options",
              "optional": true,
              "type": {
                "fqn": "@aws-cdk/pipelines.AddManualApprovalOptions"
              }
            }
          ]
        },
        {
          "docs": {
            "stability": "experimental",
            "summary": "Add a deployment action based on a stack artifact."
          },
          "locationInModule": {
            "filename": "lib/stage.ts",
            "line": 113
          },
          "name": "addStackArtifactDeployment",
          "parameters": [
            {
              "name": "stackArtifact",
              "type": {
                "fqn": "@aws-cdk/cx-api.CloudFormationStackArtifact"
              }
            },
            {
              "name": "options",
              "optional": true,
              "type": {
                "fqn": "@aws-cdk/pipelines.AddStackOptions"
              }
            }
          ]
        },
        {
          "docs": {
            "stability": "experimental",
            "summary": "Whether this Stage contains an action to deploy the given stack, identified by its artifact ID."
          },
          "locationInModule": {
            "filename": "lib/stage.ts",
            "line": 178
          },
          "name": "deploysStack",
          "parameters": [
            {
              "name": "artifactId",
              "type": {
                "primitive": "string"
              }
            }
          ],
          "returns": {
            "type": {
              "primitive": "boolean"
            }
          }
        },
        {
          "docs": {
            "remarks": "FIXME: This is here because Actions are immutable and can't be reordered\nafter creation, nor is there a way to specify relative priorities, which\nis a limitation that we should take away in the base library.",
            "stability": "experimental",
            "summary": "Return the runOrder number necessary to run the next Action in sequence with the rest."
          },
          "locationInModule": {
            "filename": "lib/stage.ts",
            "line": 169
          },
          "name": "nextSequentialRunOrder",
          "parameters": [
            {
              "name": "count",
              "optional": true,
              "type": {
                "primitive": "number"
              }
            }
          ],
          "returns": {
            "type": {
              "primitive": "number"
            }
          }
        }
      ],
      "name": "CdkStage"
    },
    "@aws-cdk/pipelines.CdkStageProps": {
      "assembly": "@aws-cdk/pipelines",
      "datatype": true,
      "docs": {
        "stability": "experimental",
        "summary": "Construction properties for a CdkStage."
      },
      "fqn": "@aws-cdk/pipelines.CdkStageProps",
      "kind": "interface",
      "locationInModule": {
        "filename": "lib/stage.ts",
        "line": 17
      },
      "name": "CdkStageProps",
      "properties": [
        {
          "abstract": true,
          "docs": {
            "stability": "experimental",
            "summary": "The CodePipeline Artifact with the Cloud Assembly."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/stage.ts",
            "line": 31
          },
          "name": "cloudAssemblyArtifact",
          "type": {
            "fqn": "@aws-cdk/aws-codepipeline.Artifact"
          }
        },
        {
          "abstract": true,
          "docs": {
            "stability": "experimental",
            "summary": "Features the Stage needs from its environment."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/stage.ts",
            "line": 36
          },
          "name": "host",
          "type": {
            "fqn": "@aws-cdk/pipelines.IStageHost"
          }
        },
        {
          "abstract": true,
          "docs": {
            "stability": "experimental",
            "summary": "The underlying Pipeline Stage associated with thisCdkStage."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/stage.ts",
            "line": 26
          },
          "name": "pipelineStage",
          "type": {
            "fqn": "@aws-cdk/aws-codepipeline.IStage"
          }
        },
        {
          "abstract": true,
          "docs": {
            "stability": "experimental",
            "summary": "Name of the stage that should be created."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/stage.ts",
            "line": 21
          },
          "name": "stageName",
          "type": {
            "primitive": "string"
          }
        }
      ]
    },
    "@aws-cdk/pipelines.DeployCdkStackAction": {
      "assembly": "@aws-cdk/pipelines",
      "docs": {
        "remarks": "Adds two CodePipeline Actions to the pipeline: one to create a ChangeSet\nand one to execute it.\n\nYou do not need to instantiate this action yourself -- it will automatically\nbe added by the pipeline when you add stack artifacts or entire stages.",
        "stability": "experimental",
        "summary": "Action to deploy a CDK Stack."
      },
      "fqn": "@aws-cdk/pipelines.DeployCdkStackAction",
      "initializer": {
        "docs": {
          "stability": "experimental"
        },
        "locationInModule": {
          "filename": "lib/actions/deploy-cdk-stack-action.ts",
          "line": 227
        },
        "parameters": [
          {
            "name": "props",
            "type": {
              "fqn": "@aws-cdk/pipelines.DeployCdkStackActionProps"
            }
          }
        ]
      },
      "interfaces": [
        "@aws-cdk/aws-codepipeline.IAction"
      ],
      "kind": "class",
      "locationInModule": {
        "filename": "lib/actions/deploy-cdk-stack-action.ts",
        "line": 151
      },
      "methods": [
        {
          "docs": {
            "stability": "experimental",
            "summary": "Construct a DeployCdkStackAction from a Stack artifact."
          },
          "locationInModule": {
            "filename": "lib/actions/deploy-cdk-stack-action.ts",
            "line": 155
          },
          "name": "fromStackArtifact",
          "parameters": [
            {
              "name": "scope",
              "type": {
                "fqn": "constructs.Construct"
              }
            },
            {
              "name": "artifact",
              "type": {
                "fqn": "@aws-cdk/cx-api.CloudFormationStackArtifact"
              }
            },
            {
              "name": "options",
              "type": {
                "fqn": "@aws-cdk/pipelines.CdkStackActionFromArtifactOptions"
              }
            }
          ],
          "returns": {
            "type": {
              "fqn": "@aws-cdk/pipelines.DeployCdkStackAction"
            }
          },
          "static": true
        },
        {
          "docs": {
            "stability": "experimental",
            "summary": "Exists to implement IAction."
          },
          "locationInModule": {
            "filename": "lib/actions/deploy-cdk-stack-action.ts",
            "line": 269
          },
          "name": "bind",
          "overrides": "@aws-cdk/aws-codepipeline.IAction",
          "parameters": [
            {
              "name": "scope",
              "type": {
                "fqn": "@aws-cdk/core.Construct"
              }
            },
            {
              "name": "stage",
              "type": {
                "fqn": "@aws-cdk/aws-codepipeline.IStage"
              }
            },
            {
              "name": "options",
              "type": {
                "fqn": "@aws-cdk/aws-codepipeline.ActionBindOptions"
              }
            }
          ],
          "returns": {
            "type": {
              "fqn": "@aws-cdk/aws-codepipeline.ActionConfig"
            }
          }
        },
        {
          "docs": {
            "stability": "experimental",
            "summary": "Exists to implement IAction."
          },
          "locationInModule": {
            "filename": "lib/actions/deploy-cdk-stack-action.ts",
            "line": 279
          },
          "name": "onStateChange",
          "overrides": "@aws-cdk/aws-codepipeline.IAction",
          "parameters": [
            {
              "name": "name",
              "type": {
                "primitive": "string"
              }
            },
            {
              "name": "target",
              "optional": true,
              "type": {
                "fqn": "@aws-cdk/aws-events.IRuleTarget"
              }
            },
            {
              "name": "options",
              "optional": true,
              "type": {
                "fqn": "@aws-cdk/aws-events.RuleProps"
              }
            }
          ],
          "returns": {
            "type": {
              "fqn": "@aws-cdk/aws-events.Rule"
            }
          }
        }
      ],
      "name": "DeployCdkStackAction",
      "properties": [
        {
          "docs": {
            "stability": "experimental",
            "summary": "Exists to implement IAction."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/actions/deploy-cdk-stack-action.ts",
            "line": 286
          },
          "name": "actionProperties",
          "overrides": "@aws-cdk/aws-codepipeline.IAction",
          "type": {
            "fqn": "@aws-cdk/aws-codepipeline.ActionProperties"
          }
        },
        {
          "docs": {
            "stability": "experimental",
            "summary": "Artifact ids of the artifact this stack artifact depends on."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/actions/deploy-cdk-stack-action.ts",
            "line": 222
          },
          "name": "dependencyStackArtifactIds",
          "type": {
            "collection": {
              "elementtype": {
                "primitive": "string"
              },
              "kind": "array"
            }
          }
        },
        {
          "docs": {
            "stability": "experimental",
            "summary": "The runorder for the execute action."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/actions/deploy-cdk-stack-action.ts",
            "line": 207
          },
          "name": "executeRunOrder",
          "type": {
            "primitive": "number"
          }
        },
        {
          "docs": {
            "stability": "experimental",
            "summary": "The runorder for the prepare action."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/actions/deploy-cdk-stack-action.ts",
            "line": 202
          },
          "name": "prepareRunOrder",
          "type": {
            "primitive": "number"
          }
        },
        {
          "docs": {
            "stability": "experimental",
            "summary": "Name of the deployed stack."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/actions/deploy-cdk-stack-action.ts",
            "line": 212
          },
          "name": "stackName",
          "type": {
            "primitive": "string"
          }
        },
        {
          "docs": {
            "stability": "experimental",
            "summary": "Artifact id of the artifact this action was based on."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/actions/deploy-cdk-stack-action.ts",
            "line": 217
          },
          "name": "stackArtifactId",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        }
      ]
    },
    "@aws-cdk/pipelines.DeployCdkStackActionOptions": {
      "assembly": "@aws-cdk/pipelines",
      "datatype": true,
      "docs": {
        "stability": "experimental",
        "summary": "Customization options for a DeployCdkStackAction."
      },
      "fqn": "@aws-cdk/pipelines.DeployCdkStackActionOptions",
      "kind": "interface",
      "locationInModule": {
        "filename": "lib/actions/deploy-cdk-stack-action.ts",
        "line": 20
      },
      "name": "DeployCdkStackActionOptions",
      "properties": [
        {
          "abstract": true,
          "docs": {
            "stability": "experimental",
            "summary": "The CodePipeline artifact that holds the Cloud Assembly."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/actions/deploy-cdk-stack-action.ts",
            "line": 31
          },
          "name": "cloudAssemblyInput",
          "type": {
            "fqn": "@aws-cdk/aws-codepipeline.Artifact"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "stackName",
            "stability": "experimental",
            "summary": "Base name of the action."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/actions/deploy-cdk-stack-action.ts",
            "line": 26
          },
          "name": "baseActionName",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "'PipelineChange'",
            "stability": "experimental",
            "summary": "Name of the change set to create and deploy."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/actions/deploy-cdk-stack-action.ts",
            "line": 66
          },
          "name": "changeSetName",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "- prepareRunOrder + 1",
            "stability": "experimental",
            "summary": "Run order for the Execute action."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/actions/deploy-cdk-stack-action.ts",
            "line": 45
          },
          "name": "executeRunOrder",
          "optional": true,
          "type": {
            "primitive": "number"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "- No outputs",
            "stability": "experimental",
            "summary": "Artifact to write Stack Outputs to."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/actions/deploy-cdk-stack-action.ts",
            "line": 52
          },
          "name": "output",
          "optional": true,
          "type": {
            "fqn": "@aws-cdk/aws-codepipeline.Artifact"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "- Required when 'output' is set",
            "stability": "experimental",
            "summary": "Filename in output to write Stack outputs to."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/actions/deploy-cdk-stack-action.ts",
            "line": 59
          },
          "name": "outputFileName",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "1",
            "stability": "experimental",
            "summary": "Run order for the Prepare action."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/actions/deploy-cdk-stack-action.ts",
            "line": 38
          },
          "name": "prepareRunOrder",
          "optional": true,
          "type": {
            "primitive": "number"
          }
        }
      ]
    },
    "@aws-cdk/pipelines.DeployCdkStackActionProps": {
      "assembly": "@aws-cdk/pipelines",
      "datatype": true,
      "docs": {
        "stability": "experimental",
        "summary": "Properties for a DeployCdkStackAction."
      },
      "fqn": "@aws-cdk/pipelines.DeployCdkStackActionProps",
      "interfaces": [
        "@aws-cdk/pipelines.DeployCdkStackActionOptions"
      ],
      "kind": "interface",
      "locationInModule": {
        "filename": "lib/actions/deploy-cdk-stack-action.ts",
        "line": 72
      },
      "name": "DeployCdkStackActionProps",
      "properties": [
        {
          "abstract": true,
          "docs": {
            "remarks": "This controls the account to deploy into",
            "stability": "experimental",
            "summary": "Role for the action to assume."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/actions/deploy-cdk-stack-action.ts",
            "line": 83
          },
          "name": "actionRole",
          "type": {
            "fqn": "@aws-cdk/aws-iam.IRole"
          }
        },
        {
          "abstract": true,
          "docs": {
            "stability": "experimental",
            "summary": "The name of the stack that should be created/updated."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/actions/deploy-cdk-stack-action.ts",
            "line": 88
          },
          "name": "stackName",
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "stability": "experimental",
            "summary": "Relative path of template in the input artifact."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/actions/deploy-cdk-stack-action.ts",
            "line": 76
          },
          "name": "templatePath",
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "- Execute CloudFormation using the action role",
            "stability": "experimental",
            "summary": "Role to execute CloudFormation under."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/actions/deploy-cdk-stack-action.ts",
            "line": 95
          },
          "name": "cloudFormationExecutionRole",
          "optional": true,
          "type": {
            "fqn": "@aws-cdk/aws-iam.IRole"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "- No dependencies",
            "remarks": "Used for pipeline order checking.",
            "stability": "experimental",
            "summary": "Artifact ID for the stacks this stack depends on."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/actions/deploy-cdk-stack-action.ts",
            "line": 120
          },
          "name": "dependencyStackArtifactIds",
          "optional": true,
          "type": {
            "collection": {
              "elementtype": {
                "primitive": "string"
              },
              "kind": "array"
            }
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "- Same region as pipeline",
            "stability": "experimental",
            "summary": "Region to deploy into."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/actions/deploy-cdk-stack-action.ts",
            "line": 102
          },
          "name": "region",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "- Order will not be checked",
            "remarks": "Used for pipeline order checking.",
            "stability": "experimental",
            "summary": "Artifact ID for the stack deployed here."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/actions/deploy-cdk-stack-action.ts",
            "line": 111
          },
          "name": "stackArtifactId",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "- No template configuration",
            "stability": "experimental",
            "summary": "Template configuration path relative to the input artifact."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/actions/deploy-cdk-stack-action.ts",
            "line": 127
          },
          "name": "templateConfigurationPath",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        }
      ]
    },
    "@aws-cdk/pipelines.FromStackArtifactOptions": {
      "assembly": "@aws-cdk/pipelines",
      "datatype": true,
      "docs": {
        "stability": "experimental",
        "summary": "Options for CdkDeployAction.fromStackArtifact."
      },
      "fqn": "@aws-cdk/pipelines.FromStackArtifactOptions",
      "kind": "interface",
      "locationInModule": {
        "filename": "lib/actions/deploy-cdk-stack-action.ts",
        "line": 321
      },
      "name": "FromStackArtifactOptions",
      "properties": [
        {
          "abstract": true,
          "docs": {
            "stability": "experimental",
            "summary": "The CodePipeline artifact that holds the Cloud Assembly."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/actions/deploy-cdk-stack-action.ts",
            "line": 325
          },
          "name": "cloudAssemblyInput",
          "type": {
            "fqn": "@aws-cdk/aws-codepipeline.Artifact"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "- prepareRunOrder + 1",
            "stability": "experimental",
            "summary": "Run order for the Execute action."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/actions/deploy-cdk-stack-action.ts",
            "line": 339
          },
          "name": "executeRunOrder",
          "optional": true,
          "type": {
            "primitive": "number"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "- No outputs",
            "stability": "experimental",
            "summary": "Artifact to write Stack Outputs to."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/actions/deploy-cdk-stack-action.ts",
            "line": 346
          },
          "name": "output",
          "optional": true,
          "type": {
            "fqn": "@aws-cdk/aws-codepipeline.Artifact"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "- Required when 'output' is set",
            "stability": "experimental",
            "summary": "Filename in output to write Stack outputs to."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/actions/deploy-cdk-stack-action.ts",
            "line": 353
          },
          "name": "outputFileName",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "1",
            "stability": "experimental",
            "summary": "Run order for the 2 actions that will be created."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/actions/deploy-cdk-stack-action.ts",
            "line": 332
          },
          "name": "prepareRunOrder",
          "optional": true,
          "type": {
            "primitive": "number"
          }
        }
      ]
    },
    "@aws-cdk/pipelines.IStageHost": {
      "assembly": "@aws-cdk/pipelines",
      "docs": {
        "stability": "experimental",
        "summary": "Features that the Stage needs from its environment."
      },
      "fqn": "@aws-cdk/pipelines.IStageHost",
      "kind": "interface",
      "locationInModule": {
        "filename": "lib/stage.ts",
        "line": 325
      },
      "methods": [
        {
          "abstract": true,
          "docs": {
            "stability": "experimental",
            "summary": "Make sure all the assets from the given manifest are published."
          },
          "locationInModule": {
            "filename": "lib/stage.ts",
            "line": 329
          },
          "name": "publishAsset",
          "parameters": [
            {
              "name": "command",
              "type": {
                "fqn": "@aws-cdk/pipelines.AssetPublishingCommand"
              }
            }
          ]
        },
        {
          "abstract": true,
          "docs": {
            "stability": "experimental",
            "summary": "Return the Artifact the given stack has to emit its outputs into, if any."
          },
          "locationInModule": {
            "filename": "lib/stage.ts",
            "line": 334
          },
          "name": "stackOutputArtifact",
          "parameters": [
            {
              "name": "stackArtifactId",
              "type": {
                "primitive": "string"
              }
            }
          ],
          "returns": {
            "optional": true,
            "type": {
              "fqn": "@aws-cdk/aws-codepipeline.Artifact"
            }
          }
        }
      ],
      "name": "IStageHost"
    },
    "@aws-cdk/pipelines.PublishAssetsAction": {
      "assembly": "@aws-cdk/pipelines",
      "base": "@aws-cdk/core.Construct",
      "docs": {
        "remarks": "Creates a CodeBuild project which will use the CDK CLI\nto prepare and publish the asset.\n\nYou do not need to instantiate this action -- it will automatically\nbe added by the pipeline when you add stacks that use assets.",
        "stability": "experimental",
        "summary": "Action to publish an asset in the pipeline."
      },
      "fqn": "@aws-cdk/pipelines.PublishAssetsAction",
      "initializer": {
        "docs": {
          "stability": "experimental"
        },
        "locationInModule": {
          "filename": "lib/actions/publish-assets-action.ts",
          "line": 100
        },
        "parameters": [
          {
            "name": "scope",
            "type": {
              "fqn": "constructs.Construct"
            }
          },
          {
            "name": "id",
            "type": {
              "primitive": "string"
            }
          },
          {
            "name": "props",
            "type": {
              "fqn": "@aws-cdk/pipelines.PublishAssetsActionProps"
            }
          }
        ]
      },
      "interfaces": [
        "@aws-cdk/aws-codepipeline.IAction"
      ],
      "kind": "class",
      "locationInModule": {
        "filename": "lib/actions/publish-assets-action.ts",
        "line": 96
      },
      "methods": [
        {
          "docs": {
            "remarks": "Manifest path should be relative to the root Cloud Assembly.",
            "stability": "experimental",
            "summary": "Add a single publishing command."
          },
          "locationInModule": {
            "filename": "lib/actions/publish-assets-action.ts",
            "line": 153
          },
          "name": "addPublishCommand",
          "parameters": [
            {
              "name": "relativeManifestPath",
              "type": {
                "primitive": "string"
              }
            },
            {
              "name": "assetSelector",
              "type": {
                "primitive": "string"
              }
            }
          ]
        },
        {
          "docs": {
            "stability": "experimental",
            "summary": "Exists to implement IAction."
          },
          "locationInModule": {
            "filename": "lib/actions/publish-assets-action.ts",
            "line": 163
          },
          "name": "bind",
          "overrides": "@aws-cdk/aws-codepipeline.IAction",
          "parameters": [
            {
              "name": "scope",
              "type": {
                "fqn": "@aws-cdk/core.Construct"
              }
            },
            {
              "name": "stage",
              "type": {
                "fqn": "@aws-cdk/aws-codepipeline.IStage"
              }
            },
            {
              "name": "options",
              "type": {
                "fqn": "@aws-cdk/aws-codepipeline.ActionBindOptions"
              }
            }
          ],
          "returns": {
            "type": {
              "fqn": "@aws-cdk/aws-codepipeline.ActionConfig"
            }
          }
        },
        {
          "docs": {
            "stability": "experimental",
            "summary": "Exists to implement IAction."
          },
          "locationInModule": {
            "filename": "lib/actions/publish-assets-action.ts",
            "line": 171
          },
          "name": "onStateChange",
          "overrides": "@aws-cdk/aws-codepipeline.IAction",
          "parameters": [
            {
              "name": "name",
              "type": {
                "primitive": "string"
              }
            },
            {
              "name": "target",
              "optional": true,
              "type": {
                "fqn": "@aws-cdk/aws-events.IRuleTarget"
              }
            },
            {
              "name": "options",
              "optional": true,
              "type": {
                "fqn": "@aws-cdk/aws-events.RuleProps"
              }
            }
          ],
          "returns": {
            "type": {
              "fqn": "@aws-cdk/aws-events.Rule"
            }
          }
        }
      ],
      "name": "PublishAssetsAction",
      "properties": [
        {
          "docs": {
            "stability": "experimental",
            "summary": "Exists to implement IAction."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/actions/publish-assets-action.ts",
            "line": 178
          },
          "name": "actionProperties",
          "overrides": "@aws-cdk/aws-codepipeline.IAction",
          "type": {
            "fqn": "@aws-cdk/aws-codepipeline.ActionProperties"
          }
        }
      ]
    },
    "@aws-cdk/pipelines.PublishAssetsActionProps": {
      "assembly": "@aws-cdk/pipelines",
      "datatype": true,
      "docs": {
        "stability": "experimental",
        "summary": "Props for a PublishAssetsAction."
      },
      "fqn": "@aws-cdk/pipelines.PublishAssetsActionProps",
      "kind": "interface",
      "locationInModule": {
        "filename": "lib/actions/publish-assets-action.ts",
        "line": 33
      },
      "name": "PublishAssetsActionProps",
      "properties": [
        {
          "abstract": true,
          "docs": {
            "stability": "experimental",
            "summary": "Name of publishing action."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/actions/publish-assets-action.ts",
            "line": 37
          },
          "name": "actionName",
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "stability": "experimental",
            "summary": "AssetType we're publishing."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/actions/publish-assets-action.ts",
            "line": 47
          },
          "name": "assetType",
          "type": {
            "fqn": "@aws-cdk/pipelines.AssetType"
          }
        },
        {
          "abstract": true,
          "docs": {
            "stability": "experimental",
            "summary": "The CodePipeline artifact that holds the Cloud Assembly."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/actions/publish-assets-action.ts",
            "line": 42
          },
          "name": "cloudAssemblyInput",
          "type": {
            "fqn": "@aws-cdk/aws-codepipeline.Artifact"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "- Latest version",
            "stability": "experimental",
            "summary": "Version of CDK CLI to 'npm install'."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/actions/publish-assets-action.ts",
            "line": 54
          },
          "name": "cdkCliVersion",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "- Automatically generated",
            "stability": "experimental",
            "summary": "Name of the CodeBuild project."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/actions/publish-assets-action.ts",
            "line": 61
          },
          "name": "projectName",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "- Automatically generated",
            "stability": "experimental",
            "summary": "Role to use for CodePipeline and CodeBuild to build and publish the assets."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/actions/publish-assets-action.ts",
            "line": 68
          },
          "name": "role",
          "optional": true,
          "type": {
            "fqn": "@aws-cdk/aws-iam.IRole"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "- All private subnets.",
            "remarks": "Only used if 'vpc' is supplied.",
            "stability": "experimental",
            "summary": "Which subnets to use."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/actions/publish-assets-action.ts",
            "line": 84
          },
          "name": "subnetSelection",
          "optional": true,
          "type": {
            "fqn": "@aws-cdk/aws-ec2.SubnetSelection"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "- No VPC",
            "stability": "experimental",
            "summary": "The VPC where to execute the PublishAssetsAction."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/actions/publish-assets-action.ts",
            "line": 75
          },
          "name": "vpc",
          "optional": true,
          "type": {
            "fqn": "@aws-cdk/aws-ec2.IVpc"
          }
        }
      ]
    },
    "@aws-cdk/pipelines.ShellScriptAction": {
      "assembly": "@aws-cdk/pipelines",
      "docs": {
        "stability": "experimental",
        "summary": "Validate a revision using shell commands."
      },
      "fqn": "@aws-cdk/pipelines.ShellScriptAction",
      "initializer": {
        "docs": {
          "stability": "experimental"
        },
        "locationInModule": {
          "filename": "lib/validation/shell-script-action.ts",
          "line": 132
        },
        "parameters": [
          {
            "name": "props",
            "type": {
              "fqn": "@aws-cdk/pipelines.ShellScriptActionProps"
            }
          }
        ]
      },
      "interfaces": [
        "@aws-cdk/aws-codepipeline.IAction",
        "@aws-cdk/aws-iam.IGrantable"
      ],
      "kind": "class",
      "locationInModule": {
        "filename": "lib/validation/shell-script-action.ts",
        "line": 126
      },
      "methods": [
        {
          "docs": {
            "stability": "experimental",
            "summary": "Exists to implement IAction."
          },
          "locationInModule": {
            "filename": "lib/validation/shell-script-action.ts",
            "line": 173
          },
          "name": "bind",
          "overrides": "@aws-cdk/aws-codepipeline.IAction",
          "parameters": [
            {
              "name": "scope",
              "type": {
                "fqn": "@aws-cdk/core.Construct"
              }
            },
            {
              "name": "stage",
              "type": {
                "fqn": "@aws-cdk/aws-codepipeline.IStage"
              }
            },
            {
              "name": "options",
              "type": {
                "fqn": "@aws-cdk/aws-codepipeline.ActionBindOptions"
              }
            }
          ],
          "returns": {
            "type": {
              "fqn": "@aws-cdk/aws-codepipeline.ActionConfig"
            }
          }
        },
        {
          "docs": {
            "stability": "experimental",
            "summary": "Exists to implement IAction."
          },
          "locationInModule": {
            "filename": "lib/validation/shell-script-action.ts",
            "line": 245
          },
          "name": "onStateChange",
          "overrides": "@aws-cdk/aws-codepipeline.IAction",
          "parameters": [
            {
              "name": "name",
              "type": {
                "primitive": "string"
              }
            },
            {
              "name": "target",
              "optional": true,
              "type": {
                "fqn": "@aws-cdk/aws-events.IRuleTarget"
              }
            },
            {
              "name": "options",
              "optional": true,
              "type": {
                "fqn": "@aws-cdk/aws-events.RuleProps"
              }
            }
          ],
          "returns": {
            "type": {
              "fqn": "@aws-cdk/aws-events.Rule"
            }
          }
        }
      ],
      "name": "ShellScriptAction",
      "properties": [
        {
          "docs": {
            "stability": "experimental",
            "summary": "Exists to implement IAction."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/validation/shell-script-action.ts",
            "line": 166
          },
          "name": "actionProperties",
          "overrides": "@aws-cdk/aws-codepipeline.IAction",
          "type": {
            "fqn": "@aws-cdk/aws-codepipeline.ActionProperties"
          }
        },
        {
          "docs": {
            "stability": "experimental",
            "summary": "The CodeBuild Project's principal."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/validation/shell-script-action.ts",
            "line": 159
          },
          "name": "grantPrincipal",
          "overrides": "@aws-cdk/aws-iam.IGrantable",
          "type": {
            "fqn": "@aws-cdk/aws-iam.IPrincipal"
          }
        },
        {
          "docs": {
            "stability": "experimental",
            "summary": "Project generated to run the shell script in."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/validation/shell-script-action.ts",
            "line": 235
          },
          "name": "project",
          "type": {
            "fqn": "@aws-cdk/aws-codebuild.IProject"
          }
        }
      ]
    },
    "@aws-cdk/pipelines.ShellScriptActionProps": {
      "assembly": "@aws-cdk/pipelines",
      "datatype": true,
      "docs": {
        "stability": "experimental",
        "summary": "Properties for ShellScriptAction."
      },
      "fqn": "@aws-cdk/pipelines.ShellScriptActionProps",
      "kind": "interface",
      "locationInModule": {
        "filename": "lib/validation/shell-script-action.ts",
        "line": 17
      },
      "name": "ShellScriptActionProps",
      "properties": [
        {
          "abstract": true,
          "docs": {
            "stability": "experimental",
            "summary": "Name of the validation action in the pipeline."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/validation/shell-script-action.ts",
            "line": 21
          },
          "name": "actionName",
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "stability": "experimental",
            "summary": "Commands to run."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/validation/shell-script-action.ts",
            "line": 33
          },
          "name": "commands",
          "type": {
            "collection": {
              "elementtype": {
                "primitive": "string"
              },
              "kind": "array"
            }
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "- No additional artifacts",
            "remarks": "You can use these files to load more complex test sets into the\nshellscript build environment.\n\nThe files artifact given here will be unpacked into the current\nworking directory, the other ones will be unpacked into directories\nwhich are available through the environment variables\n$CODEBUILD_SRC_DIR_<artifactName>.\n\nThe CodeBuild job must have at least one input artifact, so you\nmust provide either at least one additional artifact here or one\nstack output using `useOutput`.",
            "stability": "experimental",
            "summary": "Additional artifacts to use as input for the CodeBuild project."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/validation/shell-script-action.ts",
            "line": 59
          },
          "name": "additionalArtifacts",
          "optional": true,
          "type": {
            "collection": {
              "elementtype": {
                "fqn": "@aws-cdk/aws-codepipeline.Artifact"
              },
              "kind": "array"
            }
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "'-eu' (errexit and nounset)",
            "stability": "experimental",
            "summary": "Bash options to set at the start of the script."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/validation/shell-script-action.ts",
            "line": 40
          },
          "name": "bashOptions",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "LinuxBuildImage.STANDARD_4_0",
            "stability": "experimental",
            "summary": "The CodeBuild environment where scripts are executed."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/validation/shell-script-action.ts",
            "line": 66
          },
          "name": "environment",
          "optional": true,
          "type": {
            "fqn": "@aws-cdk/aws-codebuild.BuildEnvironment"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "- No additional environment variables",
            "stability": "experimental",
            "summary": "Environment variables to send into build."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/validation/shell-script-action.ts",
            "line": 73
          },
          "name": "environmentVariables",
          "optional": true,
          "type": {
            "collection": {
              "elementtype": {
                "fqn": "@aws-cdk/aws-codebuild.BuildEnvironmentVariable"
              },
              "kind": "map"
            }
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "- No policy statements",
            "stability": "experimental",
            "summary": "Additional policy statements to add to the execution role."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/validation/shell-script-action.ts",
            "line": 93
          },
          "name": "rolePolicyStatements",
          "optional": true,
          "type": {
            "collection": {
              "elementtype": {
                "fqn": "@aws-cdk/aws-iam.PolicyStatement"
              },
              "kind": "array"
            }
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "100",
            "remarks": "Use this to sequence the shell script after the deployments.\n\nThe default value is 100 so you don't have to supply the value if you just\nwant to run this after the application stacks have been deployed, and you\ndon't have more than 100 stacks.",
            "stability": "experimental",
            "summary": "RunOrder for this action."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/validation/shell-script-action.ts",
            "line": 86
          },
          "name": "runOrder",
          "optional": true,
          "type": {
            "primitive": "number"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "- Security group will be automatically created.",
            "remarks": "If no security group is identified, one will be created automatically.\n\nOnly used if 'vpc' is supplied.",
            "stability": "experimental",
            "summary": "Which security group to associate with the script's project network interfaces."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/validation/shell-script-action.ts",
            "line": 120
          },
          "name": "securityGroups",
          "optional": true,
          "type": {
            "collection": {
              "elementtype": {
                "fqn": "@aws-cdk/aws-ec2.ISecurityGroup"
              },
              "kind": "array"
            }
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "- All private subnets.",
            "remarks": "Only used if 'vpc' is supplied.",
            "stability": "experimental",
            "summary": "Which subnets to use."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/validation/shell-script-action.ts",
            "line": 109
          },
          "name": "subnetSelection",
          "optional": true,
          "type": {
            "fqn": "@aws-cdk/aws-ec2.SubnetSelection"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "- No outputs used",
            "stability": "experimental",
            "summary": "Stack outputs to make available as environment variables."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/validation/shell-script-action.ts",
            "line": 28
          },
          "name": "useOutputs",
          "optional": true,
          "type": {
            "collection": {
              "elementtype": {
                "fqn": "@aws-cdk/pipelines.StackOutput"
              },
              "kind": "map"
            }
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "- No VPC",
            "stability": "experimental",
            "summary": "The VPC where to execute the specified script."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/validation/shell-script-action.ts",
            "line": 100
          },
          "name": "vpc",
          "optional": true,
          "type": {
            "fqn": "@aws-cdk/aws-ec2.IVpc"
          }
        }
      ]
    },
    "@aws-cdk/pipelines.SimpleSynthAction": {
      "assembly": "@aws-cdk/pipelines",
      "docs": {
        "stability": "experimental",
        "summary": "A standard synth with a generated buildspec."
      },
      "fqn": "@aws-cdk/pipelines.SimpleSynthAction",
      "initializer": {
        "docs": {
          "stability": "experimental"
        },
        "locationInModule": {
          "filename": "lib/synths/simple-synth-action.ts",
          "line": 237
        },
        "parameters": [
          {
            "name": "props",
            "type": {
              "fqn": "@aws-cdk/pipelines.SimpleSynthActionProps"
            }
          }
        ]
      },
      "interfaces": [
        "@aws-cdk/aws-codepipeline.IAction",
        "@aws-cdk/aws-iam.IGrantable"
      ],
      "kind": "class",
      "locationInModule": {
        "filename": "lib/synths/simple-synth-action.ts",
        "line": 197
      },
      "methods": [
        {
          "docs": {
            "remarks": "Uses `npm ci` to install dependencies and `npx cdk synth` to synthesize.\n\nIf you need a build step, add `buildCommand: 'npm run build'`.",
            "stability": "experimental",
            "summary": "Create a standard NPM synth action."
          },
          "locationInModule": {
            "filename": "lib/synths/simple-synth-action.ts",
            "line": 206
          },
          "name": "standardNpmSynth",
          "parameters": [
            {
              "name": "options",
              "type": {
                "fqn": "@aws-cdk/pipelines.StandardNpmSynthOptions"
              }
            }
          ],
          "returns": {
            "type": {
              "fqn": "@aws-cdk/pipelines.SimpleSynthAction"
            }
          },
          "static": true
        },
        {
          "docs": {
            "remarks": "Uses `yarn install --frozen-lockfile` to install dependencies and `npx cdk synth` to synthesize.\n\nIf you need a build step, add `buildCommand: 'yarn build'`.",
            "stability": "experimental",
            "summary": "Create a standard Yarn synth action."
          },
          "locationInModule": {
            "filename": "lib/synths/simple-synth-action.ts",
            "line": 223
          },
          "name": "standardYarnSynth",
          "parameters": [
            {
              "name": "options",
              "type": {
                "fqn": "@aws-cdk/pipelines.StandardYarnSynthOptions"
              }
            }
          ],
          "returns": {
            "type": {
              "fqn": "@aws-cdk/pipelines.SimpleSynthAction"
            }
          },
          "static": true
        },
        {
          "docs": {
            "stability": "experimental",
            "summary": "Exists to implement IAction."
          },
          "locationInModule": {
            "filename": "lib/synths/simple-synth-action.ts",
            "line": 297
          },
          "name": "bind",
          "overrides": "@aws-cdk/aws-codepipeline.IAction",
          "parameters": [
            {
              "name": "scope",
              "type": {
                "fqn": "@aws-cdk/core.Construct"
              }
            },
            {
              "name": "stage",
              "type": {
                "fqn": "@aws-cdk/aws-codepipeline.IStage"
              }
            },
            {
              "name": "options",
              "type": {
                "fqn": "@aws-cdk/aws-codepipeline.ActionBindOptions"
              }
            }
          ],
          "returns": {
            "type": {
              "fqn": "@aws-cdk/aws-codepipeline.ActionConfig"
            }
          }
        },
        {
          "docs": {
            "stability": "experimental",
            "summary": "Exists to implement IAction."
          },
          "locationInModule": {
            "filename": "lib/synths/simple-synth-action.ts",
            "line": 418
          },
          "name": "onStateChange",
          "overrides": "@aws-cdk/aws-codepipeline.IAction",
          "parameters": [
            {
              "name": "name",
              "type": {
                "primitive": "string"
              }
            },
            {
              "name": "target",
              "optional": true,
              "type": {
                "fqn": "@aws-cdk/aws-events.IRuleTarget"
              }
            },
            {
              "name": "options",
              "optional": true,
              "type": {
                "fqn": "@aws-cdk/aws-events.RuleProps"
              }
            }
          ],
          "returns": {
            "type": {
              "fqn": "@aws-cdk/aws-events.Rule"
            }
          }
        }
      ],
      "name": "SimpleSynthAction",
      "properties": [
        {
          "docs": {
            "stability": "experimental",
            "summary": "Exists to implement IAction."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/synths/simple-synth-action.ts",
            "line": 280
          },
          "name": "actionProperties",
          "overrides": "@aws-cdk/aws-codepipeline.IAction",
          "type": {
            "fqn": "@aws-cdk/aws-codepipeline.ActionProperties"
          }
        },
        {
          "docs": {
            "stability": "experimental",
            "summary": "The CodeBuild Project's principal."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/synths/simple-synth-action.ts",
            "line": 411
          },
          "name": "grantPrincipal",
          "overrides": "@aws-cdk/aws-iam.IGrantable",
          "type": {
            "fqn": "@aws-cdk/aws-iam.IPrincipal"
          }
        },
        {
          "docs": {
            "stability": "experimental",
            "summary": "Project generated to run the synth command."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/synths/simple-synth-action.ts",
            "line": 287
          },
          "name": "project",
          "type": {
            "fqn": "@aws-cdk/aws-codebuild.IProject"
          }
        }
      ]
    },
    "@aws-cdk/pipelines.SimpleSynthActionProps": {
      "assembly": "@aws-cdk/pipelines",
      "datatype": true,
      "docs": {
        "stability": "experimental",
        "summary": "Construction props for SimpleSynthAction."
      },
      "fqn": "@aws-cdk/pipelines.SimpleSynthActionProps",
      "interfaces": [
        "@aws-cdk/pipelines.SimpleSynthOptions"
      ],
      "kind": "interface",
      "locationInModule": {
        "filename": "lib/synths/simple-synth-action.ts",
        "line": 118
      },
      "name": "SimpleSynthActionProps",
      "properties": [
        {
          "abstract": true,
          "docs": {
            "stability": "experimental",
            "summary": "The synth command."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/synths/simple-synth-action.ts",
            "line": 122
          },
          "name": "synthCommand",
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "- No build required",
            "deprecated": "Use `buildCommands` instead",
            "remarks": "If your programming language requires a compilation step, put the\ncompilation command here.",
            "stability": "deprecated",
            "summary": "The build command."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/synths/simple-synth-action.ts",
            "line": 145
          },
          "name": "buildCommand",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "- No build required",
            "remarks": "If your programming language requires a compilation step, put the\ncompilation command here.",
            "stability": "experimental",
            "summary": "The build commands."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/synths/simple-synth-action.ts",
            "line": 166
          },
          "name": "buildCommands",
          "optional": true,
          "type": {
            "collection": {
              "elementtype": {
                "primitive": "string"
              },
              "kind": "array"
            }
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "- No install required",
            "deprecated": "Use `installCommands` instead",
            "remarks": "If not provided by the build image or another dependency\nmanagement tool, at least install the CDK CLI here using\n`npm install -g aws-cdk`.",
            "stability": "deprecated",
            "summary": "The install command."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/synths/simple-synth-action.ts",
            "line": 134
          },
          "name": "installCommand",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "- No install required",
            "remarks": "If not provided by the build image or another dependency\nmanagement tool, at least install the CDK CLI here using\n`npm install -g aws-cdk`.",
            "stability": "experimental",
            "summary": "Install commands."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/synths/simple-synth-action.ts",
            "line": 156
          },
          "name": "installCommands",
          "optional": true,
          "type": {
            "collection": {
              "elementtype": {
                "primitive": "string"
              },
              "kind": "array"
            }
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "- No test commands",
            "remarks": "These commands are run after the build commands but before the\nsynth command.",
            "stability": "experimental",
            "summary": "Test commands."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/synths/simple-synth-action.ts",
            "line": 176
          },
          "name": "testCommands",
          "optional": true,
          "type": {
            "collection": {
              "elementtype": {
                "primitive": "string"
              },
              "kind": "array"
            }
          }
        }
      ]
    },
    "@aws-cdk/pipelines.SimpleSynthOptions": {
      "assembly": "@aws-cdk/pipelines",
      "datatype": true,
      "docs": {
        "stability": "experimental",
        "summary": "Configuration options for a SimpleSynth."
      },
      "fqn": "@aws-cdk/pipelines.SimpleSynthOptions",
      "kind": "interface",
      "locationInModule": {
        "filename": "lib/synths/simple-synth-action.ts",
        "line": 21
      },
      "name": "SimpleSynthOptions",
      "properties": [
        {
          "abstract": true,
          "docs": {
            "stability": "experimental",
            "summary": "The artifact where the CloudAssembly should be emitted."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/synths/simple-synth-action.ts",
            "line": 30
          },
          "name": "cloudAssemblyArtifact",
          "type": {
            "fqn": "@aws-cdk/aws-codepipeline.Artifact"
          }
        },
        {
          "abstract": true,
          "docs": {
            "stability": "experimental",
            "summary": "The source artifact of the CodePipeline."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/synths/simple-synth-action.ts",
            "line": 25
          },
          "name": "sourceArtifact",
          "type": {
            "fqn": "@aws-cdk/aws-codepipeline.Artifact"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "'Synth'",
            "stability": "experimental",
            "summary": "Name of the build action."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/synths/simple-synth-action.ts",
            "line": 53
          },
          "name": "actionName",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "- No additional artifacts generated",
            "remarks": "Can be used to produce additional artifacts during the build step,\nseparate from the cloud assembly, which can be used further on in the\npipeline.\n\nDirectories are evaluated with respect to `subdirectory`.",
            "stability": "experimental",
            "summary": "Produce additional output artifacts after the build based on the given directories."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/synths/simple-synth-action.ts",
            "line": 87
          },
          "name": "additionalArtifacts",
          "optional": true,
          "type": {
            "collection": {
              "elementtype": {
                "fqn": "@aws-cdk/pipelines.AdditionalArtifact"
              },
              "kind": "array"
            }
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "- No environment variables copied",
            "remarks": "These are environment variables that are being used by the build.",
            "stability": "experimental",
            "summary": "Environment variables to copy over from parent env."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/synths/simple-synth-action.ts",
            "line": 46
          },
          "name": "copyEnvironmentVariables",
          "optional": true,
          "type": {
            "collection": {
              "elementtype": {
                "primitive": "string"
              },
              "kind": "array"
            }
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "BuildEnvironment.LinuxBuildImage.STANDARD_4_0",
            "stability": "experimental",
            "summary": "Build environment to use for CodeBuild job."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/synths/simple-synth-action.ts",
            "line": 67
          },
          "name": "environment",
          "optional": true,
          "type": {
            "fqn": "@aws-cdk/aws-codebuild.BuildEnvironment"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "- No additional environment variables",
            "stability": "experimental",
            "summary": "Environment variables to send into build."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/synths/simple-synth-action.ts",
            "line": 37
          },
          "name": "environmentVariables",
          "optional": true,
          "type": {
            "collection": {
              "elementtype": {
                "fqn": "@aws-cdk/aws-codebuild.BuildEnvironmentVariable"
              },
              "kind": "map"
            }
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "- Automatically generated",
            "stability": "experimental",
            "summary": "Name of the CodeBuild project."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/synths/simple-synth-action.ts",
            "line": 60
          },
          "name": "projectName",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "- No policy statements added to CodeBuild Project Role",
            "remarks": "Can be used to add acces to a CodeArtifact repository etc.",
            "stability": "experimental",
            "summary": "Policy statements to add to role used during the synth."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/synths/simple-synth-action.ts",
            "line": 96
          },
          "name": "rolePolicyStatements",
          "optional": true,
          "type": {
            "collection": {
              "elementtype": {
                "fqn": "@aws-cdk/aws-iam.PolicyStatement"
              },
              "kind": "array"
            }
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "- Repository root",
            "stability": "experimental",
            "summary": "Directory inside the source where package.json and cdk.json are located."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/synths/simple-synth-action.ts",
            "line": 74
          },
          "name": "subdirectory",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "- All private subnets.",
            "remarks": "Only used if 'vpc' is supplied.",
            "stability": "experimental",
            "summary": "Which subnets to use."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/synths/simple-synth-action.ts",
            "line": 112
          },
          "name": "subnetSelection",
          "optional": true,
          "type": {
            "fqn": "@aws-cdk/aws-ec2.SubnetSelection"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "- No VPC",
            "stability": "experimental",
            "summary": "The VPC where to execute the SimpleSynth."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/synths/simple-synth-action.ts",
            "line": 103
          },
          "name": "vpc",
          "optional": true,
          "type": {
            "fqn": "@aws-cdk/aws-ec2.IVpc"
          }
        }
      ]
    },
    "@aws-cdk/pipelines.StackOutput": {
      "assembly": "@aws-cdk/pipelines",
      "docs": {
        "stability": "experimental",
        "summary": "A single output of a Stack."
      },
      "fqn": "@aws-cdk/pipelines.StackOutput",
      "initializer": {
        "docs": {
          "stability": "experimental",
          "summary": "Build a StackOutput from a known artifact and an output name."
        },
        "locationInModule": {
          "filename": "lib/stage.ts",
          "line": 306
        },
        "parameters": [
          {
            "name": "artifactFile",
            "type": {
              "fqn": "@aws-cdk/aws-codepipeline.ArtifactPath"
            }
          },
          {
            "name": "outputName",
            "type": {
              "primitive": "string"
            }
          }
        ]
      },
      "kind": "class",
      "locationInModule": {
        "filename": "lib/stage.ts",
        "line": 292
      },
      "name": "StackOutput",
      "properties": [
        {
          "docs": {
            "stability": "experimental",
            "summary": "The artifact and file the output is stored in."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/stage.ts",
            "line": 296
          },
          "name": "artifactFile",
          "type": {
            "fqn": "@aws-cdk/aws-codepipeline.ArtifactPath"
          }
        },
        {
          "docs": {
            "stability": "experimental",
            "summary": "The name of the output in the JSON object in the file."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/stage.ts",
            "line": 301
          },
          "name": "outputName",
          "type": {
            "primitive": "string"
          }
        }
      ]
    },
    "@aws-cdk/pipelines.StandardNpmSynthOptions": {
      "assembly": "@aws-cdk/pipelines",
      "datatype": true,
      "docs": {
        "stability": "experimental",
        "summary": "Options for a convention-based synth using NPM."
      },
      "fqn": "@aws-cdk/pipelines.StandardNpmSynthOptions",
      "interfaces": [
        "@aws-cdk/pipelines.SimpleSynthOptions"
      ],
      "kind": "interface",
      "locationInModule": {
        "filename": "lib/synths/simple-synth-action.ts",
        "line": 430
      },
      "name": "StandardNpmSynthOptions",
      "properties": [
        {
          "abstract": true,
          "docs": {
            "default": "- No build required",
            "remarks": "By default, we assume NPM projects are either written in JavaScript or are\nusing `ts-node`, so don't need a build command.\n\nOtherwise, put the build command here, for example `npm run build`.",
            "stability": "experimental",
            "summary": "The build command."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/synths/simple-synth-action.ts",
            "line": 448
          },
          "name": "buildCommand",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "'npm ci'",
            "stability": "experimental",
            "summary": "The install command."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/synths/simple-synth-action.ts",
            "line": 436
          },
          "name": "installCommand",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "'npx cdk synth'",
            "stability": "experimental",
            "summary": "The synth command."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/synths/simple-synth-action.ts",
            "line": 455
          },
          "name": "synthCommand",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        }
      ]
    },
    "@aws-cdk/pipelines.StandardYarnSynthOptions": {
      "assembly": "@aws-cdk/pipelines",
      "datatype": true,
      "docs": {
        "stability": "experimental",
        "summary": "Options for a convention-based synth using Yarn."
      },
      "fqn": "@aws-cdk/pipelines.StandardYarnSynthOptions",
      "interfaces": [
        "@aws-cdk/pipelines.SimpleSynthOptions"
      ],
      "kind": "interface",
      "locationInModule": {
        "filename": "lib/synths/simple-synth-action.ts",
        "line": 461
      },
      "name": "StandardYarnSynthOptions",
      "properties": [
        {
          "abstract": true,
          "docs": {
            "default": "- No build required",
            "remarks": "By default, we assume NPM projects are either written in JavaScript or are\nusing `ts-node`, so don't need a build command.\n\nOtherwise, put the build command here, for example `npm run build`.",
            "stability": "experimental",
            "summary": "The build command."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/synths/simple-synth-action.ts",
            "line": 479
          },
          "name": "buildCommand",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "'yarn install --frozen-lockfile'",
            "stability": "experimental",
            "summary": "The install command."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/synths/simple-synth-action.ts",
            "line": 467
          },
          "name": "installCommand",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "'npx cdk synth'",
            "stability": "experimental",
            "summary": "The synth command."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/synths/simple-synth-action.ts",
            "line": 486
          },
          "name": "synthCommand",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        }
      ]
    },
    "@aws-cdk/pipelines.UpdatePipelineAction": {
      "assembly": "@aws-cdk/pipelines",
      "base": "@aws-cdk/core.Construct",
      "docs": {
        "remarks": "Creates a CodeBuild project which will use the CDK CLI\nto deploy the pipeline stack.\n\nYou do not need to instantiate this action -- it will automatically\nbe added by the pipeline.",
        "stability": "experimental",
        "summary": "Action to self-mutate the pipeline."
      },
      "fqn": "@aws-cdk/pipelines.UpdatePipelineAction",
      "initializer": {
        "docs": {
          "stability": "experimental"
        },
        "locationInModule": {
          "filename": "lib/actions/update-pipeline-action.ts",
          "line": 54
        },
        "parameters": [
          {
            "name": "scope",
            "type": {
              "fqn": "constructs.Construct"
            }
          },
          {
            "name": "id",
            "type": {
              "primitive": "string"
            }
          },
          {
            "name": "props",
            "type": {
              "fqn": "@aws-cdk/pipelines.UpdatePipelineActionProps"
            }
          }
        ]
      },
      "interfaces": [
        "@aws-cdk/aws-codepipeline.IAction"
      ],
      "kind": "class",
      "locationInModule": {
        "filename": "lib/actions/update-pipeline-action.ts",
        "line": 51
      },
      "methods": [
        {
          "docs": {
            "stability": "experimental",
            "summary": "Exists to implement IAction."
          },
          "locationInModule": {
            "filename": "lib/actions/update-pipeline-action.ts",
            "line": 106
          },
          "name": "bind",
          "overrides": "@aws-cdk/aws-codepipeline.IAction",
          "parameters": [
            {
              "name": "scope",
              "type": {
                "fqn": "@aws-cdk/core.Construct"
              }
            },
            {
              "name": "stage",
              "type": {
                "fqn": "@aws-cdk/aws-codepipeline.IStage"
              }
            },
            {
              "name": "options",
              "type": {
                "fqn": "@aws-cdk/aws-codepipeline.ActionBindOptions"
              }
            }
          ],
          "returns": {
            "type": {
              "fqn": "@aws-cdk/aws-codepipeline.ActionConfig"
            }
          }
        },
        {
          "docs": {
            "stability": "experimental",
            "summary": "Exists to implement IAction."
          },
          "locationInModule": {
            "filename": "lib/actions/update-pipeline-action.ts",
            "line": 114
          },
          "name": "onStateChange",
          "overrides": "@aws-cdk/aws-codepipeline.IAction",
          "parameters": [
            {
              "name": "name",
              "type": {
                "primitive": "string"
              }
            },
            {
              "name": "target",
              "optional": true,
              "type": {
                "fqn": "@aws-cdk/aws-events.IRuleTarget"
              }
            },
            {
              "name": "options",
              "optional": true,
              "type": {
                "fqn": "@aws-cdk/aws-events.RuleProps"
              }
            }
          ],
          "returns": {
            "type": {
              "fqn": "@aws-cdk/aws-events.Rule"
            }
          }
        }
      ],
      "name": "UpdatePipelineAction",
      "properties": [
        {
          "docs": {
            "stability": "experimental",
            "summary": "Exists to implement IAction."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/actions/update-pipeline-action.ts",
            "line": 121
          },
          "name": "actionProperties",
          "overrides": "@aws-cdk/aws-codepipeline.IAction",
          "type": {
            "fqn": "@aws-cdk/aws-codepipeline.ActionProperties"
          }
        }
      ]
    },
    "@aws-cdk/pipelines.UpdatePipelineActionProps": {
      "assembly": "@aws-cdk/pipelines",
      "datatype": true,
      "docs": {
        "stability": "experimental",
        "summary": "Props for the UpdatePipelineAction."
      },
      "fqn": "@aws-cdk/pipelines.UpdatePipelineActionProps",
      "kind": "interface",
      "locationInModule": {
        "filename": "lib/actions/update-pipeline-action.ts",
        "line": 16
      },
      "name": "UpdatePipelineActionProps",
      "properties": [
        {
          "abstract": true,
          "docs": {
            "stability": "experimental",
            "summary": "The CodePipeline artifact that holds the Cloud Assembly."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/actions/update-pipeline-action.ts",
            "line": 20
          },
          "name": "cloudAssemblyInput",
          "type": {
            "fqn": "@aws-cdk/aws-codepipeline.Artifact"
          }
        },
        {
          "abstract": true,
          "docs": {
            "stability": "experimental",
            "summary": "Name of the pipeline stack."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/actions/update-pipeline-action.ts",
            "line": 25
          },
          "name": "pipelineStackName",
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "- Latest version",
            "stability": "experimental",
            "summary": "Version of CDK CLI to 'npm install'."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/actions/update-pipeline-action.ts",
            "line": 32
          },
          "name": "cdkCliVersion",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "- Automatically generated",
            "stability": "experimental",
            "summary": "Name of the CodeBuild project."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/actions/update-pipeline-action.ts",
            "line": 39
          },
          "name": "projectName",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        }
      ]
    }
  },
  "version": "1.91.0",
  "fingerprint": "2KBDB8MA272yhnXh3nojOBgL1Ap46+u5vMPbdMNUd1M="
}
