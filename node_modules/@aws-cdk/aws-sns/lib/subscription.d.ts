import { IQueue } from '@aws-cdk/aws-sqs';
import { Resource } from '@aws-cdk/core';
import { Construct } from 'constructs';
import { SubscriptionFilter } from './subscription-filter';
import { ITopic } from './topic-base';
/**
 * Options for creating a new subscription.
 *
 * @stability stable
 */
export interface SubscriptionOptions {
    /**
     * What type of subscription to add.
     *
     * @stability stable
     */
    readonly protocol: SubscriptionProtocol;
    /**
     * The subscription endpoint.
     *
     * The meaning of this value depends on the value for 'protocol'.
     *
     * @stability stable
     */
    readonly endpoint: string;
    /**
     * true if raw message delivery is enabled for the subscription.
     *
     * Raw messages are free of JSON formatting and can be
     * sent to HTTP/S and Amazon SQS endpoints. For more information, see GetSubscriptionAttributes in the Amazon Simple
     * Notification Service API Reference.
     *
     * @default false
     * @stability stable
     */
    readonly rawMessageDelivery?: boolean;
    /**
     * The filter policy.
     *
     * @default - all messages are delivered
     * @stability stable
     */
    readonly filterPolicy?: {
        [attribute: string]: SubscriptionFilter;
    };
    /**
     * The region where the topic resides, in the case of cross-region subscriptions.
     *
     * @default - the region where the CloudFormation stack is being deployed.
     * @stability stable
     * @link https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-sns-subscription.html#cfn-sns-subscription-region
     */
    readonly region?: string;
    /**
     * Queue to be used as dead letter queue.
     *
     * If not passed no dead letter queue is enabled.
     *
     * @default - No dead letter queue enabled.
     * @stability stable
     */
    readonly deadLetterQueue?: IQueue;
}
/**
 * Properties for creating a new subscription.
 *
 * @stability stable
 */
export interface SubscriptionProps extends SubscriptionOptions {
    /**
     * The topic to subscribe to.
     *
     * @stability stable
     */
    readonly topic: ITopic;
}
/**
 * A new subscription.
 *
 * Prefer to use the `ITopic.addSubscription()` methods to create instances of
 * this class.
 *
 * @stability stable
 */
export declare class Subscription extends Resource {
    /**
     * The DLQ associated with this subscription if present.
     *
     * @stability stable
     */
    readonly deadLetterQueue?: IQueue;
    private readonly filterPolicy?;
    /**
     * @stability stable
     */
    constructor(scope: Construct, id: string, props: SubscriptionProps);
    private buildDeadLetterQueue;
    private buildDeadLetterConfig;
}
/**
 * The type of subscription, controlling the type of the endpoint parameter.
 *
 * @stability stable
 */
export declare enum SubscriptionProtocol {
    /**
     * JSON-encoded message is POSTED to an HTTP url.
     *
     * @stability stable
     */
    HTTP = "http",
    /**
     * JSON-encoded message is POSTed to an HTTPS url.
     *
     * @stability stable
     */
    HTTPS = "https",
    /**
     * Notifications are sent via email.
     *
     * @stability stable
     */
    EMAIL = "email",
    /**
     * Notifications are JSON-encoded and sent via mail.
     *
     * @stability stable
     */
    EMAIL_JSON = "email-json",
    /**
     * Notification is delivered by SMS.
     *
     * @stability stable
     */
    SMS = "sms",
    /**
     * Notifications are enqueued into an SQS queue.
     *
     * @stability stable
     */
    SQS = "sqs",
    /**
     * JSON-encoded notifications are sent to a mobile app endpoint.
     *
     * @stability stable
     */
    APPLICATION = "application",
    /**
     * Notifications trigger a Lambda function.
     *
     * @stability stable
     */
    LAMBDA = "lambda"
}
