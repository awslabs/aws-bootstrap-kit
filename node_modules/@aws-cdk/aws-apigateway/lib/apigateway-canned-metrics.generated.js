"use strict";
// Copyright 2012-2021 Amazon.com, Inc. or its affiliates. All Rights Reserved.
Object.defineProperty(exports, "__esModule", { value: true });
exports.ApiGatewayMetrics = void 0;
/* eslint-disable max-len */ // This is generated code - line lengths are difficult to control
class ApiGatewayMetrics {
    static _5XxErrorSum(dimensions) {
        return {
            namespace: 'AWS/ApiGateway',
            metricName: '5XXError',
            dimensions,
            statistic: 'Sum',
        };
    }
    static latencyAverage(dimensions) {
        return {
            namespace: 'AWS/ApiGateway',
            metricName: 'Latency',
            dimensions,
            statistic: 'Average',
        };
    }
    static countSum(dimensions) {
        return {
            namespace: 'AWS/ApiGateway',
            metricName: 'Count',
            dimensions,
            statistic: 'Sum',
        };
    }
    static _4XxErrorSum(dimensions) {
        return {
            namespace: 'AWS/ApiGateway',
            metricName: '4XXError',
            dimensions,
            statistic: 'Sum',
        };
    }
    static integrationLatencyAverage(dimensions) {
        return {
            namespace: 'AWS/ApiGateway',
            metricName: 'IntegrationLatency',
            dimensions,
            statistic: 'Average',
        };
    }
    static cacheHitCountSum(dimensions) {
        return {
            namespace: 'AWS/ApiGateway',
            metricName: 'CacheHitCount',
            dimensions,
            statistic: 'Sum',
        };
    }
    static cacheMissCountSum(dimensions) {
        return {
            namespace: 'AWS/ApiGateway',
            metricName: 'CacheMissCount',
            dimensions,
            statistic: 'Sum',
        };
    }
}
exports.ApiGatewayMetrics = ApiGatewayMetrics;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYXBpZ2F0ZXdheS1jYW5uZWQtbWV0cmljcy5nZW5lcmF0ZWQuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyJhcGlnYXRld2F5LWNhbm5lZC1tZXRyaWNzLmdlbmVyYXRlZC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUEsK0VBQStFOzs7QUFFL0UsNEJBQTRCLENBQUMsaUVBQWlFO0FBRTlGLE1BQWEsaUJBQWlCO0lBR3JCLE1BQU0sQ0FBQyxZQUFZLENBQUMsVUFBZTtRQUN4QyxPQUFPO1lBQ0wsU0FBUyxFQUFFLGdCQUFnQjtZQUMzQixVQUFVLEVBQUUsVUFBVTtZQUN0QixVQUFVO1lBQ1YsU0FBUyxFQUFFLEtBQUs7U0FDakIsQ0FBQztJQUNKLENBQUM7SUFHTSxNQUFNLENBQUMsY0FBYyxDQUFDLFVBQWU7UUFDMUMsT0FBTztZQUNMLFNBQVMsRUFBRSxnQkFBZ0I7WUFDM0IsVUFBVSxFQUFFLFNBQVM7WUFDckIsVUFBVTtZQUNWLFNBQVMsRUFBRSxTQUFTO1NBQ3JCLENBQUM7SUFDSixDQUFDO0lBR00sTUFBTSxDQUFDLFFBQVEsQ0FBQyxVQUFlO1FBQ3BDLE9BQU87WUFDTCxTQUFTLEVBQUUsZ0JBQWdCO1lBQzNCLFVBQVUsRUFBRSxPQUFPO1lBQ25CLFVBQVU7WUFDVixTQUFTLEVBQUUsS0FBSztTQUNqQixDQUFDO0lBQ0osQ0FBQztJQUdNLE1BQU0sQ0FBQyxZQUFZLENBQUMsVUFBZTtRQUN4QyxPQUFPO1lBQ0wsU0FBUyxFQUFFLGdCQUFnQjtZQUMzQixVQUFVLEVBQUUsVUFBVTtZQUN0QixVQUFVO1lBQ1YsU0FBUyxFQUFFLEtBQUs7U0FDakIsQ0FBQztJQUNKLENBQUM7SUFHTSxNQUFNLENBQUMseUJBQXlCLENBQUMsVUFBZTtRQUNyRCxPQUFPO1lBQ0wsU0FBUyxFQUFFLGdCQUFnQjtZQUMzQixVQUFVLEVBQUUsb0JBQW9CO1lBQ2hDLFVBQVU7WUFDVixTQUFTLEVBQUUsU0FBUztTQUNyQixDQUFDO0lBQ0osQ0FBQztJQUdNLE1BQU0sQ0FBQyxnQkFBZ0IsQ0FBQyxVQUFlO1FBQzVDLE9BQU87WUFDTCxTQUFTLEVBQUUsZ0JBQWdCO1lBQzNCLFVBQVUsRUFBRSxlQUFlO1lBQzNCLFVBQVU7WUFDVixTQUFTLEVBQUUsS0FBSztTQUNqQixDQUFDO0lBQ0osQ0FBQztJQUdNLE1BQU0sQ0FBQyxpQkFBaUIsQ0FBQyxVQUFlO1FBQzdDLE9BQU87WUFDTCxTQUFTLEVBQUUsZ0JBQWdCO1lBQzNCLFVBQVUsRUFBRSxnQkFBZ0I7WUFDNUIsVUFBVTtZQUNWLFNBQVMsRUFBRSxLQUFLO1NBQ2pCLENBQUM7SUFDSixDQUFDO0NBQ0Y7QUF2RUQsOENBdUVDIiwic291cmNlc0NvbnRlbnQiOlsiLy8gQ29weXJpZ2h0IDIwMTItMjAyMSBBbWF6b24uY29tLCBJbmMuIG9yIGl0cyBhZmZpbGlhdGVzLiBBbGwgUmlnaHRzIFJlc2VydmVkLlxuXG4vKiBlc2xpbnQtZGlzYWJsZSBtYXgtbGVuICovIC8vIFRoaXMgaXMgZ2VuZXJhdGVkIGNvZGUgLSBsaW5lIGxlbmd0aHMgYXJlIGRpZmZpY3VsdCB0byBjb250cm9sXG5cbmV4cG9ydCBjbGFzcyBBcGlHYXRld2F5TWV0cmljcyB7XG4gIHB1YmxpYyBzdGF0aWMgXzVYeEVycm9yU3VtKGRpbWVuc2lvbnM6IHsgQXBpTmFtZTogc3RyaW5nLCBTdGFnZTogc3RyaW5nIH0pOiBNZXRyaWNXaXRoRGltczx7IEFwaU5hbWU6IHN0cmluZywgU3RhZ2U6IHN0cmluZyB9PjtcbiAgcHVibGljIHN0YXRpYyBfNVh4RXJyb3JTdW0oZGltZW5zaW9uczogeyBBcGlOYW1lOiBzdHJpbmcgfSk6IE1ldHJpY1dpdGhEaW1zPHsgQXBpTmFtZTogc3RyaW5nIH0+O1xuICBwdWJsaWMgc3RhdGljIF81WHhFcnJvclN1bShkaW1lbnNpb25zOiBhbnkpIHtcbiAgICByZXR1cm4ge1xuICAgICAgbmFtZXNwYWNlOiAnQVdTL0FwaUdhdGV3YXknLFxuICAgICAgbWV0cmljTmFtZTogJzVYWEVycm9yJyxcbiAgICAgIGRpbWVuc2lvbnMsXG4gICAgICBzdGF0aXN0aWM6ICdTdW0nLFxuICAgIH07XG4gIH1cbiAgcHVibGljIHN0YXRpYyBsYXRlbmN5QXZlcmFnZShkaW1lbnNpb25zOiB7IEFwaU5hbWU6IHN0cmluZywgU3RhZ2U6IHN0cmluZyB9KTogTWV0cmljV2l0aERpbXM8eyBBcGlOYW1lOiBzdHJpbmcsIFN0YWdlOiBzdHJpbmcgfT47XG4gIHB1YmxpYyBzdGF0aWMgbGF0ZW5jeUF2ZXJhZ2UoZGltZW5zaW9uczogeyBBcGlOYW1lOiBzdHJpbmcgfSk6IE1ldHJpY1dpdGhEaW1zPHsgQXBpTmFtZTogc3RyaW5nIH0+O1xuICBwdWJsaWMgc3RhdGljIGxhdGVuY3lBdmVyYWdlKGRpbWVuc2lvbnM6IGFueSkge1xuICAgIHJldHVybiB7XG4gICAgICBuYW1lc3BhY2U6ICdBV1MvQXBpR2F0ZXdheScsXG4gICAgICBtZXRyaWNOYW1lOiAnTGF0ZW5jeScsXG4gICAgICBkaW1lbnNpb25zLFxuICAgICAgc3RhdGlzdGljOiAnQXZlcmFnZScsXG4gICAgfTtcbiAgfVxuICBwdWJsaWMgc3RhdGljIGNvdW50U3VtKGRpbWVuc2lvbnM6IHsgQXBpTmFtZTogc3RyaW5nLCBTdGFnZTogc3RyaW5nIH0pOiBNZXRyaWNXaXRoRGltczx7IEFwaU5hbWU6IHN0cmluZywgU3RhZ2U6IHN0cmluZyB9PjtcbiAgcHVibGljIHN0YXRpYyBjb3VudFN1bShkaW1lbnNpb25zOiB7IEFwaU5hbWU6IHN0cmluZyB9KTogTWV0cmljV2l0aERpbXM8eyBBcGlOYW1lOiBzdHJpbmcgfT47XG4gIHB1YmxpYyBzdGF0aWMgY291bnRTdW0oZGltZW5zaW9uczogYW55KSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIG5hbWVzcGFjZTogJ0FXUy9BcGlHYXRld2F5JyxcbiAgICAgIG1ldHJpY05hbWU6ICdDb3VudCcsXG4gICAgICBkaW1lbnNpb25zLFxuICAgICAgc3RhdGlzdGljOiAnU3VtJyxcbiAgICB9O1xuICB9XG4gIHB1YmxpYyBzdGF0aWMgXzRYeEVycm9yU3VtKGRpbWVuc2lvbnM6IHsgQXBpTmFtZTogc3RyaW5nLCBTdGFnZTogc3RyaW5nIH0pOiBNZXRyaWNXaXRoRGltczx7IEFwaU5hbWU6IHN0cmluZywgU3RhZ2U6IHN0cmluZyB9PjtcbiAgcHVibGljIHN0YXRpYyBfNFh4RXJyb3JTdW0oZGltZW5zaW9uczogeyBBcGlOYW1lOiBzdHJpbmcgfSk6IE1ldHJpY1dpdGhEaW1zPHsgQXBpTmFtZTogc3RyaW5nIH0+O1xuICBwdWJsaWMgc3RhdGljIF80WHhFcnJvclN1bShkaW1lbnNpb25zOiBhbnkpIHtcbiAgICByZXR1cm4ge1xuICAgICAgbmFtZXNwYWNlOiAnQVdTL0FwaUdhdGV3YXknLFxuICAgICAgbWV0cmljTmFtZTogJzRYWEVycm9yJyxcbiAgICAgIGRpbWVuc2lvbnMsXG4gICAgICBzdGF0aXN0aWM6ICdTdW0nLFxuICAgIH07XG4gIH1cbiAgcHVibGljIHN0YXRpYyBpbnRlZ3JhdGlvbkxhdGVuY3lBdmVyYWdlKGRpbWVuc2lvbnM6IHsgQXBpTmFtZTogc3RyaW5nLCBTdGFnZTogc3RyaW5nIH0pOiBNZXRyaWNXaXRoRGltczx7IEFwaU5hbWU6IHN0cmluZywgU3RhZ2U6IHN0cmluZyB9PjtcbiAgcHVibGljIHN0YXRpYyBpbnRlZ3JhdGlvbkxhdGVuY3lBdmVyYWdlKGRpbWVuc2lvbnM6IHsgQXBpTmFtZTogc3RyaW5nIH0pOiBNZXRyaWNXaXRoRGltczx7IEFwaU5hbWU6IHN0cmluZyB9PjtcbiAgcHVibGljIHN0YXRpYyBpbnRlZ3JhdGlvbkxhdGVuY3lBdmVyYWdlKGRpbWVuc2lvbnM6IGFueSkge1xuICAgIHJldHVybiB7XG4gICAgICBuYW1lc3BhY2U6ICdBV1MvQXBpR2F0ZXdheScsXG4gICAgICBtZXRyaWNOYW1lOiAnSW50ZWdyYXRpb25MYXRlbmN5JyxcbiAgICAgIGRpbWVuc2lvbnMsXG4gICAgICBzdGF0aXN0aWM6ICdBdmVyYWdlJyxcbiAgICB9O1xuICB9XG4gIHB1YmxpYyBzdGF0aWMgY2FjaGVIaXRDb3VudFN1bShkaW1lbnNpb25zOiB7IEFwaU5hbWU6IHN0cmluZywgU3RhZ2U6IHN0cmluZyB9KTogTWV0cmljV2l0aERpbXM8eyBBcGlOYW1lOiBzdHJpbmcsIFN0YWdlOiBzdHJpbmcgfT47XG4gIHB1YmxpYyBzdGF0aWMgY2FjaGVIaXRDb3VudFN1bShkaW1lbnNpb25zOiB7IEFwaU5hbWU6IHN0cmluZyB9KTogTWV0cmljV2l0aERpbXM8eyBBcGlOYW1lOiBzdHJpbmcgfT47XG4gIHB1YmxpYyBzdGF0aWMgY2FjaGVIaXRDb3VudFN1bShkaW1lbnNpb25zOiBhbnkpIHtcbiAgICByZXR1cm4ge1xuICAgICAgbmFtZXNwYWNlOiAnQVdTL0FwaUdhdGV3YXknLFxuICAgICAgbWV0cmljTmFtZTogJ0NhY2hlSGl0Q291bnQnLFxuICAgICAgZGltZW5zaW9ucyxcbiAgICAgIHN0YXRpc3RpYzogJ1N1bScsXG4gICAgfTtcbiAgfVxuICBwdWJsaWMgc3RhdGljIGNhY2hlTWlzc0NvdW50U3VtKGRpbWVuc2lvbnM6IHsgQXBpTmFtZTogc3RyaW5nLCBTdGFnZTogc3RyaW5nIH0pOiBNZXRyaWNXaXRoRGltczx7IEFwaU5hbWU6IHN0cmluZywgU3RhZ2U6IHN0cmluZyB9PjtcbiAgcHVibGljIHN0YXRpYyBjYWNoZU1pc3NDb3VudFN1bShkaW1lbnNpb25zOiB7IEFwaU5hbWU6IHN0cmluZyB9KTogTWV0cmljV2l0aERpbXM8eyBBcGlOYW1lOiBzdHJpbmcgfT47XG4gIHB1YmxpYyBzdGF0aWMgY2FjaGVNaXNzQ291bnRTdW0oZGltZW5zaW9uczogYW55KSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIG5hbWVzcGFjZTogJ0FXUy9BcGlHYXRld2F5JyxcbiAgICAgIG1ldHJpY05hbWU6ICdDYWNoZU1pc3NDb3VudCcsXG4gICAgICBkaW1lbnNpb25zLFxuICAgICAgc3RhdGlzdGljOiAnU3VtJyxcbiAgICB9O1xuICB9XG59XG50eXBlIE1ldHJpY1dpdGhEaW1zPEQ+ID0geyBuYW1lc3BhY2U6IHN0cmluZywgbWV0cmljTmFtZTogc3RyaW5nLCBzdGF0aXN0aWM6IHN0cmluZywgZGltZW5zaW9uczogRCB9O1xuIl19