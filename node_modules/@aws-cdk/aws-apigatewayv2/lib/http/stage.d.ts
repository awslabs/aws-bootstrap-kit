import { Metric, MetricOptions } from '@aws-cdk/aws-cloudwatch';
import { Resource } from '@aws-cdk/core';
import { Construct } from 'constructs';
import { CommonStageOptions, IDomainName, IStage } from '../common';
import { IHttpApi } from './api';
/**
 * (experimental) Represents the HttpStage.
 *
 * @experimental
 */
export interface IHttpStage extends IStage {
}
/**
 * (experimental) Options to create a new stage for an HTTP API.
 *
 * @experimental
 */
export interface HttpStageOptions extends CommonStageOptions {
    /**
     * (experimental) The options for custom domain and api mapping.
     *
     * @default - no custom domain and api mapping configuration
     * @experimental
     */
    readonly domainMapping?: DomainMappingOptions;
}
/**
 * (experimental) Properties to initialize an instance of `HttpStage`.
 *
 * @experimental
 */
export interface HttpStageProps extends HttpStageOptions {
    /**
     * (experimental) The HTTP API to which this stage is associated.
     *
     * @experimental
     */
    readonly httpApi: IHttpApi;
}
/**
 * (experimental) Options for defaultDomainMapping.
 *
 * @experimental
 */
export interface DefaultDomainMappingOptions {
    /**
     * (experimental) The domain name for the mapping.
     *
     * @experimental
     */
    readonly domainName: IDomainName;
    /**
     * (experimental) The API mapping key.
     *
     * Leave it undefined for the root path mapping.
     *
     * @default - empty key for the root path mapping
     * @experimental
     */
    readonly mappingKey?: string;
}
/**
 * (experimental) Options for DomainMapping.
 *
 * @experimental
 */
export interface DomainMappingOptions extends DefaultDomainMappingOptions {
    /**
     * (experimental) The API Stage.
     *
     * @default - the $default stage
     * @experimental
     */
    readonly stage?: IStage;
}
/**
 * (experimental) Represents a stage where an instance of the API is deployed.
 *
 * @experimental
 * @resource AWS::ApiGatewayV2::Stage
 */
export declare class HttpStage extends Resource implements IStage {
    /**
     * (experimental) Import an existing stage into this CDK app.
     *
     * @experimental
     */
    static fromStageName(scope: Construct, id: string, stageName: string): IStage;
    /**
     * (experimental) The name of the stage;
     *
     * its primary identifier.
     *
     * @experimental
     */
    readonly stageName: string;
    private httpApi;
    /**
     * @experimental
     */
    constructor(scope: Construct, id: string, props: HttpStageProps);
    /**
     * (experimental) The URL to this stage.
     *
     * @experimental
     */
    get url(): string;
    /**
     * (experimental) Return the given named metric for this HTTP Api Gateway Stage.
     *
     * @default - average over 5 minutes
     * @experimental
     */
    metric(metricName: string, props?: MetricOptions): Metric;
    /**
     * (experimental) Metric for the number of client-side errors captured in a given period.
     *
     * @default - sum over 5 minutes
     * @experimental
     */
    metricClientError(props?: MetricOptions): Metric;
    /**
     * (experimental) Metric for the number of server-side errors captured in a given period.
     *
     * @default - sum over 5 minutes
     * @experimental
     */
    metricServerError(props?: MetricOptions): Metric;
    /**
     * (experimental) Metric for the amount of data processed in bytes.
     *
     * @default - sum over 5 minutes
     * @experimental
     */
    metricDataProcessed(props?: MetricOptions): Metric;
    /**
     * (experimental) Metric for the total number API requests in a given period.
     *
     * @default - SampleCount over 5 minutes
     * @experimental
     */
    metricCount(props?: MetricOptions): Metric;
    /**
     * (experimental) Metric for the time between when API Gateway relays a request to the backend and when it receives a response from the backend.
     *
     * @default - no statistic
     * @experimental
     */
    metricIntegrationLatency(props?: MetricOptions): Metric;
    /**
     * (experimental) The time between when API Gateway receives a request from a client and when it returns a response to the client.
     *
     * The latency includes the integration latency and other API Gateway overhead.
     *
     * @default - no statistic
     * @experimental
     */
    metricLatency(props?: MetricOptions): Metric;
}
