"use strict";
var _a;
Object.defineProperty(exports, "__esModule", { value: true });
exports.CfnCodeDeployBlueGreenHook = exports.CfnTrafficRoutingType = void 0;
const JSII_RTTI_SYMBOL_1 = Symbol.for("jsii.rtti");
const cfn_hook_1 = require("./cfn-hook");
const util_1 = require("./util");
/**
 * The possible types of traffic shifting for the blue-green deployment configuration.
 *
 * The type of the {@link CfnTrafficRoutingConfig.type} property.
 *
 * @stability stable
 */
var CfnTrafficRoutingType;
(function (CfnTrafficRoutingType) {
    CfnTrafficRoutingType["ALL_AT_ONCE"] = "AllAtOnce";
    CfnTrafficRoutingType["TIME_BASED_CANARY"] = "TimeBasedCanary";
    CfnTrafficRoutingType["TIME_BASED_LINEAR"] = "TimeBasedLinear";
})(CfnTrafficRoutingType = exports.CfnTrafficRoutingType || (exports.CfnTrafficRoutingType = {}));
/**
 * A CloudFormation Hook for CodeDeploy blue-green ECS deployments.
 *
 * @see https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/blue-green.html#blue-green-template-reference
 * @stability stable
 */
class CfnCodeDeployBlueGreenHook extends cfn_hook_1.CfnHook {
    /**
     * Creates a new CodeDeploy blue-green ECS Hook.
     *
     * @param scope the scope to create the hook in (usually the containing Stack object).
     * @param id the identifier of the construct - will be used to generate the logical ID of the Hook.
     * @param props the properties of the Hook.
     * @stability stable
     */
    constructor(scope, id, props) {
        super(scope, id, {
            type: 'AWS::CodeDeploy::BlueGreen',
        });
        this._serviceRole = props.serviceRole;
        this._applications = props.applications;
        this._trafficRoutingConfig = props.trafficRoutingConfig;
        this._additionalOptions = props.additionalOptions;
        this._lifecycleEventHooks = props.lifecycleEventHooks;
    }
    /**
     * A factory method that creates a new instance of this class from an object
     * containing the CloudFormation properties of this resource.
     * Used in the @aws-cdk/cloudformation-include module.
     *
     * @internal
     */
    static _fromCloudFormation(scope, id, hookAttributes, options) {
        var _b, _c, _d, _e, _f, _g, _h, _j, _k, _l, _m, _o, _p, _q, _r, _s;
        hookAttributes = hookAttributes || {};
        const hookProperties = options.parser.parseValue(hookAttributes.Properties);
        return new CfnCodeDeployBlueGreenHook(scope, id, {
            serviceRole: hookProperties === null || hookProperties === void 0 ? void 0 : hookProperties.ServiceRole,
            applications: (_b = hookProperties === null || hookProperties === void 0 ? void 0 : hookProperties.Applications) === null || _b === void 0 ? void 0 : _b.map(applicationFromCloudFormation),
            trafficRoutingConfig: {
                type: (_c = hookProperties === null || hookProperties === void 0 ? void 0 : hookProperties.TrafficRoutingConfig) === null || _c === void 0 ? void 0 : _c.Type,
                timeBasedCanary: {
                    stepPercentage: (_e = (_d = hookProperties === null || hookProperties === void 0 ? void 0 : hookProperties.TrafficRoutingConfig) === null || _d === void 0 ? void 0 : _d.TimeBasedCanary) === null || _e === void 0 ? void 0 : _e.StepPercentage,
                    bakeTimeMins: (_g = (_f = hookProperties === null || hookProperties === void 0 ? void 0 : hookProperties.TrafficRoutingConfig) === null || _f === void 0 ? void 0 : _f.TimeBasedCanary) === null || _g === void 0 ? void 0 : _g.BakeTimeMins,
                },
                timeBasedLinear: {
                    stepPercentage: (_j = (_h = hookProperties === null || hookProperties === void 0 ? void 0 : hookProperties.TrafficRoutingConfig) === null || _h === void 0 ? void 0 : _h.TimeBasedLinear) === null || _j === void 0 ? void 0 : _j.StepPercentage,
                    bakeTimeMins: (_l = (_k = hookProperties === null || hookProperties === void 0 ? void 0 : hookProperties.TrafficRoutingConfig) === null || _k === void 0 ? void 0 : _k.TimeBasedLinear) === null || _l === void 0 ? void 0 : _l.BakeTimeMins,
                },
            },
            additionalOptions: {
                terminationWaitTimeInMinutes: (_m = hookProperties === null || hookProperties === void 0 ? void 0 : hookProperties.AdditionalOptions) === null || _m === void 0 ? void 0 : _m.TerminationWaitTimeInMinutes,
            },
            lifecycleEventHooks: {
                beforeInstall: (_o = hookProperties === null || hookProperties === void 0 ? void 0 : hookProperties.LifecycleEventHooks) === null || _o === void 0 ? void 0 : _o.BeforeInstall,
                afterInstall: (_p = hookProperties === null || hookProperties === void 0 ? void 0 : hookProperties.LifecycleEventHooks) === null || _p === void 0 ? void 0 : _p.AfterInstall,
                afterAllowTestTraffic: (_q = hookProperties === null || hookProperties === void 0 ? void 0 : hookProperties.LifecycleEventHooks) === null || _q === void 0 ? void 0 : _q.AfterAllowTestTraffic,
                beforeAllowTraffic: (_r = hookProperties === null || hookProperties === void 0 ? void 0 : hookProperties.LifecycleEventHooks) === null || _r === void 0 ? void 0 : _r.BeforeAllowTraffic,
                afterAllowTraffic: (_s = hookProperties === null || hookProperties === void 0 ? void 0 : hookProperties.LifecycleEventHooks) === null || _s === void 0 ? void 0 : _s.AfterAllowTraffic,
            },
        });
        function applicationFromCloudFormation(app) {
            var _b, _c, _d, _e, _f, _g, _h, _j, _k, _l, _m, _o, _p, _q, _r, _s, _t, _u, _v, _w, _x;
            const target = findResource((_b = app === null || app === void 0 ? void 0 : app.Target) === null || _b === void 0 ? void 0 : _b.LogicalID);
            const taskDefinitions = (_d = (_c = app === null || app === void 0 ? void 0 : app.ECSAttributes) === null || _c === void 0 ? void 0 : _c.TaskDefinitions) === null || _d === void 0 ? void 0 : _d.map((td) => findResource(td));
            const taskSets = (_f = (_e = app === null || app === void 0 ? void 0 : app.ECSAttributes) === null || _e === void 0 ? void 0 : _e.TaskSets) === null || _f === void 0 ? void 0 : _f.map((ts) => findResource(ts));
            const prodTrafficRoute = findResource((_j = (_h = (_g = app === null || app === void 0 ? void 0 : app.ECSAttributes) === null || _g === void 0 ? void 0 : _g.TrafficRouting) === null || _h === void 0 ? void 0 : _h.ProdTrafficRoute) === null || _j === void 0 ? void 0 : _j.LogicalID);
            const testTrafficRoute = findResource((_m = (_l = (_k = app === null || app === void 0 ? void 0 : app.ECSAttributes) === null || _k === void 0 ? void 0 : _k.TrafficRouting) === null || _l === void 0 ? void 0 : _l.TestTrafficRoute) === null || _m === void 0 ? void 0 : _m.LogicalID);
            const targetGroups = (_q = (_p = (_o = app === null || app === void 0 ? void 0 : app.ECSAttributes) === null || _o === void 0 ? void 0 : _o.TrafficRouting) === null || _p === void 0 ? void 0 : _p.TargetGroups) === null || _q === void 0 ? void 0 : _q.map((tg) => findResource(tg));
            return {
                target: {
                    type: (_r = app === null || app === void 0 ? void 0 : app.Target) === null || _r === void 0 ? void 0 : _r.Type,
                    logicalId: target === null || target === void 0 ? void 0 : target.logicalId,
                },
                ecsAttributes: {
                    taskDefinitions: taskDefinitions === null || taskDefinitions === void 0 ? void 0 : taskDefinitions.map(td => td === null || td === void 0 ? void 0 : td.logicalId),
                    taskSets: taskSets === null || taskSets === void 0 ? void 0 : taskSets.map(ts => ts === null || ts === void 0 ? void 0 : ts.logicalId),
                    trafficRouting: {
                        prodTrafficRoute: {
                            type: (_u = (_t = (_s = app === null || app === void 0 ? void 0 : app.ECSAttributes) === null || _s === void 0 ? void 0 : _s.TrafficRouting) === null || _t === void 0 ? void 0 : _t.ProdTrafficRoute) === null || _u === void 0 ? void 0 : _u.Type,
                            logicalId: prodTrafficRoute === null || prodTrafficRoute === void 0 ? void 0 : prodTrafficRoute.logicalId,
                        },
                        testTrafficRoute: {
                            type: (_x = (_w = (_v = app === null || app === void 0 ? void 0 : app.ECSAttributes) === null || _v === void 0 ? void 0 : _v.TrafficRouting) === null || _w === void 0 ? void 0 : _w.TestTrafficRoute) === null || _x === void 0 ? void 0 : _x.Type,
                            logicalId: testTrafficRoute === null || testTrafficRoute === void 0 ? void 0 : testTrafficRoute.logicalId,
                        },
                        targetGroups: targetGroups === null || targetGroups === void 0 ? void 0 : targetGroups.map((tg) => tg === null || tg === void 0 ? void 0 : tg.logicalId),
                    },
                },
            };
        }
        function findResource(logicalId) {
            if (logicalId == null) {
                return undefined;
            }
            const ret = options.parser.finder.findResource(logicalId);
            if (!ret) {
                throw new Error(`Hook '${id}' references resource '${logicalId}' that was not found in the template`);
            }
            return ret;
        }
    }
    /**
     * The IAM Role for CloudFormation to use to perform blue-green deployments.
     *
     * @stability stable
     */
    get serviceRole() {
        return this._serviceRole;
    }
    /**
     * The IAM Role for CloudFormation to use to perform blue-green deployments.
     *
     * @stability stable
     */
    set serviceRole(serviceRole) {
        this._serviceRole = serviceRole;
    }
    /**
     * Properties of the Amazon ECS applications being deployed.
     *
     * @stability stable
     */
    get applications() {
        return this._applications;
    }
    /**
     * Properties of the Amazon ECS applications being deployed.
     *
     * @stability stable
     */
    set applications(value) {
        this._applications = value;
    }
    /**
     * Traffic routing configuration settings.
     *
     * @default - time-based canary traffic shifting, with a 15% step percentage and a five minute bake time
     * @stability stable
     */
    get trafficRoutingConfig() {
        return this._trafficRoutingConfig;
    }
    /**
     * Traffic routing configuration settings.
     *
     * @default - time-based canary traffic shifting, with a 15% step percentage and a five minute bake time
     * @stability stable
     */
    set trafficRoutingConfig(value) {
        this._trafficRoutingConfig = value;
    }
    /**
     * Additional options for the blue/green deployment.
     *
     * @default - no additional options
     * @stability stable
     */
    get additionalOptions() {
        return this._additionalOptions;
    }
    /**
     * Additional options for the blue/green deployment.
     *
     * @default - no additional options
     * @stability stable
     */
    set additionalOptions(value) {
        this._additionalOptions = value;
    }
    /**
     * Use lifecycle event hooks to specify a Lambda function that CodeDeploy can call to validate a deployment.
     *
     * You can use the same function or a different one for deployment lifecycle events.
     * Following completion of the validation tests,
     * the Lambda {@link CfnCodeDeployBlueGreenLifecycleEventHooks.afterAllowTraffic}
     * function calls back CodeDeploy and delivers a result of 'Succeeded' or 'Failed'.
     *
     * @default - no lifecycle event hooks
     * @stability stable
     */
    get lifecycleEventHooks() {
        return this._lifecycleEventHooks;
    }
    /**
     * Use lifecycle event hooks to specify a Lambda function that CodeDeploy can call to validate a deployment.
     *
     * You can use the same function or a different one for deployment lifecycle events.
     * Following completion of the validation tests,
     * the Lambda {@link CfnCodeDeployBlueGreenLifecycleEventHooks.afterAllowTraffic}
     * function calls back CodeDeploy and delivers a result of 'Succeeded' or 'Failed'.
     *
     * @default - no lifecycle event hooks
     * @stability stable
     */
    set lifecycleEventHooks(value) {
        this._lifecycleEventHooks = value;
    }
    /**
     * @stability stable
     */
    renderProperties(_props) {
        var _b, _c, _d, _e, _f, _g, _h, _j, _k, _l, _m, _o, _p, _q, _r;
        return {
            ServiceRole: this.serviceRole,
            Applications: this.applications.map((app) => ({
                Target: {
                    Type: app.target.type,
                    LogicalID: app.target.logicalId,
                },
                ECSAttributes: {
                    TaskDefinitions: app.ecsAttributes.taskDefinitions,
                    TaskSets: app.ecsAttributes.taskSets,
                    TrafficRouting: {
                        ProdTrafficRoute: {
                            Type: app.ecsAttributes.trafficRouting.prodTrafficRoute.type,
                            LogicalID: app.ecsAttributes.trafficRouting.prodTrafficRoute.logicalId,
                        },
                        TestTrafficRoute: {
                            Type: app.ecsAttributes.trafficRouting.testTrafficRoute.type,
                            LogicalID: app.ecsAttributes.trafficRouting.testTrafficRoute.logicalId,
                        },
                        TargetGroups: app.ecsAttributes.trafficRouting.targetGroups,
                    },
                },
            })),
            TrafficRoutingConfig: util_1.undefinedIfAllValuesAreEmpty({
                Type: (_b = this.trafficRoutingConfig) === null || _b === void 0 ? void 0 : _b.type,
                TimeBasedCanary: util_1.undefinedIfAllValuesAreEmpty({
                    StepPercentage: (_d = (_c = this.trafficRoutingConfig) === null || _c === void 0 ? void 0 : _c.timeBasedCanary) === null || _d === void 0 ? void 0 : _d.stepPercentage,
                    BakeTimeMins: (_f = (_e = this.trafficRoutingConfig) === null || _e === void 0 ? void 0 : _e.timeBasedCanary) === null || _f === void 0 ? void 0 : _f.bakeTimeMins,
                }),
                TimeBasedLinear: util_1.undefinedIfAllValuesAreEmpty({
                    StepPercentage: (_h = (_g = this.trafficRoutingConfig) === null || _g === void 0 ? void 0 : _g.timeBasedLinear) === null || _h === void 0 ? void 0 : _h.stepPercentage,
                    BakeTimeMins: (_k = (_j = this.trafficRoutingConfig) === null || _j === void 0 ? void 0 : _j.timeBasedLinear) === null || _k === void 0 ? void 0 : _k.bakeTimeMins,
                }),
            }),
            AdditionalOptions: util_1.undefinedIfAllValuesAreEmpty({
                TerminationWaitTimeInMinutes: (_l = this.additionalOptions) === null || _l === void 0 ? void 0 : _l.terminationWaitTimeInMinutes,
            }),
            LifecycleEventHooks: util_1.undefinedIfAllValuesAreEmpty({
                BeforeInstall: (_m = this.lifecycleEventHooks) === null || _m === void 0 ? void 0 : _m.beforeInstall,
                AfterInstall: (_o = this.lifecycleEventHooks) === null || _o === void 0 ? void 0 : _o.afterInstall,
                AfterAllowTestTraffic: (_p = this.lifecycleEventHooks) === null || _p === void 0 ? void 0 : _p.afterAllowTestTraffic,
                BeforeAllowTraffic: (_q = this.lifecycleEventHooks) === null || _q === void 0 ? void 0 : _q.beforeAllowTraffic,
                AfterAllowTraffic: (_r = this.lifecycleEventHooks) === null || _r === void 0 ? void 0 : _r.afterAllowTraffic,
            }),
        };
    }
}
exports.CfnCodeDeployBlueGreenHook = CfnCodeDeployBlueGreenHook;
_a = JSII_RTTI_SYMBOL_1;
CfnCodeDeployBlueGreenHook[_a] = { fqn: "@aws-cdk/core.CfnCodeDeployBlueGreenHook", version: "1.91.0" };
//# sourceMappingURL=data:application/json;base64,