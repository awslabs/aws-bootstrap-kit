"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.RootDns = void 0;
const cdk = require("@aws-cdk/core");
const iam = require("@aws-cdk/aws-iam");
const route53 = require("@aws-cdk/aws-route53");
const aws_route53_1 = require("@aws-cdk/aws-route53");
const utils = require("./dns/delegation-record-handler/utils");
/**
 * A class creating the main hosted zone and a role assumable by stages account to be able to set sub domain delegation.
 */
class RootDns extends cdk.Construct {
    constructor(scope, id, props) {
        super(scope, id);
        this.rootHostedZone = this.createRootHostedZone(props);
        for (const accountIndex in props.stagesAccounts) {
            const account = props.stagesAccounts[accountIndex];
            const stageSubZone = this.createStageSubZone(account, props.rootHostedZoneDNSName);
            this.createDNSAutoUpdateRole(account, stageSubZone);
            if (stageSubZone.hostedZoneNameServers) {
                new route53.RecordSet(this, `${account.accountName}SubZoneDelegationNSRecord`, {
                    recordType: route53.RecordType.NS,
                    target: aws_route53_1.RecordTarget.fromValues(...stageSubZone.hostedZoneNameServers ? stageSubZone.hostedZoneNameServers : ''),
                    recordName: stageSubZone.zoneName,
                    zone: this.rootHostedZone,
                });
            }
        }
        if (props.thirdPartyProviderDNSUsed &&
            this.rootHostedZone.hostedZoneNameServers) {
            new cdk.CfnOutput(this, `NS records`, {
                value: cdk.Fn.join(",", this.rootHostedZone.hostedZoneNameServers),
            });
        }
        else {
            throw new Error("Creation of DNS domain is not yet supported");
            // TODO: implement call to https://docs.aws.amazon.com/AWSJavaScriptSDK/latest/AWS/Route53Domains.html#registerDomain-property
        }
    }
    createStageSubZone(account, rootHostedZoneDNSName) {
        const subDomainPrefix = utils.getSubdomainPrefix(account.accountName, account.accountStageName);
        return new route53.HostedZone(this, `${subDomainPrefix}StageSubZone`, {
            zoneName: `${subDomainPrefix}.${rootHostedZoneDNSName}`,
        });
    }
    createDNSAutoUpdateRole(account, stageSubZone) {
        const dnsAutoUpdateRole = new iam.Role(this, stageSubZone.zoneName, {
            assumedBy: new iam.AccountPrincipal(account.accountId),
            roleName: utils.getDNSUpdateRoleNameFromSubZoneName(stageSubZone.zoneName)
        });
        dnsAutoUpdateRole.addToPolicy(new iam.PolicyStatement({
            resources: [stageSubZone.hostedZoneArn],
            actions: [
                "route53:GetHostedZone",
                "route53:ChangeResourceRecordSets",
                "route53:TestDNSAnswer",
            ],
        }));
        dnsAutoUpdateRole.addToPolicy(new iam.PolicyStatement({
            resources: ['*'],
            actions: [
                "route53:ListHostedZonesByName"
            ],
        }));
        return dnsAutoUpdateRole;
    }
    createRootHostedZone(props) {
        return new route53.HostedZone(this, "RootHostedZone", {
            zoneName: props.rootHostedZoneDNSName,
        });
    }
}
exports.RootDns = RootDns;
//# sourceMappingURL=data:application/json;base64,