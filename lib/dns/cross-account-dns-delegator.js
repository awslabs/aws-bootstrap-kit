"use strict";
var _a;
Object.defineProperty(exports, "__esModule", { value: true });
exports.CrossAccountDNSDelegator = void 0;
const JSII_RTTI_SYMBOL_1 = Symbol.for("jsii.rtti");
const core = require("@aws-cdk/core");
const route53 = require("@aws-cdk/aws-route53");
const cross_account_zone_delegation_record_1 = require("./cross-account-zone-delegation-record");
/**
 * TODO: propose this to fix https://github.com/aws/aws-cdk/issues/8776 High-level construct that creates: 1. A public hosted zone in the current account 2. A record name in the hosted zone id of target account.
 *
 * Usage:
 * Create a role with the following permission:
 * {
 *       "Sid": "VisualEditor0",
 *       "Effect": "Allow",
 *       "Action": [
 *           "route53:GetHostedZone",
 *           "route53:ChangeResourceRecordSets"
 *       ],
 *       "Resource": "arn:aws:route53:::hostedzone/ZXXXXXXXXX"
 * }
 *
 * Then use the construct like this:
 *
 * const crossAccountDNSDelegatorProps: ICrossAccountDNSDelegatorProps = {
 *       targetAccount: '1234567890',
 *       targetRoleToAssume: 'DelegateRecordUpdateRoleInThatAccount',
 *       targetHostedZoneId: 'ZXXXXXXXXX',
 *       zoneName: 'subdomain.mydomain.com',
 * };
 *
 * new CrossAccountDNSDelegator(this, 'CrossAccountDNSDelegatorStack', crossAccountDNSDelegatorProps);
 */
class CrossAccountDNSDelegator extends core.Construct {
    constructor(scope, id, props) {
        super(scope, id);
        const { targetAccount, targetRoleToAssume, targetHostedZoneId, zoneName, } = props;
        const hostedZone = new route53.HostedZone(this, 'HostedZone', {
            zoneName: zoneName
        });
        this.hostedZone = hostedZone;
        const delegatedNameServers = hostedZone.hostedZoneNameServers;
        const currentAccountId = core.Stack.of(this).account;
        new cross_account_zone_delegation_record_1.CrossAccountZoneDelegationRecord(this, 'CrossAccountZoneDelegationRecord', {
            targetAccount: targetAccount,
            targetRoleToAssume: targetRoleToAssume,
            targetHostedZoneId: targetHostedZoneId,
            recordName: zoneName,
            toDelegateNameServers: delegatedNameServers,
            currentAccountId: currentAccountId
        });
    }
}
exports.CrossAccountDNSDelegator = CrossAccountDNSDelegator;
_a = JSII_RTTI_SYMBOL_1;
CrossAccountDNSDelegator[_a] = { fqn: "aws-bootstrap-kit.CrossAccountDNSDelegator", version: "0.3.9" };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY3Jvc3MtYWNjb3VudC1kbnMtZGVsZWdhdG9yLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiY3Jvc3MtYWNjb3VudC1kbnMtZGVsZWdhdG9yLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7O0FBQUEsc0NBQXNDO0FBQ3RDLGdEQUFnRDtBQUNoRCxpR0FBd0Y7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQXlEeEYsTUFBYSx3QkFBeUIsU0FBUSxJQUFJLENBQUMsU0FBUztJQUV4RCxZQUFZLEtBQXFCLEVBQUUsRUFBVSxFQUFFLEtBQXFDO1FBQ2hGLEtBQUssQ0FBQyxLQUFLLEVBQUUsRUFBRSxDQUFDLENBQUM7UUFFakIsTUFBTSxFQUNGLGFBQWEsRUFDYixrQkFBa0IsRUFDbEIsa0JBQWtCLEVBQ2xCLFFBQVEsR0FDWCxHQUFHLEtBQUssQ0FBQztRQUVWLE1BQU0sVUFBVSxHQUFHLElBQUksT0FBTyxDQUFDLFVBQVUsQ0FBQyxJQUFJLEVBQUUsWUFBWSxFQUFFO1lBQzFELFFBQVEsRUFBRSxRQUFRO1NBQ3JCLENBQUMsQ0FBQztRQUVILElBQUksQ0FBQyxVQUFVLEdBQUcsVUFBVSxDQUFDO1FBRTdCLE1BQU0sb0JBQW9CLEdBQWEsVUFBVSxDQUFDLHFCQUFzQixDQUFDO1FBRXpFLE1BQU0sZ0JBQWdCLEdBQUcsSUFBSSxDQUFDLEtBQUssQ0FBQyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsT0FBTyxDQUFDO1FBQ3JELElBQUksdUVBQWdDLENBQUMsSUFBSSxFQUFFLGtDQUFrQyxFQUFFO1lBQzNFLGFBQWEsRUFBRSxhQUFhO1lBQzVCLGtCQUFrQixFQUFFLGtCQUFrQjtZQUN0QyxrQkFBa0IsRUFBRSxrQkFBa0I7WUFDdEMsVUFBVSxFQUFFLFFBQVE7WUFDcEIscUJBQXFCLEVBQUUsb0JBQW9CO1lBQzNDLGdCQUFnQixFQUFFLGdCQUFnQjtTQUNyQyxDQUFDLENBQUM7SUFDUCxDQUFDOztBQTdCTCw0REE4QkMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgKiBhcyBjb3JlIGZyb20gJ0Bhd3MtY2RrL2NvcmUnO1xuaW1wb3J0ICogYXMgcm91dGU1MyBmcm9tICdAYXdzLWNkay9hd3Mtcm91dGU1Myc7XG5pbXBvcnQge0Nyb3NzQWNjb3VudFpvbmVEZWxlZ2F0aW9uUmVjb3JkfSBmcm9tIFwiLi9jcm9zcy1hY2NvdW50LXpvbmUtZGVsZWdhdGlvbi1yZWNvcmRcIjtcblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXG5leHBvcnQgaW50ZXJmYWNlIElDcm9zc0FjY291bnRETlNEZWxlZ2F0b3JQcm9wcyB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXG4gICAgdGFyZ2V0QWNjb3VudD86IHN0cmluZztcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBcbiAgICB0YXJnZXRSb2xlVG9Bc3N1bWU/OiBzdHJpbmc7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXG4gICAgdGFyZ2V0SG9zdGVkWm9uZUlkPzogc3RyaW5nO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXG4gICAgem9uZU5hbWU6IHN0cmluZztcbn1cblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBcbmV4cG9ydCBjbGFzcyBDcm9zc0FjY291bnRETlNEZWxlZ2F0b3IgZXh0ZW5kcyBjb3JlLkNvbnN0cnVjdCB7XG4gICAgcmVhZG9ubHkgaG9zdGVkWm9uZTogcm91dGU1My5Ib3N0ZWRab25lO1xuICAgIGNvbnN0cnVjdG9yKHNjb3BlOiBjb3JlLkNvbnN0cnVjdCwgaWQ6IHN0cmluZywgcHJvcHM6IElDcm9zc0FjY291bnRETlNEZWxlZ2F0b3JQcm9wcykge1xuICAgICAgICBzdXBlcihzY29wZSwgaWQpO1xuXG4gICAgICAgIGNvbnN0IHtcbiAgICAgICAgICAgIHRhcmdldEFjY291bnQsXG4gICAgICAgICAgICB0YXJnZXRSb2xlVG9Bc3N1bWUsXG4gICAgICAgICAgICB0YXJnZXRIb3N0ZWRab25lSWQsXG4gICAgICAgICAgICB6b25lTmFtZSxcbiAgICAgICAgfSA9IHByb3BzO1xuXG4gICAgICAgIGNvbnN0IGhvc3RlZFpvbmUgPSBuZXcgcm91dGU1My5Ib3N0ZWRab25lKHRoaXMsICdIb3N0ZWRab25lJywge1xuICAgICAgICAgICAgem9uZU5hbWU6IHpvbmVOYW1lXG4gICAgICAgIH0pO1xuICAgICAgICBcbiAgICAgICAgdGhpcy5ob3N0ZWRab25lID0gaG9zdGVkWm9uZTtcblxuICAgICAgICBjb25zdCBkZWxlZ2F0ZWROYW1lU2VydmVyczogc3RyaW5nW10gPSBob3N0ZWRab25lLmhvc3RlZFpvbmVOYW1lU2VydmVycyE7XG5cbiAgICAgICAgY29uc3QgY3VycmVudEFjY291bnRJZCA9IGNvcmUuU3RhY2sub2YodGhpcykuYWNjb3VudDtcbiAgICAgICAgbmV3IENyb3NzQWNjb3VudFpvbmVEZWxlZ2F0aW9uUmVjb3JkKHRoaXMsICdDcm9zc0FjY291bnRab25lRGVsZWdhdGlvblJlY29yZCcsIHtcbiAgICAgICAgICAgIHRhcmdldEFjY291bnQ6IHRhcmdldEFjY291bnQsXG4gICAgICAgICAgICB0YXJnZXRSb2xlVG9Bc3N1bWU6IHRhcmdldFJvbGVUb0Fzc3VtZSxcbiAgICAgICAgICAgIHRhcmdldEhvc3RlZFpvbmVJZDogdGFyZ2V0SG9zdGVkWm9uZUlkLFxuICAgICAgICAgICAgcmVjb3JkTmFtZTogem9uZU5hbWUsXG4gICAgICAgICAgICB0b0RlbGVnYXRlTmFtZVNlcnZlcnM6IGRlbGVnYXRlZE5hbWVTZXJ2ZXJzLFxuICAgICAgICAgICAgY3VycmVudEFjY291bnRJZDogY3VycmVudEFjY291bnRJZFxuICAgICAgICB9KTtcbiAgICB9XG59XG4iXX0=