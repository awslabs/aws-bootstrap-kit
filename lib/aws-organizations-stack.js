"use strict";
/*
Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.

Licensed under the Apache License, Version 2.0 (the "License").
You may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/
Object.defineProperty(exports, "__esModule", { value: true });
exports.AwsOrganizationsStack = void 0;
const cdk = require("@aws-cdk/core");
const organization_1 = require("./organization");
const organizational_unit_1 = require("./organizational-unit");
const account_1 = require("./account");
const secure_root_user_1 = require("./secure-root-user");
const organization_trail_1 = require("./organization-trail");
const package_json_1 = require("../package.json");
const dns_1 = require("./dns");
const validate_email_1 = require("./validate-email");
/**
 * A Stack creating the Software Development Life Cycle (SDLC) Organization.
 */
class AwsOrganizationsStack extends cdk.Stack {
    constructor(scope, id, props) {
        super(scope, id, { description: `Software development Landing Zone (uksb-1r7an8o45) (version:${package_json_1.version})`, ...props });
        this.stageAccounts = [];
        const { email, nestedOU, forceEmailVerification = true } = props;
        if (nestedOU.length > 0) {
            let org = new organization_1.Organization(this, "Organization");
            if (email) {
                this.emailPrefix = email.split('@', 2)[0];
                this.domain = email.split('@', 2)[1];
                if (forceEmailVerification) {
                    const validateEmail = new validate_email_1.ValidateEmail(this, 'EmailValidation', { email });
                    org.node.addDependency(validateEmail);
                }
            }
            let orgTrail = new organization_trail_1.OrganizationTrail(this, 'OrganizationTrail', { OrganizationId: org.id });
            orgTrail.node.addDependency(org);
            let previousSequentialConstruct = orgTrail;
            nestedOU.forEach(nestedOU => {
                previousSequentialConstruct = this.createOrganizationTree(nestedOU, org.rootId, previousSequentialConstruct);
            });
        }
        if (props.rootHostedZoneDNSName) {
            new dns_1.RootDns(this, 'RootDNS', {
                stagesAccounts: this.stageAccounts,
                rootHostedZoneDNSName: props.rootHostedZoneDNSName,
                thirdPartyProviderDNSUsed: props.thirdPartyProviderDNSUsed ? props.thirdPartyProviderDNSUsed : true
            });
        }
        new secure_root_user_1.SecureRootUser(this, 'SecureRootUser', email);
    }
    createOrganizationTree(oUSpec, parentId, previousSequentialConstruct) {
        var _a;
        let organizationalUnit = new organizational_unit_1.OrganizationalUnit(this, `${oUSpec.name}-OU`, { Name: oUSpec.name, ParentId: parentId });
        //adding an explicit dependency as CloudFormation won't infer that Organization, Organizational Units and Accounts must be created or modified sequentially
        organizationalUnit.node.addDependency(previousSequentialConstruct);
        previousSequentialConstruct = organizationalUnit;
        oUSpec.accounts.forEach(accountSpec => {
            let accountEmail;
            if (accountSpec.email) {
                accountEmail = accountSpec.email;
            }
            else if (this.emailPrefix && this.domain) {
                accountEmail = `${this.emailPrefix}+${accountSpec.name}-${cdk.Stack.of(this).account}@${this.domain}`;
            }
            else {
                throw new Error(`Master account email must be provided or an account email for account ${accountSpec.name}`);
            }
            let account = new account_1.Account(this, accountSpec.name, {
                email: accountEmail,
                name: accountSpec.name,
                parentOrganizationalUnitId: organizationalUnit.id,
                type: accountSpec.type,
                stageName: accountSpec.stageName,
                stageOrder: accountSpec.stageOrder,
                hostedServices: accountSpec.hostedServices
            });
            // Adding an explicit dependency as CloudFormation won't infer that Organization, Organizational Units and Accounts must be created or modified sequentially
            account.node.addDependency(previousSequentialConstruct);
            previousSequentialConstruct = account;
            // Building stageAccounts array to be used for DNS delegation system
            if (['Prod', 'SDLC'].includes(oUSpec.name)) {
                this.stageAccounts.push(account);
            }
        });
        (_a = oUSpec.nestedOU) === null || _a === void 0 ? void 0 : _a.forEach(nestedOU => {
            previousSequentialConstruct = this.createOrganizationTree(nestedOU, organizationalUnit.id, previousSequentialConstruct);
        });
        return previousSequentialConstruct;
    }
}
exports.AwsOrganizationsStack = AwsOrganizationsStack;
//# sourceMappingURL=data:application/json;base64,